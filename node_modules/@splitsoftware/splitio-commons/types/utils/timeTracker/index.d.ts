import { ILogger } from '../../logger/types';
import { IResponse } from '../../services/types';
interface MetricsCollector {
    countException(): void;
    count(status: number): void;
    latency(ms: number): void;
    ready(ms: number): void;
    getTreatment(ms: number): void;
    getTreatments(ms: number): void;
    getTreatmentWithConfig(ms: number): void;
    getTreatmentsWithConfig(ms: number): void;
    [method: string]: (ms: number) => void;
}
export declare const TrackerAPI: {
    /**
     * "Private" method, used to attach count/countException and stop callbacks to a promise.
     *
     * @param {ILogger} log - Logger.
     * @param {Promise} promise - The promise we want to attach the callbacks.
     * @param {string} task - The name of the task.
     * @param {number | string} modifier - (optional) The modifier for the task, if any.
     */
    __attachToPromise(log: ILogger, promise: Promise<IResponse>, task: string, collector: false | MetricsCollector, modifier?: string | number | undefined): Promise<IResponse>;
    /**
     * Starts tracking the time for a given task. All tasks tracked are considered "unique" because
     * there may be multiple SDK instances tracking a "generic" task, making any task non-generic.
     *
     * @param {ILogger} log - Logger.
     * @param {string} task - The task we are starting.
     * @param {Object} collectors - The collectors map.
     * @param {Promise} promise - (optional) The promise we are tracking.
     * @return {Function | Promise} The stop function for this specific task or the promise received with the callbacks registered.
     */
    start(log: ILogger, task: string, collectors?: Record<string, MetricsCollector> | undefined, promise?: Promise<IResponse> | undefined, now?: (() => number) | undefined): Promise<IResponse> | (() => number);
    /**
     * Setup the collector for a task that reports metrics.
     *
     * @param {string} task - The task name
     * @param {number | string} taskUniqueId - The unique identifier for this task
     * @param {Object} collectors - The collectors map.
     */
    setCollectorForTask(task: string, taskUniqueId: number | string, collectors: Record<string, MetricsCollector>): void;
    /**
     * Stops the tracking of a given task.
     *
     * @param {ILogger} log - Logger.
     * @param {string} task - The task we are starting.
     * @param {number | string} modifier - (optional) The modifier for that specific task.
     */
    stop(log: ILogger, task: string, modifier?: string | number | undefined): number | undefined;
    /**
     * The constants shortcut for the task names.
     */
    TaskNames: {
        SDK_READY: string;
        SDK_GET_TREATMENT: string;
        SDK_GET_TREATMENTS: string;
        SDK_GET_TREATMENT_WITH_CONFIG: string;
        SDK_GET_TREATMENTS_WITH_CONFIG: string;
        SPLITS_READY: string;
        SEGMENTS_READY: string;
        METRICS_PUSH: string;
        IMPRESSIONS_PUSH: string;
        EVENTS_PUSH: string;
        MY_SEGMENTS_FETCH: string;
        SEGMENTS_FETCH: string;
        SPLITS_FETCH: string;
    };
};
export {};
