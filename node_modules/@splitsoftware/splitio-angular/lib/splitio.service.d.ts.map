{"version":3,"file":"splitio.service.d.ts","sources":["splitio.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import * as SplitIO from '@splitsoftware/splitio-browserjs/types/splitio';\nimport { Observable } from 'rxjs';\nexport declare class SplitService {\n    /**\n     * The local reference to the Split SDK.\n     */\n    private splitio;\n    /**\n     * The local reference to the Split SDK's Client.\n     */\n    private splitClient;\n    /**\n     * The local reference to the Split SDK's Manager.\n     */\n    private splitManager;\n    /**\n     * Map of intialized clients\n     */\n    private clientsMap;\n    /**\n     * Map of events status of intialized clients\n     */\n    private emittedEvents;\n    /**\n     * Flag to determine if SDK is ready or not.\n     */\n    isSDKReady: boolean;\n    /**\n     * Factory config\n     */\n    private config;\n    /**\n     * SDK events observables\n     */\n    sdkReady$: Observable<string>;\n    sdkReadyTimedOut$: Observable<string>;\n    sdkReadyFromCache$: Observable<string>;\n    sdkUpdate$: Observable<string>;\n    /**\n     * This method initializes the SDK with the required Browser APIKEY\n     * and the 'key' according to the Traffic type set (ex.: an user id).\n     * @function init\n     * @param {IBrowserSettings} config Should be an object that complies with the SplitIO.IBrowserSettings.\n     * @returns {Observable<string>} Returns when sdk is ready\n     */\n    init(config: SplitIO.IBrowserSettings): Observable<string>;\n    /**\n     * Returns a shared client of the SDK, associated with the given key\n     * @function initClient\n     * @param {SplitKey} key The key for the new client instance.\n     * @returns {Observable<string>} Returns when sdk is ready\n     */\n    initClient(key: SplitIO.SplitKey): Observable<string>;\n    private getClientObservable;\n    /**\n     * Returns an observable that calls back when the client is ready\n     * @function getClientSDKReady\n     * @param {SplitKey} key The key for the client instance.\n     * @returns {Observable<string>}\n     */\n    getClientSDKReady(key: SplitIO.SplitKey): Observable<string>;\n    /**\n     * Returns an observable that calls back when the client ready event is timed out\n     * @function getClientSDKReadyTimedOut\n     * @param {SplitKey} key The key for the client instance.\n     * @returns {Observable<string>}\n     */\n    getClientSDKReadyTimedOut(key: SplitIO.SplitKey): Observable<string>;\n    /**\n     * Returns an observable that calls back when the client is ready from cache\n     * @function getClientSDKReadyFromCache\n     * @param {SplitKey} key The key for the client instance.\n     * @returns {Observable<string>}\n     */\n    getClientSDKReadyFromCache(key: SplitIO.SplitKey): Observable<string>;\n    /**\n     * Returns an observable that calls back when the client is updated\n     * @function getClientSDKUpdate\n     * @param {SplitKey} key The key for the client instance.\n     * @returns {Observable<string>}\n     */\n    getClientSDKUpdate(key: SplitIO.SplitKey): Observable<string>;\n    /**\n     * initialize sdk Events into observables\n     */\n    private sdkInitEventObservable;\n    /**\n     * Returns a promise that will be resolved once the SDK has finished loading (SDK_READY event emitted) or rejected if the SDK has timedout (SDK_READY_TIMED_OUT event emitted).\n     * As it's meant to provide similar flexibility to the event approach, given that the SDK might be eventually ready after a timeout event,\n     * calling the ready method after the SDK had timed out will return a new promise that should eventually resolve if the SDK gets ready.\n     * @returns Promise<void>\n     */\n    ready(): Promise<void>;\n    private isInitialized;\n    /**\n     * Returns the SDK client\n     * @param {SplitKey=} key The key for the client instance.\n     * @returns {IClient} split client.\n     */\n    getSDKClient(key?: SplitIO.SplitKey): SplitIO.IClient | undefined;\n    /**\n     * Returns the SDK factory\n     * @returns {ISDK} split factory\n     */\n    getSDKFactory(): SplitIO.ISDK | undefined;\n    /**\n     * Validates key and returns client if it is initialized for key or controlClient if it isn't\n     */\n    private getClient;\n    /**\n     * Returns a Treatment value, which is the treatment string for the given feature.\n     * @function getTreatment\n     * @param {SplitKey} key - The key for the client instance.\n     * @param {string} splitName - The string that represents the split we want to get the treatment.\n     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {Treatment} - The treatment string.\n     */\n    getTreatment(key: SplitIO.SplitKey, splitName: string, attributes?: SplitIO.Attributes | undefined): SplitIO.Treatment;\n    /**\n     * Returns a Treatment value, which is the treatment string for the given feature.\n     * @function getTreatment\n     * @param {string} splitName - The string that represents the split we want to get the treatment.\n     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {Treatment} - The treatment string.\n     */\n    getTreatment(splitName: string, attributes?: SplitIO.Attributes | undefined): SplitIO.Treatment;\n    /**\n     * Returns a TreatmentWithConfig value, which is an object with both treatment and config string for the given feature.\n     * @function getTreatmentWithConfig\n     * @param {SplitKey} key - The key for the client instance.\n     * @param {string} splitName - The string that represents the split we want to get the treatment.\n     * @param {Attributes} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {TreatmentWithConfig} - The map containing the treatment and the configuration stringified JSON (or null if there was no config for that treatment).\n     */\n    getTreatmentWithConfig(key: SplitIO.SplitKey, splitName: string, attributes?: SplitIO.Attributes | undefined): SplitIO.TreatmentWithConfig;\n    /**\n     * Returns a TreatmentWithConfig value, which is an object with both treatment and config string for the given feature.\n     * @function getTreatmentWithConfig\n     * @param {string} splitName - The string that represents the split we want to get the treatment.\n     * @param {Attributes} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {TreatmentWithConfig} - The map containing the treatment and the configuration stringified JSON (or null if there was no config for that treatment).\n     */\n    getTreatmentWithConfig(splitName: string, attributes?: SplitIO.Attributes | undefined): SplitIO.TreatmentWithConfig;\n    /**\n     * Returns a Treatments value, which is an object map with the treatments for the given features.\n     * @function getTreatments\n     * @param {SplitKey} key - The key for the client instance.\n     * @param {Array<string>} splitNames - An array of the split names we want to get the treatments.\n     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {Treatments} - The treatments object map.\n     */\n    getTreatments(key: SplitIO.SplitKey, splitNames: string[], attributes?: SplitIO.Attributes | undefined): SplitIO.Treatments;\n    /**\n     * Returns a Treatments value, which is an object map with the treatments for the given features.\n     * @function getTreatments\\\n     * @param {Array<string>} splitNames - An array of the split names we want to get the treatments.\n     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {Treatments} - The treatments object map.\n     */\n    getTreatments(splitNames: string[], attributes?: SplitIO.Attributes | undefined): SplitIO.Treatments;\n    /**\n     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the given features.\n     * @function getTreatmentsWithConfig\n     * @param {SplitKey} key - The key for the client instance.\n     * @param {Array<string>} splitNames - An array of the split names we want to get the treatments.\n     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {TreatmentsWithConfig} The map with all the TreatmentWithConfig objects\n     */\n    getTreatmentsWithConfig(key: SplitIO.SplitKey, splitNames: string[], attributes?: SplitIO.Attributes | undefined): SplitIO.TreatmentsWithConfig;\n    /**\n     * Returns a TreatmentsWithConfig value, which is an object map with the TreatmentWithConfig (an object with both treatment and config string) for the given features.\n     * @function getTreatmentsWithConfig\n     * @param {Array<string>} splitNames - An array of the split names we want to get the treatments.\n     * @param {Attributes=} attributes - An object of type Attributes defining the attributes for the given key.\n     * @returns {TreatmentsWithConfig} The map with all the TreatmentWithConfig objects\n     */\n    getTreatmentsWithConfig(splitNames: string[], attributes?: SplitIO.Attributes | undefined): SplitIO.TreatmentsWithConfig;\n    /**\n     * Tracks an event for a shared client to be fed to the results product on Split Webconsole and returns a promise to signal when the event was successfully queued (or not).\n     * @function track\n     * @param {SplitKey} key - The key that identifies the entity related to this event.\n     * @param {string} trafficType - The traffic type of the entity related to this event.\n     * @param {string} eventType - The event type corresponding to this event.\n     * @param {number=} value - The value of this event.\n     * @param {Properties=} properties - The properties of this event. Values can be string, number, boolean or null.\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the event was added to the queue successfully or not.\n     */\n    track(key: SplitIO.SplitKey, trafficType: string, eventType: string, value?: number | undefined, properties?: SplitIO.Properties | undefined): boolean;\n    /**\n     * Tracks an event to be fed to the results product on Split Webconsole and returns a promise to signal when the event was successfully queued (or not).\n     * @function track\n     * @param {string} trafficType - The traffic type of the entity related to this event.\n     * @param {string} eventType - The event type corresponding to this event.\n     * @param {number=} value - The value of this event.\n     * @param {Properties=} properties - The properties of this event. Values can be string, number, boolean or null.\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the event was added to the queue successfully or not.\n     */\n    track(trafficType: string, eventType: string, value?: number | undefined, properties?: SplitIO.Properties | undefined): boolean;\n    /**\n     * Validates key and returns client if it is initialized for key or controlClient if it isn't\n     */\n    private getManager;\n    /**\n     * Get the array of splits data in SplitView format.\n     * @function getSplits\n     * @returns {SplitViews} The list of SplitIO.SplitView.\n     */\n    getSplits(): SplitIO.SplitViews;\n    /**\n     * Get the data of a split in SplitView format.\n     * @function getSplit\n     * @param {string} splitName The name of the split we wan't to get info of.\n     * @returns {SplitView} The SplitIO.SplitView of the given split.\n     */\n    getSplit(splitName: string): SplitIO.SplitView | null;\n    /**\n     * Get the array of Split names.\n     * @function getSplitNames\n     * @returns {SplitNames} The lists of Split names.\n     */\n    getSplitNames(): SplitIO.SplitNames;\n    /**\n     * Destroy all clients instances.\n     * @function destroy\n     * @returns {Observable<unknown>}\n     */\n    destroy(): Observable<void>;\n    /**\n     * Private function to return as observable the event on parameter\n     * @param {string} event\n     * @param response\n     * @returns Observable<any>\n     */\n    private toObservable;\n}\n"]}