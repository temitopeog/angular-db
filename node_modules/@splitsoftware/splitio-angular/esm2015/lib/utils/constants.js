/**
 * SDK constant for control treatment
 */
export const CONTROL = 'control';
/**
 * string constant for observable to return when client exists for a key
 */
export const INIT_CLIENT_EXISTS = 'init::clientExists';
/**
 * string constant for observable to return when client is not initialized
 */
export const INIT_CLIENT_FIRST = 'init::clientFirst';
export const VERSION = 'angular-' + '0.3.0';
const ɵ0 = () => { return CONTROL; }, ɵ1 = () => { return { treatment: CONTROL, config: null }; }, ɵ2 = (splitNames) => {
    let result = {};
    splitNames.forEach((splitName) => {
        result = Object.assign(Object.assign({}, result), { [splitName]: CONTROL });
    });
    return result;
}, ɵ3 = (splitNames) => {
    let result = {};
    splitNames.forEach((splitName) => {
        result = Object.assign(Object.assign({}, result), { [splitName]: { treatment: CONTROL, config: null } });
    });
    return result;
}, ɵ4 = () => { return false; };
/**
 * client with methods that return default values
 */
export const CONTROL_CLIENT = {
    getTreatment: ɵ0,
    getTreatmentWithConfig: ɵ1,
    getTreatments: ɵ2,
    getTreatmentsWithConfig: ɵ3,
    track: ɵ4
};
const ɵ5 = () => { return []; }, ɵ6 = () => { return null; }, ɵ7 = () => { return []; };
/**
 *  with methods that return default values
 */
export const DEFAULT_MANAGER = {
    splits: ɵ5,
    split: ɵ6,
    names: ɵ7
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9lbW1hbnVlbHphbW9yYS9zcGxpdC9hbmd1bGFyLXNkay1wbHVnaW4vcHJvamVjdHMvc3BsaXRpby9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUNqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLG9CQUFvQixDQUFDO0FBQ3ZEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUM7QUFFckQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLFVBQVUsR0FBRyw0QkFBNEIsQ0FBQztXQU1qRCxHQUFHLEVBQUUsR0FBRyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FDZixHQUFHLEVBQUUsR0FBRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQy9ELENBQUMsVUFBb0IsRUFBRSxFQUFFO0lBQ3RDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxtQ0FBUSxNQUFNLEtBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEdBQUUsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsT0FDd0IsQ0FBQyxVQUFvQixFQUFFLEVBQUU7SUFDaEQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUMvQixNQUFNLG1DQUFRLE1BQU0sS0FBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUUsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsT0FDTSxHQUFHLEVBQUUsR0FBRyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFwQmhDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHO0lBQzVCLFlBQVksSUFBMkI7SUFDdkMsc0JBQXNCLElBQXdEO0lBQzlFLGFBQWEsSUFNWjtJQUNELHVCQUF1QixJQU10QjtJQUNELEtBQUssSUFBeUI7Q0FDL0IsQ0FBQztXQU1RLEdBQUcsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUNyQixHQUFHLEVBQUUsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsT0FDdEIsR0FBRyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBTjdCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHO0lBQzdCLE1BQU0sSUFBc0I7SUFDNUIsS0FBSyxJQUF3QjtJQUM3QixLQUFLLElBQXNCO0NBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNESyBjb25zdGFudCBmb3IgY29udHJvbCB0cmVhdG1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IENPTlRST0wgPSAnY29udHJvbCc7XG4vKipcbiAqIHN0cmluZyBjb25zdGFudCBmb3Igb2JzZXJ2YWJsZSB0byByZXR1cm4gd2hlbiBjbGllbnQgZXhpc3RzIGZvciBhIGtleVxuICovXG5leHBvcnQgY29uc3QgSU5JVF9DTElFTlRfRVhJU1RTID0gJ2luaXQ6OmNsaWVudEV4aXN0cyc7XG4vKipcbiAqIHN0cmluZyBjb25zdGFudCBmb3Igb2JzZXJ2YWJsZSB0byByZXR1cm4gd2hlbiBjbGllbnQgaXMgbm90IGluaXRpYWxpemVkXG4gKi9cbmV4cG9ydCBjb25zdCBJTklUX0NMSUVOVF9GSVJTVCA9ICdpbml0OjpjbGllbnRGaXJzdCc7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJ2FuZ3VsYXItJyArICdBTkdVTEFSX1NES19WRVJTSU9OX05VTUJFUic7XG5cbi8qKlxuICogY2xpZW50IHdpdGggbWV0aG9kcyB0aGF0IHJldHVybiBkZWZhdWx0IHZhbHVlc1xuICovXG5leHBvcnQgY29uc3QgQ09OVFJPTF9DTElFTlQgPSB7XG4gIGdldFRyZWF0bWVudDogKCkgPT4geyByZXR1cm4gQ09OVFJPTDsgfSxcbiAgZ2V0VHJlYXRtZW50V2l0aENvbmZpZzogKCkgPT4geyByZXR1cm4geyB0cmVhdG1lbnQ6IENPTlRST0wsIGNvbmZpZzogbnVsbCB9OyB9LFxuICBnZXRUcmVhdG1lbnRzOiAoc3BsaXROYW1lczogc3RyaW5nW10pID0+IHtcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgc3BsaXROYW1lcy5mb3JFYWNoKChzcGxpdE5hbWUpID0+IHtcbiAgICAgIHJlc3VsdCA9IHsgLi4ucmVzdWx0LCBbc3BsaXROYW1lXTogQ09OVFJPTCB9O1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIGdldFRyZWF0bWVudHNXaXRoQ29uZmlnOiAoc3BsaXROYW1lczogc3RyaW5nW10pID0+IHtcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgc3BsaXROYW1lcy5mb3JFYWNoKChzcGxpdE5hbWUpID0+IHtcbiAgICAgIHJlc3VsdCA9IHsgLi4ucmVzdWx0LCBbc3BsaXROYW1lXTogeyB0cmVhdG1lbnQ6IENPTlRST0wsIGNvbmZpZzogbnVsbCB9IH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgdHJhY2s6ICgpID0+IHsgcmV0dXJuIGZhbHNlOyB9XG59O1xuXG4vKipcbiAqICB3aXRoIG1ldGhvZHMgdGhhdCByZXR1cm4gZGVmYXVsdCB2YWx1ZXNcbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTUFOQUdFUiA9IHtcbiAgc3BsaXRzOiAoKSA9PiB7IHJldHVybiBbXTsgfSxcbiAgc3BsaXQ6ICgpID0+IHsgcmV0dXJuIG51bGw7IH0sXG4gIG5hbWVzOiAoKSA9PiB7IHJldHVybiBbXTsgfVxufTtcbiJdfQ==