{"ast":null,"code":"import { groupBy, forOwn } from '../../utils/lang';\nimport { submitterFactory } from './submitter';\nimport { SUBMITTERS_PUSH_FULL_QUEUE } from '../../logger/constants';\nvar DATA_NAME = 'impressions';\n/**\n * Converts `impressions` data from cache into request payload.\n */\nexport function fromImpressionsCollector(sendLabels, data) {\n  var groupedByFeature = groupBy(data, 'feature');\n  var dto = [];\n  // using forOwn instead of for...in since the last also iterates over prototype enumerables\n  forOwn(groupedByFeature, function (value, name) {\n    dto.push({\n      f: name,\n      i: value.map(function (entry) {\n        var keyImpression = {\n          k: entry.keyName,\n          t: entry.treatment,\n          m: entry.time,\n          c: entry.changeNumber,\n          r: sendLabels ? entry.label : undefined,\n          b: entry.bucketingKey ? entry.bucketingKey : undefined,\n          pt: entry.pt ? entry.pt : undefined // Previous time\n        };\n\n        return keyImpression;\n      })\n    });\n  });\n  return dto;\n}\n/**\n * Submitter that periodically posts impressions data\n */\nexport function impressionsSubmitterFactory(params) {\n  var _a = params.settings,\n    log = _a.log,\n    impressionsRefreshRate = _a.scheduler.impressionsRefreshRate,\n    labelsEnabled = _a.core.labelsEnabled,\n    postTestImpressionsBulk = params.splitApi.postTestImpressionsBulk,\n    impressions = params.storage.impressions;\n  // retry impressions only once.\n  var syncTask = submitterFactory(log, postTestImpressionsBulk, impressions, impressionsRefreshRate, DATA_NAME, fromImpressionsCollector.bind(undefined, labelsEnabled), 1);\n  // register impressions submitter to be executed when impressions cache is full\n  impressions.setOnFullQueueCb(function () {\n    if (syncTask.isRunning()) {\n      log.info(SUBMITTERS_PUSH_FULL_QUEUE, [DATA_NAME]);\n      syncTask.execute();\n    }\n    // If submitter is stopped (e.g., user consent declined or unknown, or app state offline), we don't send the data.\n    // Data will be sent when submitter is resumed.\n  });\n\n  return syncTask;\n}","map":{"version":3,"names":["groupBy","forOwn","submitterFactory","SUBMITTERS_PUSH_FULL_QUEUE","DATA_NAME","fromImpressionsCollector","sendLabels","data","groupedByFeature","dto","value","name","push","f","i","map","entry","keyImpression","k","keyName","t","treatment","m","time","c","changeNumber","r","label","undefined","b","bucketingKey","pt","impressionsSubmitterFactory","params","_a","settings","log","impressionsRefreshRate","scheduler","labelsEnabled","core","postTestImpressionsBulk","splitApi","impressions","storage","syncTask","bind","setOnFullQueueCb","isRunning","info","execute"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/submitters/impressionsSubmitter.js"],"sourcesContent":["import { groupBy, forOwn } from '../../utils/lang';\nimport { submitterFactory } from './submitter';\nimport { SUBMITTERS_PUSH_FULL_QUEUE } from '../../logger/constants';\nvar DATA_NAME = 'impressions';\n/**\n * Converts `impressions` data from cache into request payload.\n */\nexport function fromImpressionsCollector(sendLabels, data) {\n    var groupedByFeature = groupBy(data, 'feature');\n    var dto = [];\n    // using forOwn instead of for...in since the last also iterates over prototype enumerables\n    forOwn(groupedByFeature, function (value, name) {\n        dto.push({\n            f: name,\n            i: value.map(function (entry) {\n                var keyImpression = {\n                    k: entry.keyName,\n                    t: entry.treatment,\n                    m: entry.time,\n                    c: entry.changeNumber,\n                    r: sendLabels ? entry.label : undefined,\n                    b: entry.bucketingKey ? entry.bucketingKey : undefined,\n                    pt: entry.pt ? entry.pt : undefined // Previous time\n                };\n                return keyImpression;\n            })\n        });\n    });\n    return dto;\n}\n/**\n * Submitter that periodically posts impressions data\n */\nexport function impressionsSubmitterFactory(params) {\n    var _a = params.settings, log = _a.log, impressionsRefreshRate = _a.scheduler.impressionsRefreshRate, labelsEnabled = _a.core.labelsEnabled, postTestImpressionsBulk = params.splitApi.postTestImpressionsBulk, impressions = params.storage.impressions;\n    // retry impressions only once.\n    var syncTask = submitterFactory(log, postTestImpressionsBulk, impressions, impressionsRefreshRate, DATA_NAME, fromImpressionsCollector.bind(undefined, labelsEnabled), 1);\n    // register impressions submitter to be executed when impressions cache is full\n    impressions.setOnFullQueueCb(function () {\n        if (syncTask.isRunning()) {\n            log.info(SUBMITTERS_PUSH_FULL_QUEUE, [DATA_NAME]);\n            syncTask.execute();\n        }\n        // If submitter is stopped (e.g., user consent declined or unknown, or app state offline), we don't send the data.\n        // Data will be sent when submitter is resumed.\n    });\n    return syncTask;\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,kBAAkB;AAClD,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,0BAA0B,QAAQ,wBAAwB;AACnE,IAAIC,SAAS,GAAG,aAAa;AAC7B;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAACC,UAAU,EAAEC,IAAI,EAAE;EACvD,IAAIC,gBAAgB,GAAGR,OAAO,CAACO,IAAI,EAAE,SAAS,CAAC;EAC/C,IAAIE,GAAG,GAAG,EAAE;EACZ;EACAR,MAAM,CAACO,gBAAgB,EAAE,UAAUE,KAAK,EAAEC,IAAI,EAAE;IAC5CF,GAAG,CAACG,IAAI,CAAC;MACLC,CAAC,EAAEF,IAAI;MACPG,CAAC,EAAEJ,KAAK,CAACK,GAAG,CAAC,UAAUC,KAAK,EAAE;QAC1B,IAAIC,aAAa,GAAG;UAChBC,CAAC,EAAEF,KAAK,CAACG,OAAO;UAChBC,CAAC,EAAEJ,KAAK,CAACK,SAAS;UAClBC,CAAC,EAAEN,KAAK,CAACO,IAAI;UACbC,CAAC,EAAER,KAAK,CAACS,YAAY;UACrBC,CAAC,EAAEpB,UAAU,GAAGU,KAAK,CAACW,KAAK,GAAGC,SAAS;UACvCC,CAAC,EAAEb,KAAK,CAACc,YAAY,GAAGd,KAAK,CAACc,YAAY,GAAGF,SAAS;UACtDG,EAAE,EAAEf,KAAK,CAACe,EAAE,GAAGf,KAAK,CAACe,EAAE,GAAGH,SAAS,CAAC;QACxC,CAAC;;QACD,OAAOX,aAAa;MACxB,CAAC;IACL,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAOR,GAAG;AACd;AACA;AACA;AACA;AACA,OAAO,SAASuB,2BAA2B,CAACC,MAAM,EAAE;EAChD,IAAIC,EAAE,GAAGD,MAAM,CAACE,QAAQ;IAAEC,GAAG,GAAGF,EAAE,CAACE,GAAG;IAAEC,sBAAsB,GAAGH,EAAE,CAACI,SAAS,CAACD,sBAAsB;IAAEE,aAAa,GAAGL,EAAE,CAACM,IAAI,CAACD,aAAa;IAAEE,uBAAuB,GAAGR,MAAM,CAACS,QAAQ,CAACD,uBAAuB;IAAEE,WAAW,GAAGV,MAAM,CAACW,OAAO,CAACD,WAAW;EACxP;EACA,IAAIE,QAAQ,GAAG3C,gBAAgB,CAACkC,GAAG,EAAEK,uBAAuB,EAAEE,WAAW,EAAEN,sBAAsB,EAAEjC,SAAS,EAAEC,wBAAwB,CAACyC,IAAI,CAAClB,SAAS,EAAEW,aAAa,CAAC,EAAE,CAAC,CAAC;EACzK;EACAI,WAAW,CAACI,gBAAgB,CAAC,YAAY;IACrC,IAAIF,QAAQ,CAACG,SAAS,EAAE,EAAE;MACtBZ,GAAG,CAACa,IAAI,CAAC9C,0BAA0B,EAAE,CAACC,SAAS,CAAC,CAAC;MACjDyC,QAAQ,CAACK,OAAO,EAAE;IACtB;IACA;IACA;EACJ,CAAC,CAAC;;EACF,OAAOL,QAAQ;AACnB"},"metadata":{},"sourceType":"module"}