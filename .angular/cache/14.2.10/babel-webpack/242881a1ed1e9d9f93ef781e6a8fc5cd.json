{"ast":null,"code":"/* eslint-disable no-undef */\nimport { objectAssign } from '../../utils/lang/objectAssign';\nimport { isString, isFiniteNumber, uniqAsStrings } from '../../utils/lang';\nimport { validateEvent, validateEventValue, validateEventProperties, validateKey, validateTrafficType } from '../../utils/inputValidation';\nvar logPrefix = 'ga-to-split: ';\nvar logNameMapper = 'ga-to-split:mapper';\n/**\n * Provides a plugin to use with analytics.js, accounting for the possibility\n * that the global command queue has been renamed or not yet defined.\n * @param {string} pluginName The plugin name identifier.\n * @param {Function} pluginConstructor The plugin constructor function.\n */\nfunction providePlugin(pluginName, pluginConstructor) {\n  // get reference to global command queue. Init it if not defined yet.\n  // @ts-expect-error\n  var gaAlias = window.GoogleAnalyticsObject || 'ga';\n  window[gaAlias] = window[gaAlias] || function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (window[gaAlias].q = window[gaAlias].q || []).push(args);\n  };\n  // provides the plugin for use with analytics.js.\n  // @ts-expect-error\n  window[gaAlias]('provide', pluginName, pluginConstructor);\n}\n// Default mapping: object used for building the default mapper from hits to Split events\nvar defaultMapping = {\n  eventTypeId: {\n    event: 'eventAction',\n    social: 'socialAction'\n  },\n  eventValue: {\n    event: 'eventValue',\n    timing: 'timingValue'\n  },\n  eventProperties: {\n    pageview: ['page'],\n    screenview: ['screenName'],\n    event: ['eventCategory', 'eventLabel'],\n    social: ['socialNetwork', 'socialTarget'],\n    timing: ['timingCategory', 'timingVar', 'timingLabel'],\n    exception: ['exDescription', 'exFatal']\n  }\n};\n/**\n * Build a mapper function based on a mapping object\n *\n * @param {object} mapping\n */\nfunction mapperBuilder(mapping) {\n  return function (model) {\n    var hitType = model.get('hitType');\n    // @ts-expect-error\n    var eventTypeId = model.get(mapping.eventTypeId[hitType] || 'hitType');\n    // @ts-expect-error\n    var value = model.get(mapping.eventValue[hitType]);\n    var properties = {}; // @ts-expect-error\n    var fields = mapping.eventProperties[hitType];\n    if (fields) {\n      for (var i = 0; i < fields.length; i++) {\n        properties[fields[i]] = model.get(fields[i]);\n      }\n    }\n    return {\n      eventTypeId: eventTypeId,\n      value: value,\n      properties: properties,\n      timestamp: Date.now()\n    };\n  };\n}\n// exposed for unit testing purposses.\nexport var defaultMapper = mapperBuilder(defaultMapping);\nexport var defaultPrefix = 'ga';\n/**\n * Return a new list of identities removing invalid and duplicated ones.\n *\n * @param {Array} identities list of identities\n * @returns list of valid and unique identities. The list might be empty if `identities` is not an array or all its elements are invalid.\n */\nexport function validateIdentities(identities) {\n  if (!Array.isArray(identities)) return [];\n  // Remove duplicated identities\n  var uniqueIdentities = uniqAsStrings(identities);\n  // Filter based on rum-agent identities validator\n  return uniqueIdentities.filter(function (identity) {\n    if (!identity) return false;\n    var maybeKey = identity.key;\n    var maybeTT = identity.trafficType;\n    if (!isString(maybeKey) && !isFiniteNumber(maybeKey)) return false;\n    if (!isString(maybeTT)) return false;\n    return true;\n  });\n}\n/**\n * Checks if EventData fields (except EventTypeId) are valid, and logs corresponding warnings.\n * EventTypeId is validated separately.\n *\n * @param {EventData} data event data instance to validate. Precondition: data != undefined\n * @returns {boolean} Whether the data instance is a valid EventData or not.\n */\nexport function validateEventData(log, eventData) {\n  if (!validateEvent(log, eventData.eventTypeId, logNameMapper)) return false;\n  if (validateEventValue(log, eventData.value, logNameMapper) === false) return false;\n  var properties = validateEventProperties(log, eventData.properties, logNameMapper).properties;\n  if (properties === false) return false;\n  if (eventData.timestamp && !isFiniteNumber(eventData.timestamp)) return false;\n  if (eventData.key && validateKey(log, eventData.key, logNameMapper) === false) return false;\n  if (eventData.trafficTypeName && validateTrafficType(log, eventData.trafficTypeName, logNameMapper) === false) return false;\n  return true;\n}\nvar INVALID_PREFIX_REGEX = /^[^a-zA-Z0-9]+/;\nvar INVALID_SUBSTRING_REGEX = /[^-_.:a-zA-Z0-9]+/g;\n/**\n * Fixes the passed string value to comply with EventTypeId format, by removing invalid characters and truncating if necessary.\n *\n * @param {object} log factory logger\n * @param {string} eventTypeId string value to fix.\n * @returns {string} Fixed version of `eventTypeId`.\n */\nexport function fixEventTypeId(log, eventTypeId) {\n  // return the input eventTypeId if it cannot be fixed\n  if (!isString(eventTypeId) || eventTypeId.length === 0) {\n    return eventTypeId;\n  }\n  // replace invalid substrings and truncate\n  var fixed = eventTypeId.replace(INVALID_PREFIX_REGEX, '').replace(INVALID_SUBSTRING_REGEX, '_');\n  var truncated = fixed.slice(0, 80);\n  if (truncated.length < fixed.length) log.warn(logPrefix + 'EventTypeId was truncated because it cannot be more than 80 characters long.');\n  return truncated;\n}\n/**\n * GaToSplit integration.\n * This function provides the SplitTracker plugin to ga command queue.\n *\n * @param {object} sdkOptions options passed at the SDK integrations settings (isomorphic SDK) or the GoogleAnalyticsToSplit plugin (pluggable browser SDK)\n * @param {object} storage SDK storage passed to track events\n * @param {object} coreSettings core settings used to define an identity if no one provided as SDK or plugin options\n * @param {object} log factory logger\n */\nexport function GaToSplit(sdkOptions, params) {\n  var storage = params.storage,\n    _a = params.settings,\n    coreSettings = _a.core,\n    log = _a.log;\n  var defaultOptions = {\n    prefix: defaultPrefix,\n    // We set default identities if key and TT are present in settings.core\n    identities: coreSettings.key && coreSettings.trafficType ? [{\n      key: coreSettings.key,\n      trafficType: coreSettings.trafficType\n    }] : undefined\n  };\n  var SplitTracker = /** @class */function () {\n    // Constructor for the SplitTracker plugin.\n    function SplitTracker(tracker, pluginOptions) {\n      // precedence of options: SDK options (config.integrations) overwrite pluginOptions (`ga('require', 'splitTracker', pluginOptions)`)\n      var opts = objectAssign({}, defaultOptions, sdkOptions, pluginOptions);\n      this.tracker = tracker;\n      // Validate identities\n      var validIdentities = validateIdentities(opts.identities);\n      if (validIdentities.length === 0) {\n        log.warn(logPrefix + 'No valid identities were provided. Please check that you are passing a valid list of identities or providing a traffic type at the SDK configuration.');\n        return;\n      }\n      var invalids = validIdentities.length - opts.identities.length;\n      if (invalids) {\n        log.warn(logPrefix + (invalids + \" identities were discarded because they are invalid or duplicated. Identities must be an array of objects with key and trafficType.\"));\n      }\n      opts.identities = validIdentities;\n      // Validate prefix\n      if (!isString(opts.prefix)) {\n        log.warn(logPrefix + 'The provided `prefix` was ignored since it is invalid. Please check that you are passing a string object as `prefix`.');\n        opts.prefix = undefined;\n      }\n      // Overwrite sendHitTask to perform plugin tasks:\n      // 1) filter hits\n      // 2) map hits to Split events\n      // 3) handle events, i.e., validate and send them to Split BE\n      var originalSendHitTask = tracker.get('sendHitTask');\n      tracker.set('sendHitTask', function (model) {\n        originalSendHitTask(model);\n        // filter hit if `hits` flag is false or if it comes from Split-to-GA integration\n        if (opts.hits === false || model.get('splitHit')) return;\n        try {\n          if (opts.filter && !opts.filter(model)) return;\n        } catch (err) {\n          log.warn(logPrefix + (\"custom filter threw: \" + err));\n          return;\n        }\n        // map hit into an EventData instance\n        var eventData = defaultMapper(model);\n        if (opts.mapper) {\n          try {\n            eventData = opts.mapper(model, eventData);\n          } catch (err) {\n            log.warn(logPrefix + (\"custom mapper threw: \" + err));\n            return;\n          }\n          if (!eventData) return;\n        }\n        // Add prefix. Nothing is appended if the prefix is falsy, e.g. undefined or ''.\n        if (opts.prefix) eventData.eventTypeId = opts.prefix + \".\" + eventData.eventTypeId;\n        eventData.eventTypeId = fixEventTypeId(log, eventData.eventTypeId);\n        if (!validateEventData(log, eventData)) return;\n        // Store the event\n        if (eventData.key && eventData.trafficTypeName) {\n          storage.events.track(eventData);\n        } else {\n          // Store the event for each Key-TT pair (identities), if key and TT is not present in eventData\n          opts.identities.forEach(function (identity) {\n            var event = objectAssign({\n              key: identity.key,\n              trafficTypeName: identity.trafficType\n            }, eventData);\n            storage.events.track(event);\n          });\n        }\n      });\n      log.info(logPrefix + 'integration started');\n    }\n    return SplitTracker;\n  }();\n  // Register the plugin, even if config is invalid, since, if not provided, it will block `ga` command queue.\n  providePlugin('splitTracker', SplitTracker);\n}","map":{"version":3,"names":["objectAssign","isString","isFiniteNumber","uniqAsStrings","validateEvent","validateEventValue","validateEventProperties","validateKey","validateTrafficType","logPrefix","logNameMapper","providePlugin","pluginName","pluginConstructor","gaAlias","window","GoogleAnalyticsObject","args","_i","arguments","length","q","push","defaultMapping","eventTypeId","event","social","eventValue","timing","eventProperties","pageview","screenview","exception","mapperBuilder","mapping","model","hitType","get","value","properties","fields","i","timestamp","Date","now","defaultMapper","defaultPrefix","validateIdentities","identities","Array","isArray","uniqueIdentities","filter","identity","maybeKey","key","maybeTT","trafficType","validateEventData","log","eventData","trafficTypeName","INVALID_PREFIX_REGEX","INVALID_SUBSTRING_REGEX","fixEventTypeId","fixed","replace","truncated","slice","warn","GaToSplit","sdkOptions","params","storage","_a","settings","coreSettings","core","defaultOptions","prefix","undefined","SplitTracker","tracker","pluginOptions","opts","validIdentities","invalids","originalSendHitTask","set","hits","err","mapper","events","track","forEach","info"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/integrations/ga/GaToSplit.js"],"sourcesContent":["/* eslint-disable no-undef */\nimport { objectAssign } from '../../utils/lang/objectAssign';\nimport { isString, isFiniteNumber, uniqAsStrings } from '../../utils/lang';\nimport { validateEvent, validateEventValue, validateEventProperties, validateKey, validateTrafficType, } from '../../utils/inputValidation';\nvar logPrefix = 'ga-to-split: ';\nvar logNameMapper = 'ga-to-split:mapper';\n/**\n * Provides a plugin to use with analytics.js, accounting for the possibility\n * that the global command queue has been renamed or not yet defined.\n * @param {string} pluginName The plugin name identifier.\n * @param {Function} pluginConstructor The plugin constructor function.\n */\nfunction providePlugin(pluginName, pluginConstructor) {\n    // get reference to global command queue. Init it if not defined yet.\n    // @ts-expect-error\n    var gaAlias = window.GoogleAnalyticsObject || 'ga';\n    window[gaAlias] = window[gaAlias] || function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (window[gaAlias].q = window[gaAlias].q || []).push(args);\n    };\n    // provides the plugin for use with analytics.js.\n    // @ts-expect-error\n    window[gaAlias]('provide', pluginName, pluginConstructor);\n}\n// Default mapping: object used for building the default mapper from hits to Split events\nvar defaultMapping = {\n    eventTypeId: {\n        event: 'eventAction',\n        social: 'socialAction',\n    },\n    eventValue: {\n        event: 'eventValue',\n        timing: 'timingValue',\n    },\n    eventProperties: {\n        pageview: ['page'],\n        screenview: ['screenName'],\n        event: ['eventCategory', 'eventLabel'],\n        social: ['socialNetwork', 'socialTarget'],\n        timing: ['timingCategory', 'timingVar', 'timingLabel'],\n        exception: ['exDescription', 'exFatal'],\n    }\n};\n/**\n * Build a mapper function based on a mapping object\n *\n * @param {object} mapping\n */\nfunction mapperBuilder(mapping) {\n    return function (model) {\n        var hitType = model.get('hitType');\n        // @ts-expect-error\n        var eventTypeId = model.get(mapping.eventTypeId[hitType] || 'hitType');\n        // @ts-expect-error\n        var value = model.get(mapping.eventValue[hitType]);\n        var properties = {}; // @ts-expect-error\n        var fields = mapping.eventProperties[hitType];\n        if (fields) {\n            for (var i = 0; i < fields.length; i++) {\n                properties[fields[i]] = model.get(fields[i]);\n            }\n        }\n        return {\n            eventTypeId: eventTypeId,\n            value: value,\n            properties: properties,\n            timestamp: Date.now(),\n        };\n    };\n}\n// exposed for unit testing purposses.\nexport var defaultMapper = mapperBuilder(defaultMapping);\nexport var defaultPrefix = 'ga';\n/**\n * Return a new list of identities removing invalid and duplicated ones.\n *\n * @param {Array} identities list of identities\n * @returns list of valid and unique identities. The list might be empty if `identities` is not an array or all its elements are invalid.\n */\nexport function validateIdentities(identities) {\n    if (!Array.isArray(identities))\n        return [];\n    // Remove duplicated identities\n    var uniqueIdentities = uniqAsStrings(identities);\n    // Filter based on rum-agent identities validator\n    return uniqueIdentities.filter(function (identity) {\n        if (!identity)\n            return false;\n        var maybeKey = identity.key;\n        var maybeTT = identity.trafficType;\n        if (!isString(maybeKey) && !isFiniteNumber(maybeKey))\n            return false;\n        if (!isString(maybeTT))\n            return false;\n        return true;\n    });\n}\n/**\n * Checks if EventData fields (except EventTypeId) are valid, and logs corresponding warnings.\n * EventTypeId is validated separately.\n *\n * @param {EventData} data event data instance to validate. Precondition: data != undefined\n * @returns {boolean} Whether the data instance is a valid EventData or not.\n */\nexport function validateEventData(log, eventData) {\n    if (!validateEvent(log, eventData.eventTypeId, logNameMapper))\n        return false;\n    if (validateEventValue(log, eventData.value, logNameMapper) === false)\n        return false;\n    var properties = validateEventProperties(log, eventData.properties, logNameMapper).properties;\n    if (properties === false)\n        return false;\n    if (eventData.timestamp && !isFiniteNumber(eventData.timestamp))\n        return false;\n    if (eventData.key && validateKey(log, eventData.key, logNameMapper) === false)\n        return false;\n    if (eventData.trafficTypeName && validateTrafficType(log, eventData.trafficTypeName, logNameMapper) === false)\n        return false;\n    return true;\n}\nvar INVALID_PREFIX_REGEX = /^[^a-zA-Z0-9]+/;\nvar INVALID_SUBSTRING_REGEX = /[^-_.:a-zA-Z0-9]+/g;\n/**\n * Fixes the passed string value to comply with EventTypeId format, by removing invalid characters and truncating if necessary.\n *\n * @param {object} log factory logger\n * @param {string} eventTypeId string value to fix.\n * @returns {string} Fixed version of `eventTypeId`.\n */\nexport function fixEventTypeId(log, eventTypeId) {\n    // return the input eventTypeId if it cannot be fixed\n    if (!isString(eventTypeId) || eventTypeId.length === 0) {\n        return eventTypeId;\n    }\n    // replace invalid substrings and truncate\n    var fixed = eventTypeId\n        .replace(INVALID_PREFIX_REGEX, '')\n        .replace(INVALID_SUBSTRING_REGEX, '_');\n    var truncated = fixed.slice(0, 80);\n    if (truncated.length < fixed.length)\n        log.warn(logPrefix + 'EventTypeId was truncated because it cannot be more than 80 characters long.');\n    return truncated;\n}\n/**\n * GaToSplit integration.\n * This function provides the SplitTracker plugin to ga command queue.\n *\n * @param {object} sdkOptions options passed at the SDK integrations settings (isomorphic SDK) or the GoogleAnalyticsToSplit plugin (pluggable browser SDK)\n * @param {object} storage SDK storage passed to track events\n * @param {object} coreSettings core settings used to define an identity if no one provided as SDK or plugin options\n * @param {object} log factory logger\n */\nexport function GaToSplit(sdkOptions, params) {\n    var storage = params.storage, _a = params.settings, coreSettings = _a.core, log = _a.log;\n    var defaultOptions = {\n        prefix: defaultPrefix,\n        // We set default identities if key and TT are present in settings.core\n        identities: (coreSettings.key && coreSettings.trafficType) ?\n            [{ key: coreSettings.key, trafficType: coreSettings.trafficType }] :\n            undefined\n    };\n    var SplitTracker = /** @class */ (function () {\n        // Constructor for the SplitTracker plugin.\n        function SplitTracker(tracker, pluginOptions) {\n            // precedence of options: SDK options (config.integrations) overwrite pluginOptions (`ga('require', 'splitTracker', pluginOptions)`)\n            var opts = objectAssign({}, defaultOptions, sdkOptions, pluginOptions);\n            this.tracker = tracker;\n            // Validate identities\n            var validIdentities = validateIdentities(opts.identities);\n            if (validIdentities.length === 0) {\n                log.warn(logPrefix + 'No valid identities were provided. Please check that you are passing a valid list of identities or providing a traffic type at the SDK configuration.');\n                return;\n            }\n            var invalids = validIdentities.length - opts.identities.length;\n            if (invalids) {\n                log.warn(logPrefix + (invalids + \" identities were discarded because they are invalid or duplicated. Identities must be an array of objects with key and trafficType.\"));\n            }\n            opts.identities = validIdentities;\n            // Validate prefix\n            if (!isString(opts.prefix)) {\n                log.warn(logPrefix + 'The provided `prefix` was ignored since it is invalid. Please check that you are passing a string object as `prefix`.');\n                opts.prefix = undefined;\n            }\n            // Overwrite sendHitTask to perform plugin tasks:\n            // 1) filter hits\n            // 2) map hits to Split events\n            // 3) handle events, i.e., validate and send them to Split BE\n            var originalSendHitTask = tracker.get('sendHitTask');\n            tracker.set('sendHitTask', function (model) {\n                originalSendHitTask(model);\n                // filter hit if `hits` flag is false or if it comes from Split-to-GA integration\n                if (opts.hits === false || model.get('splitHit'))\n                    return;\n                try {\n                    if (opts.filter && !opts.filter(model))\n                        return;\n                }\n                catch (err) {\n                    log.warn(logPrefix + (\"custom filter threw: \" + err));\n                    return;\n                }\n                // map hit into an EventData instance\n                var eventData = defaultMapper(model);\n                if (opts.mapper) {\n                    try {\n                        eventData = opts.mapper(model, eventData);\n                    }\n                    catch (err) {\n                        log.warn(logPrefix + (\"custom mapper threw: \" + err));\n                        return;\n                    }\n                    if (!eventData)\n                        return;\n                }\n                // Add prefix. Nothing is appended if the prefix is falsy, e.g. undefined or ''.\n                if (opts.prefix)\n                    eventData.eventTypeId = opts.prefix + \".\" + eventData.eventTypeId;\n                eventData.eventTypeId = fixEventTypeId(log, eventData.eventTypeId);\n                if (!validateEventData(log, eventData))\n                    return;\n                // Store the event\n                if (eventData.key && eventData.trafficTypeName) {\n                    storage.events.track(eventData);\n                }\n                else { // Store the event for each Key-TT pair (identities), if key and TT is not present in eventData\n                    opts.identities.forEach(function (identity) {\n                        var event = objectAssign({\n                            key: identity.key,\n                            trafficTypeName: identity.trafficType,\n                        }, eventData);\n                        storage.events.track(event);\n                    });\n                }\n            });\n            log.info(logPrefix + 'integration started');\n        }\n        return SplitTracker;\n    }());\n    // Register the plugin, even if config is invalid, since, if not provided, it will block `ga` command queue.\n    providePlugin('splitTracker', SplitTracker);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}