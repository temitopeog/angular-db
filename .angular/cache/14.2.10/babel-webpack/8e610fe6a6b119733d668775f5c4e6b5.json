{"ast":null,"code":"import { InMemoryStorageCSFactory } from '../../../storages/inMemory/InMemoryStorageCS';\nimport { ERROR_STORAGE_INVALID } from '../../../logger/constants';\nimport { LOCALHOST_MODE, STANDALONE_MODE, STORAGE_PLUGGABLE, STORAGE_LOCALSTORAGE, STORAGE_MEMORY } from '../../../utils/constants';\nexport function __InLocalStorageMockFactory(params) {\n  var result = InMemoryStorageCSFactory(params);\n  result.splits.checkCache = function () {\n    return true;\n  }; // to emit SDK_READY_FROM_CACHE\n  return result;\n}\n__InLocalStorageMockFactory.type = STORAGE_MEMORY;\n/**\n * This function validates `settings.storage` object\n *\n * @param {any} settings config object provided by the user to initialize the sdk\n *\n * @returns {Object} valid storage factory. Default to `InMemoryStorageCSFactory` if the provided storage is invalid or not compatible with the sdk mode if mode is standalone or localhost\n *\n * @throws error if mode is consumer and the provided storage is not compatible\n */\nexport function validateStorageCS(settings) {\n  var _a = settings.storage,\n    storage = _a === void 0 ? InMemoryStorageCSFactory : _a,\n    log = settings.log,\n    mode = settings.mode;\n  // If an invalid storage is provided, fallback into MEMORY\n  if (typeof storage !== 'function' || [STORAGE_MEMORY, STORAGE_LOCALSTORAGE, STORAGE_PLUGGABLE].indexOf(storage.type) === -1) {\n    storage = InMemoryStorageCSFactory;\n    log.error(ERROR_STORAGE_INVALID);\n  }\n  // In localhost mode with InLocalStorage, fallback to a mock InLocalStorage to emit SDK_READY_FROM_CACHE\n  if (mode === LOCALHOST_MODE && storage.type === STORAGE_LOCALSTORAGE) {\n    return __InLocalStorageMockFactory;\n  }\n  if ([LOCALHOST_MODE, STANDALONE_MODE].indexOf(mode) === -1) {\n    // Consumer modes require an async storage\n    if (storage.type !== STORAGE_PLUGGABLE) throw new Error('A PluggableStorage instance is required on consumer mode');\n  } else {\n    // Standalone and localhost modes require a sync storage\n    if (storage.type === STORAGE_PLUGGABLE) {\n      storage = InMemoryStorageCSFactory;\n      log.error(ERROR_STORAGE_INVALID, [' It requires consumer mode.']);\n    }\n  }\n  // return default InMemory storage if provided one is not valid\n  return storage;\n}","map":{"version":3,"names":["InMemoryStorageCSFactory","ERROR_STORAGE_INVALID","LOCALHOST_MODE","STANDALONE_MODE","STORAGE_PLUGGABLE","STORAGE_LOCALSTORAGE","STORAGE_MEMORY","__InLocalStorageMockFactory","params","result","splits","checkCache","type","validateStorageCS","settings","_a","storage","log","mode","indexOf","error","Error"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/settingsValidation/storage/storageCS.js"],"sourcesContent":["import { InMemoryStorageCSFactory } from '../../../storages/inMemory/InMemoryStorageCS';\nimport { ERROR_STORAGE_INVALID } from '../../../logger/constants';\nimport { LOCALHOST_MODE, STANDALONE_MODE, STORAGE_PLUGGABLE, STORAGE_LOCALSTORAGE, STORAGE_MEMORY } from '../../../utils/constants';\nexport function __InLocalStorageMockFactory(params) {\n    var result = InMemoryStorageCSFactory(params);\n    result.splits.checkCache = function () { return true; }; // to emit SDK_READY_FROM_CACHE\n    return result;\n}\n__InLocalStorageMockFactory.type = STORAGE_MEMORY;\n/**\n * This function validates `settings.storage` object\n *\n * @param {any} settings config object provided by the user to initialize the sdk\n *\n * @returns {Object} valid storage factory. Default to `InMemoryStorageCSFactory` if the provided storage is invalid or not compatible with the sdk mode if mode is standalone or localhost\n *\n * @throws error if mode is consumer and the provided storage is not compatible\n */\nexport function validateStorageCS(settings) {\n    var _a = settings.storage, storage = _a === void 0 ? InMemoryStorageCSFactory : _a, log = settings.log, mode = settings.mode;\n    // If an invalid storage is provided, fallback into MEMORY\n    if (typeof storage !== 'function' || [STORAGE_MEMORY, STORAGE_LOCALSTORAGE, STORAGE_PLUGGABLE].indexOf(storage.type) === -1) {\n        storage = InMemoryStorageCSFactory;\n        log.error(ERROR_STORAGE_INVALID);\n    }\n    // In localhost mode with InLocalStorage, fallback to a mock InLocalStorage to emit SDK_READY_FROM_CACHE\n    if (mode === LOCALHOST_MODE && storage.type === STORAGE_LOCALSTORAGE) {\n        return __InLocalStorageMockFactory;\n    }\n    if ([LOCALHOST_MODE, STANDALONE_MODE].indexOf(mode) === -1) {\n        // Consumer modes require an async storage\n        if (storage.type !== STORAGE_PLUGGABLE)\n            throw new Error('A PluggableStorage instance is required on consumer mode');\n    }\n    else {\n        // Standalone and localhost modes require a sync storage\n        if (storage.type === STORAGE_PLUGGABLE) {\n            storage = InMemoryStorageCSFactory;\n            log.error(ERROR_STORAGE_INVALID, [' It requires consumer mode.']);\n        }\n    }\n    // return default InMemory storage if provided one is not valid\n    return storage;\n}\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,8CAA8C;AACvF,SAASC,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,cAAc,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,0BAA0B;AACnI,OAAO,SAASC,2BAA2B,CAACC,MAAM,EAAE;EAChD,IAAIC,MAAM,GAAGT,wBAAwB,CAACQ,MAAM,CAAC;EAC7CC,MAAM,CAACC,MAAM,CAACC,UAAU,GAAG,YAAY;IAAE,OAAO,IAAI;EAAE,CAAC,CAAC,CAAC;EACzD,OAAOF,MAAM;AACjB;AACAF,2BAA2B,CAACK,IAAI,GAAGN,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,iBAAiB,CAACC,QAAQ,EAAE;EACxC,IAAIC,EAAE,GAAGD,QAAQ,CAACE,OAAO;IAAEA,OAAO,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGf,wBAAwB,GAAGe,EAAE;IAAEE,GAAG,GAAGH,QAAQ,CAACG,GAAG;IAAEC,IAAI,GAAGJ,QAAQ,CAACI,IAAI;EAC5H;EACA,IAAI,OAAOF,OAAO,KAAK,UAAU,IAAI,CAACV,cAAc,EAAED,oBAAoB,EAAED,iBAAiB,CAAC,CAACe,OAAO,CAACH,OAAO,CAACJ,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IACzHI,OAAO,GAAGhB,wBAAwB;IAClCiB,GAAG,CAACG,KAAK,CAACnB,qBAAqB,CAAC;EACpC;EACA;EACA,IAAIiB,IAAI,KAAKhB,cAAc,IAAIc,OAAO,CAACJ,IAAI,KAAKP,oBAAoB,EAAE;IAClE,OAAOE,2BAA2B;EACtC;EACA,IAAI,CAACL,cAAc,EAAEC,eAAe,CAAC,CAACgB,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IACxD;IACA,IAAIF,OAAO,CAACJ,IAAI,KAAKR,iBAAiB,EAClC,MAAM,IAAIiB,KAAK,CAAC,0DAA0D,CAAC;EACnF,CAAC,MACI;IACD;IACA,IAAIL,OAAO,CAACJ,IAAI,KAAKR,iBAAiB,EAAE;MACpCY,OAAO,GAAGhB,wBAAwB;MAClCiB,GAAG,CAACG,KAAK,CAACnB,qBAAqB,EAAE,CAAC,6BAA6B,CAAC,CAAC;IACrE;EACJ;EACA;EACA,OAAOe,OAAO;AAClB"},"metadata":{},"sourceType":"module"}