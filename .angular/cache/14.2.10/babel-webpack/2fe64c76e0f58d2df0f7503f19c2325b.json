{"ast":null,"code":"import { truncateTimeFrame } from '../../utils/time';\nvar ImpressionCountsCacheInMemory = /** @class */function () {\n  function ImpressionCountsCacheInMemory() {\n    this.cache = {};\n  }\n  /**\n  * Builds key to be stored in the cache with the featureName and the timeFrame truncated.\n  */\n  ImpressionCountsCacheInMemory.prototype._makeKey = function (featureName, timeFrame) {\n    return featureName + \"::\" + truncateTimeFrame(timeFrame);\n  };\n  /**\n  * Increments the quantity of impressions with the passed featureName and timeFrame.\n  */\n  ImpressionCountsCacheInMemory.prototype.track = function (featureName, timeFrame, amount) {\n    var key = this._makeKey(featureName, timeFrame);\n    var currentAmount = this.cache[key];\n    this.cache[key] = currentAmount ? currentAmount + amount : amount;\n  };\n  /**\n   * Pop the collected data, used as payload for posting.\n   */\n  ImpressionCountsCacheInMemory.prototype.pop = function (toMerge) {\n    var data = this.cache;\n    this.clear();\n    if (toMerge) {\n      Object.keys(data).forEach(function (key) {\n        if (toMerge[key]) toMerge[key] += data[key];else toMerge[key] = data[key];\n      });\n      return toMerge;\n    }\n    return data;\n  };\n  /**\n   * Clear the data stored on the cache.\n   */\n  ImpressionCountsCacheInMemory.prototype.clear = function () {\n    this.cache = {};\n  };\n  /**\n   * Check if the cache is empty.\n   */\n  ImpressionCountsCacheInMemory.prototype.isEmpty = function () {\n    return Object.keys(this.cache).length === 0;\n  };\n  return ImpressionCountsCacheInMemory;\n}();\nexport { ImpressionCountsCacheInMemory };","map":{"version":3,"names":["truncateTimeFrame","ImpressionCountsCacheInMemory","cache","prototype","_makeKey","featureName","timeFrame","track","amount","key","currentAmount","pop","toMerge","data","clear","Object","keys","forEach","isEmpty","length"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inMemory/ImpressionCountsCacheInMemory.js"],"sourcesContent":["import { truncateTimeFrame } from '../../utils/time';\nvar ImpressionCountsCacheInMemory = /** @class */ (function () {\n    function ImpressionCountsCacheInMemory() {\n        this.cache = {};\n    }\n    /**\n    * Builds key to be stored in the cache with the featureName and the timeFrame truncated.\n    */\n    ImpressionCountsCacheInMemory.prototype._makeKey = function (featureName, timeFrame) {\n        return featureName + \"::\" + truncateTimeFrame(timeFrame);\n    };\n    /**\n    * Increments the quantity of impressions with the passed featureName and timeFrame.\n    */\n    ImpressionCountsCacheInMemory.prototype.track = function (featureName, timeFrame, amount) {\n        var key = this._makeKey(featureName, timeFrame);\n        var currentAmount = this.cache[key];\n        this.cache[key] = currentAmount ? currentAmount + amount : amount;\n    };\n    /**\n     * Pop the collected data, used as payload for posting.\n     */\n    ImpressionCountsCacheInMemory.prototype.pop = function (toMerge) {\n        var data = this.cache;\n        this.clear();\n        if (toMerge) {\n            Object.keys(data).forEach(function (key) {\n                if (toMerge[key])\n                    toMerge[key] += data[key];\n                else\n                    toMerge[key] = data[key];\n            });\n            return toMerge;\n        }\n        return data;\n    };\n    /**\n     * Clear the data stored on the cache.\n     */\n    ImpressionCountsCacheInMemory.prototype.clear = function () {\n        this.cache = {};\n    };\n    /**\n     * Check if the cache is empty.\n     */\n    ImpressionCountsCacheInMemory.prototype.isEmpty = function () {\n        return Object.keys(this.cache).length === 0;\n    };\n    return ImpressionCountsCacheInMemory;\n}());\nexport { ImpressionCountsCacheInMemory };\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,kBAAkB;AACpD,IAAIC,6BAA6B,GAAG,aAAe,YAAY;EAC3D,SAASA,6BAA6B,GAAG;IACrC,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EACnB;EACA;AACJ;AACA;EACID,6BAA6B,CAACE,SAAS,CAACC,QAAQ,GAAG,UAAUC,WAAW,EAAEC,SAAS,EAAE;IACjF,OAAOD,WAAW,GAAG,IAAI,GAAGL,iBAAiB,CAACM,SAAS,CAAC;EAC5D,CAAC;EACD;AACJ;AACA;EACIL,6BAA6B,CAACE,SAAS,CAACI,KAAK,GAAG,UAAUF,WAAW,EAAEC,SAAS,EAAEE,MAAM,EAAE;IACtF,IAAIC,GAAG,GAAG,IAAI,CAACL,QAAQ,CAACC,WAAW,EAAEC,SAAS,CAAC;IAC/C,IAAII,aAAa,GAAG,IAAI,CAACR,KAAK,CAACO,GAAG,CAAC;IACnC,IAAI,CAACP,KAAK,CAACO,GAAG,CAAC,GAAGC,aAAa,GAAGA,aAAa,GAAGF,MAAM,GAAGA,MAAM;EACrE,CAAC;EACD;AACJ;AACA;EACIP,6BAA6B,CAACE,SAAS,CAACQ,GAAG,GAAG,UAAUC,OAAO,EAAE;IAC7D,IAAIC,IAAI,GAAG,IAAI,CAACX,KAAK;IACrB,IAAI,CAACY,KAAK,EAAE;IACZ,IAAIF,OAAO,EAAE;MACTG,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,OAAO,CAAC,UAAUR,GAAG,EAAE;QACrC,IAAIG,OAAO,CAACH,GAAG,CAAC,EACZG,OAAO,CAACH,GAAG,CAAC,IAAII,IAAI,CAACJ,GAAG,CAAC,CAAC,KAE1BG,OAAO,CAACH,GAAG,CAAC,GAAGI,IAAI,CAACJ,GAAG,CAAC;MAChC,CAAC,CAAC;MACF,OAAOG,OAAO;IAClB;IACA,OAAOC,IAAI;EACf,CAAC;EACD;AACJ;AACA;EACIZ,6BAA6B,CAACE,SAAS,CAACW,KAAK,GAAG,YAAY;IACxD,IAAI,CAACZ,KAAK,GAAG,CAAC,CAAC;EACnB,CAAC;EACD;AACJ;AACA;EACID,6BAA6B,CAACE,SAAS,CAACe,OAAO,GAAG,YAAY;IAC1D,OAAOH,MAAM,CAACC,IAAI,CAAC,IAAI,CAACd,KAAK,CAAC,CAACiB,MAAM,KAAK,CAAC;EAC/C,CAAC;EACD,OAAOlB,6BAA6B;AACxC,CAAC,EAAG;AACJ,SAASA,6BAA6B"},"metadata":{},"sourceType":"module"}