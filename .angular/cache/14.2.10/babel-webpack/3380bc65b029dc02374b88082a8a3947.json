{"ast":null,"code":"import { clientCSDecorator } from './clientCS';\nimport { validateKey } from '../utils/inputValidation/key';\nimport { getMatching, keyParser } from '../utils/key';\nimport { sdkClientFactory } from './sdkClient';\nimport { objectAssign } from '../utils/lang/objectAssign';\nimport { RETRIEVE_CLIENT_DEFAULT, NEW_SHARED_CLIENT, RETRIEVE_CLIENT_EXISTING } from '../logger/constants';\nimport { SDK_SEGMENTS_ARRIVED } from '../readiness/constants';\nfunction buildInstanceId(key) {\n  // @ts-ignore\n  return (key.matchingKey ? key.matchingKey : key) + \"-\" + (key.bucketingKey ? key.bucketingKey : key) + \"-\";\n}\nvar method = 'Client instantiation';\n/**\n * Factory of client method for the client-side API variant where TT is ignored and thus\n * clients don't have a binded TT for the track method.\n */\nexport function sdkClientMethodCSFactory(params) {\n  var storage = params.storage,\n    syncManager = params.syncManager,\n    sdkReadinessManager = params.sdkReadinessManager,\n    _a = params.settings,\n    key = _a.core.key,\n    readyTimeout = _a.startup.readyTimeout,\n    log = _a.log;\n  var mainClientInstance = clientCSDecorator(log, sdkClientFactory(params), key);\n  var parsedDefaultKey = keyParser(key);\n  var defaultInstanceId = buildInstanceId(parsedDefaultKey);\n  // Cache instances created per factory.\n  var clientInstances = {};\n  clientInstances[defaultInstanceId] = mainClientInstance;\n  return function client(key) {\n    if (key === undefined) {\n      log.debug(RETRIEVE_CLIENT_DEFAULT);\n      return mainClientInstance;\n    }\n    // Validate the key value. The trafficType (2nd argument) is ignored\n    var validKey = validateKey(log, key, method);\n    if (validKey === false) {\n      throw new Error('Shared Client needs a valid key.');\n    }\n    var instanceId = buildInstanceId(validKey);\n    if (!clientInstances[instanceId]) {\n      var matchingKey = getMatching(validKey);\n      var sharedSdkReadiness_1 = sdkReadinessManager.shared(readyTimeout);\n      var sharedStorage = storage.shared && storage.shared(matchingKey, function (err) {\n        if (err) return;\n        // Emit SDK_READY in consumer mode for shared clients\n        sharedSdkReadiness_1.readinessManager.segments.emit(SDK_SEGMENTS_ARRIVED);\n      });\n      // 3 possibilities:\n      // - Standalone mode: both syncManager and sharedSyncManager are defined\n      // - Consumer mode: both syncManager and sharedSyncManager are undefined\n      // - Consumer partial mode: syncManager is defined (only for submitters) but sharedSyncManager is undefined\n      // @ts-ignore\n      var sharedSyncManager = syncManager && sharedStorage && syncManager.shared(matchingKey, sharedSdkReadiness_1.readinessManager, sharedStorage);\n      // As shared clients reuse all the storage information, we don't need to check here if we\n      // will use offline or online mode. We should stick with the original decision.\n      clientInstances[instanceId] = clientCSDecorator(log, sdkClientFactory(objectAssign({}, params, {\n        sdkReadinessManager: sharedSdkReadiness_1,\n        storage: sharedStorage || storage,\n        syncManager: sharedSyncManager,\n        signalListener: undefined // only the main client \"destroy\" method stops the signal listener\n      }), true), validKey);\n      sharedSyncManager && sharedSyncManager.start();\n      log.info(NEW_SHARED_CLIENT);\n    } else {\n      log.debug(RETRIEVE_CLIENT_EXISTING);\n    }\n    return clientInstances[instanceId];\n  };\n}","map":{"version":3,"names":["clientCSDecorator","validateKey","getMatching","keyParser","sdkClientFactory","objectAssign","RETRIEVE_CLIENT_DEFAULT","NEW_SHARED_CLIENT","RETRIEVE_CLIENT_EXISTING","SDK_SEGMENTS_ARRIVED","buildInstanceId","key","matchingKey","bucketingKey","method","sdkClientMethodCSFactory","params","storage","syncManager","sdkReadinessManager","_a","settings","core","readyTimeout","startup","log","mainClientInstance","parsedDefaultKey","defaultInstanceId","clientInstances","client","undefined","debug","validKey","Error","instanceId","sharedSdkReadiness_1","shared","sharedStorage","err","readinessManager","segments","emit","sharedSyncManager","signalListener","start","info"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sdkClient/sdkClientMethodCS.js"],"sourcesContent":["import { clientCSDecorator } from './clientCS';\nimport { validateKey } from '../utils/inputValidation/key';\nimport { getMatching, keyParser } from '../utils/key';\nimport { sdkClientFactory } from './sdkClient';\nimport { objectAssign } from '../utils/lang/objectAssign';\nimport { RETRIEVE_CLIENT_DEFAULT, NEW_SHARED_CLIENT, RETRIEVE_CLIENT_EXISTING } from '../logger/constants';\nimport { SDK_SEGMENTS_ARRIVED } from '../readiness/constants';\nfunction buildInstanceId(key) {\n    // @ts-ignore\n    return (key.matchingKey ? key.matchingKey : key) + \"-\" + (key.bucketingKey ? key.bucketingKey : key) + \"-\";\n}\nvar method = 'Client instantiation';\n/**\n * Factory of client method for the client-side API variant where TT is ignored and thus\n * clients don't have a binded TT for the track method.\n */\nexport function sdkClientMethodCSFactory(params) {\n    var storage = params.storage, syncManager = params.syncManager, sdkReadinessManager = params.sdkReadinessManager, _a = params.settings, key = _a.core.key, readyTimeout = _a.startup.readyTimeout, log = _a.log;\n    var mainClientInstance = clientCSDecorator(log, sdkClientFactory(params), key);\n    var parsedDefaultKey = keyParser(key);\n    var defaultInstanceId = buildInstanceId(parsedDefaultKey);\n    // Cache instances created per factory.\n    var clientInstances = {};\n    clientInstances[defaultInstanceId] = mainClientInstance;\n    return function client(key) {\n        if (key === undefined) {\n            log.debug(RETRIEVE_CLIENT_DEFAULT);\n            return mainClientInstance;\n        }\n        // Validate the key value. The trafficType (2nd argument) is ignored\n        var validKey = validateKey(log, key, method);\n        if (validKey === false) {\n            throw new Error('Shared Client needs a valid key.');\n        }\n        var instanceId = buildInstanceId(validKey);\n        if (!clientInstances[instanceId]) {\n            var matchingKey = getMatching(validKey);\n            var sharedSdkReadiness_1 = sdkReadinessManager.shared(readyTimeout);\n            var sharedStorage = storage.shared && storage.shared(matchingKey, function (err) {\n                if (err)\n                    return;\n                // Emit SDK_READY in consumer mode for shared clients\n                sharedSdkReadiness_1.readinessManager.segments.emit(SDK_SEGMENTS_ARRIVED);\n            });\n            // 3 possibilities:\n            // - Standalone mode: both syncManager and sharedSyncManager are defined\n            // - Consumer mode: both syncManager and sharedSyncManager are undefined\n            // - Consumer partial mode: syncManager is defined (only for submitters) but sharedSyncManager is undefined\n            // @ts-ignore\n            var sharedSyncManager = syncManager && sharedStorage && syncManager.shared(matchingKey, sharedSdkReadiness_1.readinessManager, sharedStorage);\n            // As shared clients reuse all the storage information, we don't need to check here if we\n            // will use offline or online mode. We should stick with the original decision.\n            clientInstances[instanceId] = clientCSDecorator(log, sdkClientFactory(objectAssign({}, params, {\n                sdkReadinessManager: sharedSdkReadiness_1,\n                storage: sharedStorage || storage,\n                syncManager: sharedSyncManager,\n                signalListener: undefined, // only the main client \"destroy\" method stops the signal listener\n            }), true), validKey);\n            sharedSyncManager && sharedSyncManager.start();\n            log.info(NEW_SHARED_CLIENT);\n        }\n        else {\n            log.debug(RETRIEVE_CLIENT_EXISTING);\n        }\n        return clientInstances[instanceId];\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}