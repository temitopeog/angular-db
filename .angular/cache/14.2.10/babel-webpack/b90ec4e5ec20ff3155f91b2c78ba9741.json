{"ast":null,"code":"import { LogLevels, isLogLevelString } from './index';\nimport { ERROR_LOGLEVEL_INVALID } from './constants';\n/**\n * The public Logger utility API exposed via SplitFactory, used to update the log level.\n *\n * @param log the factory logger instance to handle\n */\nexport function createLoggerAPI(log) {\n  function setLogLevel(logLevel) {\n    if (isLogLevelString(logLevel)) {\n      log.setLogLevel(logLevel);\n    } else {\n      log.error(ERROR_LOGLEVEL_INVALID);\n    }\n  }\n  return {\n    /**\n     * Enables all the logs.\n     */\n    enable: function () {\n      setLogLevel(LogLevels.DEBUG);\n    },\n    /**\n     * Sets a custom log Level for the SDK.\n     * @param {string} logLevel - Custom LogLevel value.\n     */\n    setLogLevel: setLogLevel,\n    /**\n     * Disables all the log levels.\n     */\n    disable: function () {\n      // Disabling is equal logLevel none\n      setLogLevel(LogLevels.NONE);\n    },\n    /**\n     * Exposed for usage with setLogLevel\n     */\n    LogLevel: LogLevels\n  };\n}","map":{"version":3,"names":["LogLevels","isLogLevelString","ERROR_LOGLEVEL_INVALID","createLoggerAPI","log","setLogLevel","logLevel","error","enable","DEBUG","disable","NONE","LogLevel"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/logger/sdkLogger.js"],"sourcesContent":["import { LogLevels, isLogLevelString } from './index';\nimport { ERROR_LOGLEVEL_INVALID } from './constants';\n/**\n * The public Logger utility API exposed via SplitFactory, used to update the log level.\n *\n * @param log the factory logger instance to handle\n */\nexport function createLoggerAPI(log) {\n    function setLogLevel(logLevel) {\n        if (isLogLevelString(logLevel)) {\n            log.setLogLevel(logLevel);\n        }\n        else {\n            log.error(ERROR_LOGLEVEL_INVALID);\n        }\n    }\n    return {\n        /**\n         * Enables all the logs.\n         */\n        enable: function () {\n            setLogLevel(LogLevels.DEBUG);\n        },\n        /**\n         * Sets a custom log Level for the SDK.\n         * @param {string} logLevel - Custom LogLevel value.\n         */\n        setLogLevel: setLogLevel,\n        /**\n         * Disables all the log levels.\n         */\n        disable: function () {\n            // Disabling is equal logLevel none\n            setLogLevel(LogLevels.NONE);\n        },\n        /**\n         * Exposed for usage with setLogLevel\n         */\n        LogLevel: LogLevels\n    };\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,gBAAgB,QAAQ,SAAS;AACrD,SAASC,sBAAsB,QAAQ,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAe,CAACC,GAAG,EAAE;EACjC,SAASC,WAAW,CAACC,QAAQ,EAAE;IAC3B,IAAIL,gBAAgB,CAACK,QAAQ,CAAC,EAAE;MAC5BF,GAAG,CAACC,WAAW,CAACC,QAAQ,CAAC;IAC7B,CAAC,MACI;MACDF,GAAG,CAACG,KAAK,CAACL,sBAAsB,CAAC;IACrC;EACJ;EACA,OAAO;IACH;AACR;AACA;IACQM,MAAM,EAAE,YAAY;MAChBH,WAAW,CAACL,SAAS,CAACS,KAAK,CAAC;IAChC,CAAC;IACD;AACR;AACA;AACA;IACQJ,WAAW,EAAEA,WAAW;IACxB;AACR;AACA;IACQK,OAAO,EAAE,YAAY;MACjB;MACAL,WAAW,CAACL,SAAS,CAACW,IAAI,CAAC;IAC/B,CAAC;IACD;AACR;AACA;IACQC,QAAQ,EAAEZ;EACd,CAAC;AACL"},"metadata":{},"sourceType":"module"}