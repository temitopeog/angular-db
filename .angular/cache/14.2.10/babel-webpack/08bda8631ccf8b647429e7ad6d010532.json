{"ast":null,"code":"import { AttributesCacheInMemory } from '../storages/inMemory/AttributesCacheInMemory';\nimport { validateAttributesDeep } from '../utils/inputValidation/attributes';\nimport { objectAssign } from '../utils/lang/objectAssign';\n/**\n * Add in memory attributes storage methods and combine them with any attribute received from the getTreatment/s call\n */\nexport function clientAttributesDecoration(log, client) {\n  var attributeStorage = new AttributesCacheInMemory();\n  // Keep a reference to the original methods\n  var clientGetTreatment = client.getTreatment;\n  var clientGetTreatmentWithConfig = client.getTreatmentWithConfig;\n  var clientGetTreatments = client.getTreatments;\n  var clientGetTreatmentsWithConfig = client.getTreatmentsWithConfig;\n  var clientTrack = client.track;\n  function getTreatment(maybeKey, maybeSplit, maybeAttributes) {\n    return clientGetTreatment(maybeKey, maybeSplit, combineAttributes(maybeAttributes));\n  }\n  function getTreatmentWithConfig(maybeKey, maybeSplit, maybeAttributes) {\n    return clientGetTreatmentWithConfig(maybeKey, maybeSplit, combineAttributes(maybeAttributes));\n  }\n  function getTreatments(maybeKey, maybeSplits, maybeAttributes) {\n    return clientGetTreatments(maybeKey, maybeSplits, combineAttributes(maybeAttributes));\n  }\n  function getTreatmentsWithConfig(maybeKey, maybeSplits, maybeAttributes) {\n    return clientGetTreatmentsWithConfig(maybeKey, maybeSplits, combineAttributes(maybeAttributes));\n  }\n  function track(maybeKey, maybeTT, maybeEvent, maybeEventValue, maybeProperties) {\n    return clientTrack(maybeKey, maybeTT, maybeEvent, maybeEventValue, maybeProperties);\n  }\n  function combineAttributes(maybeAttributes) {\n    var storedAttributes = attributeStorage.getAll();\n    if (Object.keys(storedAttributes).length > 0) {\n      return objectAssign({}, storedAttributes, maybeAttributes);\n    }\n    return maybeAttributes;\n  }\n  return objectAssign(client, {\n    getTreatment: getTreatment,\n    getTreatmentWithConfig: getTreatmentWithConfig,\n    getTreatments: getTreatments,\n    getTreatmentsWithConfig: getTreatmentsWithConfig,\n    track: track,\n    /**\n     * Add an attribute to client's in memory attributes storage\n     *\n     * @param {string} attributeName Attrinute name\n     * @param {string, number, boolean, list} attributeValue Attribute value\n     * @returns {boolean} true if the attribute was stored and false otherways\n     */\n    setAttribute: function (attributeName, attributeValue) {\n      var attribute = {};\n      attribute[attributeName] = attributeValue;\n      if (!validateAttributesDeep(log, attribute, 'setAttribute')) return false;\n      log.debug(\"stored \" + attributeValue + \" for attribute \" + attributeName);\n      return attributeStorage.setAttribute(attributeName, attributeValue);\n    },\n    /**\n     * Returns the attribute with the given key\n     *\n     * @param {string} attributeName Attribute name\n     * @returns {Object} Attribute with the given key\n     */\n    getAttribute: function (attributeName) {\n      log.debug(\"retrieved attribute \" + attributeName);\n      return attributeStorage.getAttribute(attributeName + '');\n    },\n    /**\n     * Add to client's in memory attributes storage the attributes in 'attributes'\n     *\n     * @param {Object} attributes Object with attributes to store\n     * @returns true if attributes were stored an false otherways\n     */\n    setAttributes: function (attributes) {\n      if (!validateAttributesDeep(log, attributes, 'setAttributes')) return false;\n      return attributeStorage.setAttributes(attributes);\n    },\n    /**\n     * Return all the attributes stored in client's in memory attributes storage\n     *\n     * @returns {Object} returns all the stored attributes\n     */\n    getAttributes: function () {\n      return attributeStorage.getAll();\n    },\n    /**\n     * Removes from client's in memory attributes storage the attribute with the given key\n     *\n     * @param {string} attributeName\n     * @returns {boolean} true if attribute was removed and false otherways\n     */\n    removeAttribute: function (attributeName) {\n      log.debug(\"removed attribute \" + attributeName);\n      return attributeStorage.removeAttribute(attributeName + '');\n    },\n    /**\n     * Remove all the stored attributes in the client's in memory attribute storage\n     */\n    clearAttributes: function () {\n      return attributeStorage.clear();\n    }\n  });\n}","map":{"version":3,"names":["AttributesCacheInMemory","validateAttributesDeep","objectAssign","clientAttributesDecoration","log","client","attributeStorage","clientGetTreatment","getTreatment","clientGetTreatmentWithConfig","getTreatmentWithConfig","clientGetTreatments","getTreatments","clientGetTreatmentsWithConfig","getTreatmentsWithConfig","clientTrack","track","maybeKey","maybeSplit","maybeAttributes","combineAttributes","maybeSplits","maybeTT","maybeEvent","maybeEventValue","maybeProperties","storedAttributes","getAll","Object","keys","length","setAttribute","attributeName","attributeValue","attribute","debug","getAttribute","setAttributes","attributes","getAttributes","removeAttribute","clearAttributes","clear"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sdkClient/clientAttributesDecoration.js"],"sourcesContent":["import { AttributesCacheInMemory } from '../storages/inMemory/AttributesCacheInMemory';\nimport { validateAttributesDeep } from '../utils/inputValidation/attributes';\nimport { objectAssign } from '../utils/lang/objectAssign';\n/**\n * Add in memory attributes storage methods and combine them with any attribute received from the getTreatment/s call\n */\nexport function clientAttributesDecoration(log, client) {\n    var attributeStorage = new AttributesCacheInMemory();\n    // Keep a reference to the original methods\n    var clientGetTreatment = client.getTreatment;\n    var clientGetTreatmentWithConfig = client.getTreatmentWithConfig;\n    var clientGetTreatments = client.getTreatments;\n    var clientGetTreatmentsWithConfig = client.getTreatmentsWithConfig;\n    var clientTrack = client.track;\n    function getTreatment(maybeKey, maybeSplit, maybeAttributes) {\n        return clientGetTreatment(maybeKey, maybeSplit, combineAttributes(maybeAttributes));\n    }\n    function getTreatmentWithConfig(maybeKey, maybeSplit, maybeAttributes) {\n        return clientGetTreatmentWithConfig(maybeKey, maybeSplit, combineAttributes(maybeAttributes));\n    }\n    function getTreatments(maybeKey, maybeSplits, maybeAttributes) {\n        return clientGetTreatments(maybeKey, maybeSplits, combineAttributes(maybeAttributes));\n    }\n    function getTreatmentsWithConfig(maybeKey, maybeSplits, maybeAttributes) {\n        return clientGetTreatmentsWithConfig(maybeKey, maybeSplits, combineAttributes(maybeAttributes));\n    }\n    function track(maybeKey, maybeTT, maybeEvent, maybeEventValue, maybeProperties) {\n        return clientTrack(maybeKey, maybeTT, maybeEvent, maybeEventValue, maybeProperties);\n    }\n    function combineAttributes(maybeAttributes) {\n        var storedAttributes = attributeStorage.getAll();\n        if (Object.keys(storedAttributes).length > 0) {\n            return objectAssign({}, storedAttributes, maybeAttributes);\n        }\n        return maybeAttributes;\n    }\n    return objectAssign(client, {\n        getTreatment: getTreatment,\n        getTreatmentWithConfig: getTreatmentWithConfig,\n        getTreatments: getTreatments,\n        getTreatmentsWithConfig: getTreatmentsWithConfig,\n        track: track,\n        /**\n         * Add an attribute to client's in memory attributes storage\n         *\n         * @param {string} attributeName Attrinute name\n         * @param {string, number, boolean, list} attributeValue Attribute value\n         * @returns {boolean} true if the attribute was stored and false otherways\n         */\n        setAttribute: function (attributeName, attributeValue) {\n            var attribute = {};\n            attribute[attributeName] = attributeValue;\n            if (!validateAttributesDeep(log, attribute, 'setAttribute'))\n                return false;\n            log.debug(\"stored \" + attributeValue + \" for attribute \" + attributeName);\n            return attributeStorage.setAttribute(attributeName, attributeValue);\n        },\n        /**\n         * Returns the attribute with the given key\n         *\n         * @param {string} attributeName Attribute name\n         * @returns {Object} Attribute with the given key\n         */\n        getAttribute: function (attributeName) {\n            log.debug(\"retrieved attribute \" + attributeName);\n            return attributeStorage.getAttribute(attributeName + '');\n        },\n        /**\n         * Add to client's in memory attributes storage the attributes in 'attributes'\n         *\n         * @param {Object} attributes Object with attributes to store\n         * @returns true if attributes were stored an false otherways\n         */\n        setAttributes: function (attributes) {\n            if (!validateAttributesDeep(log, attributes, 'setAttributes'))\n                return false;\n            return attributeStorage.setAttributes(attributes);\n        },\n        /**\n         * Return all the attributes stored in client's in memory attributes storage\n         *\n         * @returns {Object} returns all the stored attributes\n         */\n        getAttributes: function () {\n            return attributeStorage.getAll();\n        },\n        /**\n         * Removes from client's in memory attributes storage the attribute with the given key\n         *\n         * @param {string} attributeName\n         * @returns {boolean} true if attribute was removed and false otherways\n         */\n        removeAttribute: function (attributeName) {\n            log.debug(\"removed attribute \" + attributeName);\n            return attributeStorage.removeAttribute(attributeName + '');\n        },\n        /**\n         * Remove all the stored attributes in the client's in memory attribute storage\n         */\n        clearAttributes: function () {\n            return attributeStorage.clear();\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}