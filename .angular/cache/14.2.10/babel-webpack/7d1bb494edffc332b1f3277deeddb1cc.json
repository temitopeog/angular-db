{"ast":null,"code":"import { SplitsCacheInMemory } from './SplitsCacheInMemory';\nimport { MySegmentsCacheInMemory } from './MySegmentsCacheInMemory';\nimport { ImpressionsCacheInMemory } from './ImpressionsCacheInMemory';\nimport { EventsCacheInMemory } from './EventsCacheInMemory';\nimport { ImpressionCountsCacheInMemory } from './ImpressionCountsCacheInMemory';\nimport { LOCALHOST_MODE, STORAGE_MEMORY } from '../../utils/constants';\nimport { shouldRecordTelemetry, TelemetryCacheInMemory } from './TelemetryCacheInMemory';\n/**\n * InMemory storage factory for standalone client-side SplitFactory\n *\n * @param params parameters required by EventsCacheSync\n */\nexport function InMemoryStorageCSFactory(params) {\n  return {\n    splits: new SplitsCacheInMemory(),\n    segments: new MySegmentsCacheInMemory(),\n    impressions: new ImpressionsCacheInMemory(params.impressionsQueueSize),\n    impressionCounts: params.optimize ? new ImpressionCountsCacheInMemory() : undefined,\n    events: new EventsCacheInMemory(params.eventsQueueSize),\n    telemetry: params.mode !== LOCALHOST_MODE && shouldRecordTelemetry() ? new TelemetryCacheInMemory() : undefined,\n    // When using MEMORY we should clean all the caches to leave them empty\n    destroy: function () {\n      this.splits.clear();\n      this.segments.clear();\n      this.impressions.clear();\n      this.impressionCounts && this.impressionCounts.clear();\n      this.events.clear();\n    },\n    // When using shared instanciation with MEMORY we reuse everything but segments (they are unique per key)\n    shared: function () {\n      return {\n        splits: this.splits,\n        segments: new MySegmentsCacheInMemory(),\n        impressions: this.impressions,\n        impressionCounts: this.impressionCounts,\n        events: this.events,\n        telemetry: this.telemetry,\n        // Set a new splits cache to clean it for the client without affecting other clients\n        destroy: function () {\n          this.splits = new SplitsCacheInMemory();\n          this.segments.clear();\n        }\n      };\n    }\n  };\n}\nInMemoryStorageCSFactory.type = STORAGE_MEMORY;","map":{"version":3,"names":["SplitsCacheInMemory","MySegmentsCacheInMemory","ImpressionsCacheInMemory","EventsCacheInMemory","ImpressionCountsCacheInMemory","LOCALHOST_MODE","STORAGE_MEMORY","shouldRecordTelemetry","TelemetryCacheInMemory","InMemoryStorageCSFactory","params","splits","segments","impressions","impressionsQueueSize","impressionCounts","optimize","undefined","events","eventsQueueSize","telemetry","mode","destroy","clear","shared","type"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inMemory/InMemoryStorageCS.js"],"sourcesContent":["import { SplitsCacheInMemory } from './SplitsCacheInMemory';\nimport { MySegmentsCacheInMemory } from './MySegmentsCacheInMemory';\nimport { ImpressionsCacheInMemory } from './ImpressionsCacheInMemory';\nimport { EventsCacheInMemory } from './EventsCacheInMemory';\nimport { ImpressionCountsCacheInMemory } from './ImpressionCountsCacheInMemory';\nimport { LOCALHOST_MODE, STORAGE_MEMORY } from '../../utils/constants';\nimport { shouldRecordTelemetry, TelemetryCacheInMemory } from './TelemetryCacheInMemory';\n/**\n * InMemory storage factory for standalone client-side SplitFactory\n *\n * @param params parameters required by EventsCacheSync\n */\nexport function InMemoryStorageCSFactory(params) {\n    return {\n        splits: new SplitsCacheInMemory(),\n        segments: new MySegmentsCacheInMemory(),\n        impressions: new ImpressionsCacheInMemory(params.impressionsQueueSize),\n        impressionCounts: params.optimize ? new ImpressionCountsCacheInMemory() : undefined,\n        events: new EventsCacheInMemory(params.eventsQueueSize),\n        telemetry: params.mode !== LOCALHOST_MODE && shouldRecordTelemetry() ? new TelemetryCacheInMemory() : undefined,\n        // When using MEMORY we should clean all the caches to leave them empty\n        destroy: function () {\n            this.splits.clear();\n            this.segments.clear();\n            this.impressions.clear();\n            this.impressionCounts && this.impressionCounts.clear();\n            this.events.clear();\n        },\n        // When using shared instanciation with MEMORY we reuse everything but segments (they are unique per key)\n        shared: function () {\n            return {\n                splits: this.splits,\n                segments: new MySegmentsCacheInMemory(),\n                impressions: this.impressions,\n                impressionCounts: this.impressionCounts,\n                events: this.events,\n                telemetry: this.telemetry,\n                // Set a new splits cache to clean it for the client without affecting other clients\n                destroy: function () {\n                    this.splits = new SplitsCacheInMemory();\n                    this.segments.clear();\n                }\n            };\n        },\n    };\n}\nInMemoryStorageCSFactory.type = STORAGE_MEMORY;\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,6BAA6B,QAAQ,iCAAiC;AAC/E,SAASC,cAAc,EAAEC,cAAc,QAAQ,uBAAuB;AACtE,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,0BAA0B;AACxF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAACC,MAAM,EAAE;EAC7C,OAAO;IACHC,MAAM,EAAE,IAAIX,mBAAmB,EAAE;IACjCY,QAAQ,EAAE,IAAIX,uBAAuB,EAAE;IACvCY,WAAW,EAAE,IAAIX,wBAAwB,CAACQ,MAAM,CAACI,oBAAoB,CAAC;IACtEC,gBAAgB,EAAEL,MAAM,CAACM,QAAQ,GAAG,IAAIZ,6BAA6B,EAAE,GAAGa,SAAS;IACnFC,MAAM,EAAE,IAAIf,mBAAmB,CAACO,MAAM,CAACS,eAAe,CAAC;IACvDC,SAAS,EAAEV,MAAM,CAACW,IAAI,KAAKhB,cAAc,IAAIE,qBAAqB,EAAE,GAAG,IAAIC,sBAAsB,EAAE,GAAGS,SAAS;IAC/G;IACAK,OAAO,EAAE,YAAY;MACjB,IAAI,CAACX,MAAM,CAACY,KAAK,EAAE;MACnB,IAAI,CAACX,QAAQ,CAACW,KAAK,EAAE;MACrB,IAAI,CAACV,WAAW,CAACU,KAAK,EAAE;MACxB,IAAI,CAACR,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,CAACQ,KAAK,EAAE;MACtD,IAAI,CAACL,MAAM,CAACK,KAAK,EAAE;IACvB,CAAC;IACD;IACAC,MAAM,EAAE,YAAY;MAChB,OAAO;QACHb,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,QAAQ,EAAE,IAAIX,uBAAuB,EAAE;QACvCY,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BE,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvCG,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBE,SAAS,EAAE,IAAI,CAACA,SAAS;QACzB;QACAE,OAAO,EAAE,YAAY;UACjB,IAAI,CAACX,MAAM,GAAG,IAAIX,mBAAmB,EAAE;UACvC,IAAI,CAACY,QAAQ,CAACW,KAAK,EAAE;QACzB;MACJ,CAAC;IACL;EACJ,CAAC;AACL;AACAd,wBAAwB,CAACgB,IAAI,GAAGnB,cAAc"},"metadata":{},"sourceType":"module"}