{"ast":null,"code":"var _a, _b, _c;\nimport { submitterFactory, firstPushWindowDecorator } from './submitter';\nimport { QUEUED, DEDUPED, DROPPED, CONSUMER_MODE, CONSUMER_ENUM, STANDALONE_MODE, CONSUMER_PARTIAL_MODE, STANDALONE_ENUM, CONSUMER_PARTIAL_ENUM, OPTIMIZED, DEBUG, DEBUG_ENUM, OPTIMIZED_ENUM, CONSENT_GRANTED, CONSENT_DECLINED, CONSENT_UNKNOWN } from '../../utils/constants';\nimport { SDK_READY, SDK_READY_FROM_CACHE } from '../../readiness/constants';\nimport { base } from '../../utils/settingsValidation';\nimport { usedKeysMap } from '../../utils/inputValidation/apiKey';\nimport { timer } from '../../utils/timeTracker/timer';\nimport { objectAssign } from '../../utils/lang/objectAssign';\n/**\n * Converts data from telemetry cache into /metrics/usage request payload.\n */\nexport function telemetryCacheStatsAdapter(telemetry, splits, segments) {\n  return {\n    isEmpty: function () {\n      return false;\n    },\n    clear: function () {},\n    // @TODO consider moving inside telemetry cache for code size reduction\n    pop: function () {\n      return {\n        lS: telemetry.getLastSynchronization(),\n        mL: telemetry.popLatencies(),\n        mE: telemetry.popExceptions(),\n        hE: telemetry.popHttpErrors(),\n        hL: telemetry.popHttpLatencies(),\n        tR: telemetry.popTokenRefreshes(),\n        aR: telemetry.popAuthRejections(),\n        iQ: telemetry.getImpressionStats(QUEUED),\n        iDe: telemetry.getImpressionStats(DEDUPED),\n        iDr: telemetry.getImpressionStats(DROPPED),\n        spC: splits.getSplitNames().length,\n        seC: segments.getRegisteredSegments().length,\n        skC: segments.getKeysCount(),\n        sL: telemetry.getSessionLength(),\n        eQ: telemetry.getEventStats(QUEUED),\n        eD: telemetry.getEventStats(DROPPED),\n        sE: telemetry.popStreamingEvents(),\n        t: telemetry.popTags()\n      };\n    }\n  };\n}\nvar OPERATION_MODE_MAP = (_a = {}, _a[STANDALONE_MODE] = STANDALONE_ENUM, _a[CONSUMER_MODE] = CONSUMER_ENUM, _a[CONSUMER_PARTIAL_MODE] = CONSUMER_PARTIAL_ENUM, _a);\nvar IMPRESSIONS_MODE_MAP = (_b = {}, _b[OPTIMIZED] = OPTIMIZED_ENUM, _b[DEBUG] = DEBUG_ENUM, _b);\nvar USER_CONSENT_MAP = (_c = {}, _c[CONSENT_UNKNOWN] = 1, _c[CONSENT_GRANTED] = 2, _c[CONSENT_DECLINED] = 3, _c);\nfunction getActiveFactories() {\n  return Object.keys(usedKeysMap).length;\n}\nfunction getRedundantActiveFactories() {\n  return Object.keys(usedKeysMap).reduce(function (acum, apiKey) {\n    return acum + usedKeysMap[apiKey] - 1;\n  }, 0);\n}\nexport function getTelemetryConfigStats(mode, storageType) {\n  return {\n    oM: OPERATION_MODE_MAP[mode],\n    st: storageType.toLowerCase(),\n    aF: getActiveFactories(),\n    rF: getRedundantActiveFactories()\n  };\n}\n/**\n * Converts data from telemetry cache and settings into /metrics/config request payload.\n */\nexport function telemetryCacheConfigAdapter(telemetry, settings) {\n  return {\n    isEmpty: function () {\n      return false;\n    },\n    clear: function () {},\n    pop: function () {\n      var urls = settings.urls,\n        scheduler = settings.scheduler;\n      var isClientSide = settings.core.key !== undefined;\n      return objectAssign(getTelemetryConfigStats(settings.mode, settings.storage.type), {\n        sE: settings.streamingEnabled,\n        rR: {\n          sp: scheduler.featuresRefreshRate / 1000,\n          se: isClientSide ? undefined : scheduler.segmentsRefreshRate / 1000,\n          ms: isClientSide ? scheduler.segmentsRefreshRate / 1000 : undefined,\n          im: scheduler.impressionsRefreshRate / 1000,\n          ev: scheduler.eventsPushRate / 1000,\n          te: scheduler.telemetryRefreshRate / 1000\n        },\n        uO: {\n          s: urls.sdk !== base.urls.sdk,\n          e: urls.events !== base.urls.events,\n          a: urls.auth !== base.urls.auth,\n          st: urls.streaming !== base.urls.streaming,\n          t: urls.telemetry !== base.urls.telemetry\n        },\n        iQ: scheduler.impressionsQueueSize,\n        eQ: scheduler.eventsQueueSize,\n        iM: IMPRESSIONS_MODE_MAP[settings.sync.impressionsMode],\n        iL: settings.impressionListener ? true : false,\n        hP: false,\n        tR: telemetry.getTimeUntilReady(),\n        tC: telemetry.getTimeUntilReadyFromCache(),\n        nR: telemetry.getNonReadyUsage(),\n        t: telemetry.popTags(),\n        i: settings.integrations && settings.integrations.map(function (int) {\n          return int.type;\n        }),\n        uC: settings.userConsent ? USER_CONSENT_MAP[settings.userConsent] : 0\n      });\n    }\n  };\n}\n/**\n * Submitter that periodically posts telemetry data\n */\nexport function telemetrySubmitterFactory(params) {\n  var _a = params.storage,\n    splits = _a.splits,\n    segments = _a.segments,\n    telemetry = _a.telemetry,\n    now = params.platform.now;\n  if (!telemetry || !now) return; // No submitter created if telemetry cache is not defined\n  var settings = params.settings,\n    _b = params.settings,\n    log = _b.log,\n    telemetryRefreshRate = _b.scheduler.telemetryRefreshRate,\n    splitApi = params.splitApi,\n    readiness = params.readiness,\n    sdkReadinessManager = params.sdkReadinessManager;\n  var startTime = timer(now);\n  var submitter = firstPushWindowDecorator(submitterFactory(log, splitApi.postMetricsUsage, telemetryCacheStatsAdapter(telemetry, splits, segments), telemetryRefreshRate, 'telemetry stats', undefined, 0, true), telemetryRefreshRate);\n  readiness.gate.once(SDK_READY_FROM_CACHE, function () {\n    telemetry.recordTimeUntilReadyFromCache(startTime());\n  });\n  sdkReadinessManager.incInternalReadyCbCount();\n  readiness.gate.once(SDK_READY, function () {\n    telemetry.recordTimeUntilReady(startTime());\n    // Post config data when the SDK is ready and if the telemetry submitter was started\n    if (submitter.isRunning()) {\n      var postMetricsConfigTask = submitterFactory(log, splitApi.postMetricsConfig, telemetryCacheConfigAdapter(telemetry, settings), 0, 'telemetry config', undefined, 0, true);\n      postMetricsConfigTask.execute();\n    }\n  });\n  return submitter;\n}","map":{"version":3,"names":["_a","_b","_c","submitterFactory","firstPushWindowDecorator","QUEUED","DEDUPED","DROPPED","CONSUMER_MODE","CONSUMER_ENUM","STANDALONE_MODE","CONSUMER_PARTIAL_MODE","STANDALONE_ENUM","CONSUMER_PARTIAL_ENUM","OPTIMIZED","DEBUG","DEBUG_ENUM","OPTIMIZED_ENUM","CONSENT_GRANTED","CONSENT_DECLINED","CONSENT_UNKNOWN","SDK_READY","SDK_READY_FROM_CACHE","base","usedKeysMap","timer","objectAssign","telemetryCacheStatsAdapter","telemetry","splits","segments","isEmpty","clear","pop","lS","getLastSynchronization","mL","popLatencies","mE","popExceptions","hE","popHttpErrors","hL","popHttpLatencies","tR","popTokenRefreshes","aR","popAuthRejections","iQ","getImpressionStats","iDe","iDr","spC","getSplitNames","length","seC","getRegisteredSegments","skC","getKeysCount","sL","getSessionLength","eQ","getEventStats","eD","sE","popStreamingEvents","t","popTags","OPERATION_MODE_MAP","IMPRESSIONS_MODE_MAP","USER_CONSENT_MAP","getActiveFactories","Object","keys","getRedundantActiveFactories","reduce","acum","apiKey","getTelemetryConfigStats","mode","storageType","oM","st","toLowerCase","aF","rF","telemetryCacheConfigAdapter","settings","urls","scheduler","isClientSide","core","key","undefined","storage","type","streamingEnabled","rR","sp","featuresRefreshRate","se","segmentsRefreshRate","ms","im","impressionsRefreshRate","ev","eventsPushRate","te","telemetryRefreshRate","uO","s","sdk","e","events","a","auth","streaming","impressionsQueueSize","eventsQueueSize","iM","sync","impressionsMode","iL","impressionListener","hP","getTimeUntilReady","tC","getTimeUntilReadyFromCache","nR","getNonReadyUsage","i","integrations","map","int","uC","userConsent","telemetrySubmitterFactory","params","now","platform","log","splitApi","readiness","sdkReadinessManager","startTime","submitter","postMetricsUsage","gate","once","recordTimeUntilReadyFromCache","incInternalReadyCbCount","recordTimeUntilReady","isRunning","postMetricsConfigTask","postMetricsConfig","execute"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/submitters/telemetrySubmitter.js"],"sourcesContent":["var _a, _b, _c;\nimport { submitterFactory, firstPushWindowDecorator } from './submitter';\nimport { QUEUED, DEDUPED, DROPPED, CONSUMER_MODE, CONSUMER_ENUM, STANDALONE_MODE, CONSUMER_PARTIAL_MODE, STANDALONE_ENUM, CONSUMER_PARTIAL_ENUM, OPTIMIZED, DEBUG, DEBUG_ENUM, OPTIMIZED_ENUM, CONSENT_GRANTED, CONSENT_DECLINED, CONSENT_UNKNOWN } from '../../utils/constants';\nimport { SDK_READY, SDK_READY_FROM_CACHE } from '../../readiness/constants';\nimport { base } from '../../utils/settingsValidation';\nimport { usedKeysMap } from '../../utils/inputValidation/apiKey';\nimport { timer } from '../../utils/timeTracker/timer';\nimport { objectAssign } from '../../utils/lang/objectAssign';\n/**\n * Converts data from telemetry cache into /metrics/usage request payload.\n */\nexport function telemetryCacheStatsAdapter(telemetry, splits, segments) {\n    return {\n        isEmpty: function () { return false; },\n        clear: function () { },\n        // @TODO consider moving inside telemetry cache for code size reduction\n        pop: function () {\n            return {\n                lS: telemetry.getLastSynchronization(),\n                mL: telemetry.popLatencies(),\n                mE: telemetry.popExceptions(),\n                hE: telemetry.popHttpErrors(),\n                hL: telemetry.popHttpLatencies(),\n                tR: telemetry.popTokenRefreshes(),\n                aR: telemetry.popAuthRejections(),\n                iQ: telemetry.getImpressionStats(QUEUED),\n                iDe: telemetry.getImpressionStats(DEDUPED),\n                iDr: telemetry.getImpressionStats(DROPPED),\n                spC: splits.getSplitNames().length,\n                seC: segments.getRegisteredSegments().length,\n                skC: segments.getKeysCount(),\n                sL: telemetry.getSessionLength(),\n                eQ: telemetry.getEventStats(QUEUED),\n                eD: telemetry.getEventStats(DROPPED),\n                sE: telemetry.popStreamingEvents(),\n                t: telemetry.popTags(),\n            };\n        }\n    };\n}\nvar OPERATION_MODE_MAP = (_a = {},\n    _a[STANDALONE_MODE] = STANDALONE_ENUM,\n    _a[CONSUMER_MODE] = CONSUMER_ENUM,\n    _a[CONSUMER_PARTIAL_MODE] = CONSUMER_PARTIAL_ENUM,\n    _a);\nvar IMPRESSIONS_MODE_MAP = (_b = {},\n    _b[OPTIMIZED] = OPTIMIZED_ENUM,\n    _b[DEBUG] = DEBUG_ENUM,\n    _b);\nvar USER_CONSENT_MAP = (_c = {},\n    _c[CONSENT_UNKNOWN] = 1,\n    _c[CONSENT_GRANTED] = 2,\n    _c[CONSENT_DECLINED] = 3,\n    _c);\nfunction getActiveFactories() {\n    return Object.keys(usedKeysMap).length;\n}\nfunction getRedundantActiveFactories() {\n    return Object.keys(usedKeysMap).reduce(function (acum, apiKey) {\n        return acum + usedKeysMap[apiKey] - 1;\n    }, 0);\n}\nexport function getTelemetryConfigStats(mode, storageType) {\n    return {\n        oM: OPERATION_MODE_MAP[mode],\n        st: storageType.toLowerCase(),\n        aF: getActiveFactories(),\n        rF: getRedundantActiveFactories(),\n    };\n}\n/**\n * Converts data from telemetry cache and settings into /metrics/config request payload.\n */\nexport function telemetryCacheConfigAdapter(telemetry, settings) {\n    return {\n        isEmpty: function () { return false; },\n        clear: function () { },\n        pop: function () {\n            var urls = settings.urls, scheduler = settings.scheduler;\n            var isClientSide = settings.core.key !== undefined;\n            return objectAssign(getTelemetryConfigStats(settings.mode, settings.storage.type), {\n                sE: settings.streamingEnabled,\n                rR: {\n                    sp: scheduler.featuresRefreshRate / 1000,\n                    se: isClientSide ? undefined : scheduler.segmentsRefreshRate / 1000,\n                    ms: isClientSide ? scheduler.segmentsRefreshRate / 1000 : undefined,\n                    im: scheduler.impressionsRefreshRate / 1000,\n                    ev: scheduler.eventsPushRate / 1000,\n                    te: scheduler.telemetryRefreshRate / 1000,\n                },\n                uO: {\n                    s: urls.sdk !== base.urls.sdk,\n                    e: urls.events !== base.urls.events,\n                    a: urls.auth !== base.urls.auth,\n                    st: urls.streaming !== base.urls.streaming,\n                    t: urls.telemetry !== base.urls.telemetry,\n                },\n                iQ: scheduler.impressionsQueueSize,\n                eQ: scheduler.eventsQueueSize,\n                iM: IMPRESSIONS_MODE_MAP[settings.sync.impressionsMode],\n                iL: settings.impressionListener ? true : false,\n                hP: false,\n                tR: telemetry.getTimeUntilReady(),\n                tC: telemetry.getTimeUntilReadyFromCache(),\n                nR: telemetry.getNonReadyUsage(),\n                t: telemetry.popTags(),\n                i: settings.integrations && settings.integrations.map(function (int) { return int.type; }),\n                uC: settings.userConsent ? USER_CONSENT_MAP[settings.userConsent] : 0\n            });\n        }\n    };\n}\n/**\n * Submitter that periodically posts telemetry data\n */\nexport function telemetrySubmitterFactory(params) {\n    var _a = params.storage, splits = _a.splits, segments = _a.segments, telemetry = _a.telemetry, now = params.platform.now;\n    if (!telemetry || !now)\n        return; // No submitter created if telemetry cache is not defined\n    var settings = params.settings, _b = params.settings, log = _b.log, telemetryRefreshRate = _b.scheduler.telemetryRefreshRate, splitApi = params.splitApi, readiness = params.readiness, sdkReadinessManager = params.sdkReadinessManager;\n    var startTime = timer(now);\n    var submitter = firstPushWindowDecorator(submitterFactory(log, splitApi.postMetricsUsage, telemetryCacheStatsAdapter(telemetry, splits, segments), telemetryRefreshRate, 'telemetry stats', undefined, 0, true), telemetryRefreshRate);\n    readiness.gate.once(SDK_READY_FROM_CACHE, function () {\n        telemetry.recordTimeUntilReadyFromCache(startTime());\n    });\n    sdkReadinessManager.incInternalReadyCbCount();\n    readiness.gate.once(SDK_READY, function () {\n        telemetry.recordTimeUntilReady(startTime());\n        // Post config data when the SDK is ready and if the telemetry submitter was started\n        if (submitter.isRunning()) {\n            var postMetricsConfigTask = submitterFactory(log, splitApi.postMetricsConfig, telemetryCacheConfigAdapter(telemetry, settings), 0, 'telemetry config', undefined, 0, true);\n            postMetricsConfigTask.execute();\n        }\n    });\n    return submitter;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}