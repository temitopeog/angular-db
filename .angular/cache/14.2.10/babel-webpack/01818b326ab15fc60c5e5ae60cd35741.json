{"ast":null,"code":"import { OCCUPANCY } from '../constants';\nimport { isString } from '../../../utils/lang';\n/**\n * Parses the `data` JSON string, if exists, of a given SSE error notifications.\n * HTTP errors handled by Ably (e.g., 400 due to invalid token, 401 due to expired token, 500) have the `data` property.\n * Other network and HTTP errors do not have this property.\n *\n * @param {Object} error\n * @throws {SyntaxError} if `error.data` is an invalid JSON string\n */\nexport function errorParser(error) {\n  // @ts-ignore\n  if (isString(error.data)) error.parsedData = JSON.parse(error.data); // cannot assign to read only property 'data'\n  return error;\n}\n/**\n * Parses the `data` JSON string of a given SSE message notifications.\n * Also assigns the type OCCUPANCY, if it corresponds, so that all supported messages (e.g., SPLIT_UPDATE, CONTROL) have a type.\n *\n * @param message\n * @returns parsed notification message or undefined if the given event data is falsy (e.g, '' or undefined).\n * For example, the EventSource implementation of React-Native for iOS emits a message event with empty data for Ably keepalive comments.\n * @throws {SyntaxError} if `message.data` or `JSON.parse(message.data).data` are invalid JSON strings\n */\nexport function messageParser(message) {\n  if (!message.data) return;\n  var messageData = JSON.parse(message.data);\n  messageData.parsedData = JSON.parse(messageData.data);\n  // set the event type to OCCUPANCY, to handle all events uniformely\n  if (messageData.name && messageData.name === '[meta]occupancy') messageData.parsedData.type = OCCUPANCY;\n  return messageData;\n}","map":{"version":3,"names":["OCCUPANCY","isString","errorParser","error","data","parsedData","JSON","parse","messageParser","message","messageData","name","type"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/streaming/SSEHandler/NotificationParser.js"],"sourcesContent":["import { OCCUPANCY } from '../constants';\nimport { isString } from '../../../utils/lang';\n/**\n * Parses the `data` JSON string, if exists, of a given SSE error notifications.\n * HTTP errors handled by Ably (e.g., 400 due to invalid token, 401 due to expired token, 500) have the `data` property.\n * Other network and HTTP errors do not have this property.\n *\n * @param {Object} error\n * @throws {SyntaxError} if `error.data` is an invalid JSON string\n */\nexport function errorParser(error) {\n    // @ts-ignore\n    if (isString(error.data))\n        error.parsedData = JSON.parse(error.data); // cannot assign to read only property 'data'\n    return error;\n}\n/**\n * Parses the `data` JSON string of a given SSE message notifications.\n * Also assigns the type OCCUPANCY, if it corresponds, so that all supported messages (e.g., SPLIT_UPDATE, CONTROL) have a type.\n *\n * @param message\n * @returns parsed notification message or undefined if the given event data is falsy (e.g, '' or undefined).\n * For example, the EventSource implementation of React-Native for iOS emits a message event with empty data for Ably keepalive comments.\n * @throws {SyntaxError} if `message.data` or `JSON.parse(message.data).data` are invalid JSON strings\n */\nexport function messageParser(message) {\n    if (!message.data)\n        return;\n    var messageData = JSON.parse(message.data);\n    messageData.parsedData = JSON.parse(messageData.data);\n    // set the event type to OCCUPANCY, to handle all events uniformely\n    if (messageData.name && messageData.name === '[meta]occupancy')\n        messageData.parsedData.type = OCCUPANCY;\n    return messageData;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,KAAK,EAAE;EAC/B;EACA,IAAIF,QAAQ,CAACE,KAAK,CAACC,IAAI,CAAC,EACpBD,KAAK,CAACE,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;EAC/C,OAAOD,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,aAAa,CAACC,OAAO,EAAE;EACnC,IAAI,CAACA,OAAO,CAACL,IAAI,EACb;EACJ,IAAIM,WAAW,GAAGJ,IAAI,CAACC,KAAK,CAACE,OAAO,CAACL,IAAI,CAAC;EAC1CM,WAAW,CAACL,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACG,WAAW,CAACN,IAAI,CAAC;EACrD;EACA,IAAIM,WAAW,CAACC,IAAI,IAAID,WAAW,CAACC,IAAI,KAAK,iBAAiB,EAC1DD,WAAW,CAACL,UAAU,CAACO,IAAI,GAAGZ,SAAS;EAC3C,OAAOU,WAAW;AACtB"},"metadata":{},"sourceType":"module"}