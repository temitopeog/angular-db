{"ast":null,"code":"import { objectAssign } from '../../utils/lang/objectAssign';\nvar AttributesCacheInMemory = /** @class */function () {\n  function AttributesCacheInMemory() {\n    this.attributesCache = {};\n  }\n  /**\n   * Create or update the value for the given attribute\n   *\n   * @param {string} attributeName attribute name\n   * @param {Object} attributeValue attribute value\n   * @returns {boolean} the attribute was stored\n   */\n  AttributesCacheInMemory.prototype.setAttribute = function (attributeName, attributeValue) {\n    this.attributesCache[attributeName] = attributeValue;\n    return true;\n  };\n  /**\n   * Retrieves the value of a given attribute\n   *\n   * @param {string} attributeName attribute name\n   * @returns {Object?} stored attribute value\n   */\n  AttributesCacheInMemory.prototype.getAttribute = function (attributeName) {\n    return this.attributesCache[attributeName];\n  };\n  /**\n   * Create or update all the given attributes\n   *\n   * @param {[string, Object]} attributes attributes to create or update\n   * @returns {boolean} attributes were stored\n   */\n  AttributesCacheInMemory.prototype.setAttributes = function (attributes) {\n    this.attributesCache = objectAssign(this.attributesCache, attributes);\n    return true;\n  };\n  /**\n   * Retrieve the full attributes map\n   *\n   * @returns {Map<string, Object>} stored attributes\n   */\n  AttributesCacheInMemory.prototype.getAll = function () {\n    return this.attributesCache;\n  };\n  /**\n   * Removes a given attribute from the map\n   *\n   * @param {string} attributeName attribute to remove\n   * @returns {boolean} attribute removed\n   */\n  AttributesCacheInMemory.prototype.removeAttribute = function (attributeName) {\n    if (Object.keys(this.attributesCache).indexOf(attributeName) >= 0) {\n      delete this.attributesCache[attributeName];\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Clears all attributes stored in the SDK\n   *\n   */\n  AttributesCacheInMemory.prototype.clear = function () {\n    this.attributesCache = {};\n    return true;\n  };\n  return AttributesCacheInMemory;\n}();\nexport { AttributesCacheInMemory };","map":{"version":3,"names":["objectAssign","AttributesCacheInMemory","attributesCache","prototype","setAttribute","attributeName","attributeValue","getAttribute","setAttributes","attributes","getAll","removeAttribute","Object","keys","indexOf","clear"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inMemory/AttributesCacheInMemory.js"],"sourcesContent":["import { objectAssign } from '../../utils/lang/objectAssign';\nvar AttributesCacheInMemory = /** @class */ (function () {\n    function AttributesCacheInMemory() {\n        this.attributesCache = {};\n    }\n    /**\n     * Create or update the value for the given attribute\n     *\n     * @param {string} attributeName attribute name\n     * @param {Object} attributeValue attribute value\n     * @returns {boolean} the attribute was stored\n     */\n    AttributesCacheInMemory.prototype.setAttribute = function (attributeName, attributeValue) {\n        this.attributesCache[attributeName] = attributeValue;\n        return true;\n    };\n    /**\n     * Retrieves the value of a given attribute\n     *\n     * @param {string} attributeName attribute name\n     * @returns {Object?} stored attribute value\n     */\n    AttributesCacheInMemory.prototype.getAttribute = function (attributeName) {\n        return this.attributesCache[attributeName];\n    };\n    /**\n     * Create or update all the given attributes\n     *\n     * @param {[string, Object]} attributes attributes to create or update\n     * @returns {boolean} attributes were stored\n     */\n    AttributesCacheInMemory.prototype.setAttributes = function (attributes) {\n        this.attributesCache = objectAssign(this.attributesCache, attributes);\n        return true;\n    };\n    /**\n     * Retrieve the full attributes map\n     *\n     * @returns {Map<string, Object>} stored attributes\n     */\n    AttributesCacheInMemory.prototype.getAll = function () {\n        return this.attributesCache;\n    };\n    /**\n     * Removes a given attribute from the map\n     *\n     * @param {string} attributeName attribute to remove\n     * @returns {boolean} attribute removed\n     */\n    AttributesCacheInMemory.prototype.removeAttribute = function (attributeName) {\n        if (Object.keys(this.attributesCache).indexOf(attributeName) >= 0) {\n            delete this.attributesCache[attributeName];\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Clears all attributes stored in the SDK\n     *\n     */\n    AttributesCacheInMemory.prototype.clear = function () {\n        this.attributesCache = {};\n        return true;\n    };\n    return AttributesCacheInMemory;\n}());\nexport { AttributesCacheInMemory };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,+BAA+B;AAC5D,IAAIC,uBAAuB,GAAG,aAAe,YAAY;EACrD,SAASA,uBAAuB,GAAG;IAC/B,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACID,uBAAuB,CAACE,SAAS,CAACC,YAAY,GAAG,UAAUC,aAAa,EAAEC,cAAc,EAAE;IACtF,IAAI,CAACJ,eAAe,CAACG,aAAa,CAAC,GAAGC,cAAc;IACpD,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIL,uBAAuB,CAACE,SAAS,CAACI,YAAY,GAAG,UAAUF,aAAa,EAAE;IACtE,OAAO,IAAI,CAACH,eAAe,CAACG,aAAa,CAAC;EAC9C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIJ,uBAAuB,CAACE,SAAS,CAACK,aAAa,GAAG,UAAUC,UAAU,EAAE;IACpE,IAAI,CAACP,eAAe,GAAGF,YAAY,CAAC,IAAI,CAACE,eAAe,EAAEO,UAAU,CAAC;IACrE,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIR,uBAAuB,CAACE,SAAS,CAACO,MAAM,GAAG,YAAY;IACnD,OAAO,IAAI,CAACR,eAAe;EAC/B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACID,uBAAuB,CAACE,SAAS,CAACQ,eAAe,GAAG,UAAUN,aAAa,EAAE;IACzE,IAAIO,MAAM,CAACC,IAAI,CAAC,IAAI,CAACX,eAAe,CAAC,CAACY,OAAO,CAACT,aAAa,CAAC,IAAI,CAAC,EAAE;MAC/D,OAAO,IAAI,CAACH,eAAe,CAACG,aAAa,CAAC;MAC1C,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;EACIJ,uBAAuB,CAACE,SAAS,CAACY,KAAK,GAAG,YAAY;IAClD,IAAI,CAACb,eAAe,GAAG,CAAC,CAAC;IACzB,OAAO,IAAI;EACf,CAAC;EACD,OAAOD,uBAAuB;AAClC,CAAC,EAAG;AACJ,SAASA,uBAAuB"},"metadata":{},"sourceType":"module"}