{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { startsWith } from '../utils/lang';\nimport { KeyBuilder } from './KeyBuilder';\nvar KeyBuilderCS = /** @class */function (_super) {\n  __extends(KeyBuilderCS, _super);\n  function KeyBuilderCS(prefix, matchingKey) {\n    var _this = _super.call(this, prefix) || this;\n    _this.matchingKey = matchingKey;\n    _this.regexSplitsCacheKey = new RegExp(\"^\" + prefix + \"\\\\.(splits?|trafficType)\\\\.\");\n    return _this;\n  }\n  /**\n   * @override\n   */\n  KeyBuilderCS.prototype.buildSegmentNameKey = function (segmentName) {\n    return this.prefix + \".\" + this.matchingKey + \".segment.\" + segmentName;\n  };\n  KeyBuilderCS.prototype.extractSegmentName = function (builtSegmentKeyName) {\n    var prefix = this.prefix + \".\" + this.matchingKey + \".segment.\";\n    if (startsWith(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);\n  };\n  // @BREAKING: The key used to start with the matching key instead of the prefix, this was changed on version 10.17.3\n  KeyBuilderCS.prototype.buildOldSegmentNameKey = function (segmentName) {\n    return this.matchingKey + \".\" + this.prefix + \".segment.\" + segmentName;\n  };\n  // @BREAKING: The key used to start with the matching key instead of the prefix, this was changed on version 10.17.3\n  KeyBuilderCS.prototype.extractOldSegmentKey = function (builtSegmentKeyName) {\n    var prefix = this.matchingKey + \".\" + this.prefix + \".segment.\";\n    if (startsWith(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);\n  };\n  KeyBuilderCS.prototype.buildLastUpdatedKey = function () {\n    return this.prefix + \".splits.lastUpdated\";\n  };\n  KeyBuilderCS.prototype.isSplitsCacheKey = function (key) {\n    return this.regexSplitsCacheKey.test(key);\n  };\n  KeyBuilderCS.prototype.buildSplitsFilterQueryKey = function () {\n    return this.prefix + \".splits.filterQuery\";\n  };\n  return KeyBuilderCS;\n}(KeyBuilder);\nexport { KeyBuilderCS };","map":{"version":3,"names":["__extends","startsWith","KeyBuilder","KeyBuilderCS","_super","prefix","matchingKey","_this","call","regexSplitsCacheKey","RegExp","prototype","buildSegmentNameKey","segmentName","extractSegmentName","builtSegmentKeyName","substr","length","buildOldSegmentNameKey","extractOldSegmentKey","buildLastUpdatedKey","isSplitsCacheKey","key","test","buildSplitsFilterQueryKey"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/KeyBuilderCS.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { startsWith } from '../utils/lang';\nimport { KeyBuilder } from './KeyBuilder';\nvar KeyBuilderCS = /** @class */ (function (_super) {\n    __extends(KeyBuilderCS, _super);\n    function KeyBuilderCS(prefix, matchingKey) {\n        var _this = _super.call(this, prefix) || this;\n        _this.matchingKey = matchingKey;\n        _this.regexSplitsCacheKey = new RegExp(\"^\" + prefix + \"\\\\.(splits?|trafficType)\\\\.\");\n        return _this;\n    }\n    /**\n     * @override\n     */\n    KeyBuilderCS.prototype.buildSegmentNameKey = function (segmentName) {\n        return this.prefix + \".\" + this.matchingKey + \".segment.\" + segmentName;\n    };\n    KeyBuilderCS.prototype.extractSegmentName = function (builtSegmentKeyName) {\n        var prefix = this.prefix + \".\" + this.matchingKey + \".segment.\";\n        if (startsWith(builtSegmentKeyName, prefix))\n            return builtSegmentKeyName.substr(prefix.length);\n    };\n    // @BREAKING: The key used to start with the matching key instead of the prefix, this was changed on version 10.17.3\n    KeyBuilderCS.prototype.buildOldSegmentNameKey = function (segmentName) {\n        return this.matchingKey + \".\" + this.prefix + \".segment.\" + segmentName;\n    };\n    // @BREAKING: The key used to start with the matching key instead of the prefix, this was changed on version 10.17.3\n    KeyBuilderCS.prototype.extractOldSegmentKey = function (builtSegmentKeyName) {\n        var prefix = this.matchingKey + \".\" + this.prefix + \".segment.\";\n        if (startsWith(builtSegmentKeyName, prefix))\n            return builtSegmentKeyName.substr(prefix.length);\n    };\n    KeyBuilderCS.prototype.buildLastUpdatedKey = function () {\n        return this.prefix + \".splits.lastUpdated\";\n    };\n    KeyBuilderCS.prototype.isSplitsCacheKey = function (key) {\n        return this.regexSplitsCacheKey.test(key);\n    };\n    KeyBuilderCS.prototype.buildSplitsFilterQueryKey = function () {\n        return this.prefix + \".splits.filterQuery\";\n    };\n    return KeyBuilderCS;\n}(KeyBuilder));\nexport { KeyBuilderCS };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,cAAc;AACzC,IAAIC,YAAY,GAAG,aAAe,UAAUC,MAAM,EAAE;EAChDJ,SAAS,CAACG,YAAY,EAAEC,MAAM,CAAC;EAC/B,SAASD,YAAY,CAACE,MAAM,EAAEC,WAAW,EAAE;IACvC,IAAIC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,IAAI,EAAEH,MAAM,CAAC,IAAI,IAAI;IAC7CE,KAAK,CAACD,WAAW,GAAGA,WAAW;IAC/BC,KAAK,CAACE,mBAAmB,GAAG,IAAIC,MAAM,CAAC,GAAG,GAAGL,MAAM,GAAG,6BAA6B,CAAC;IACpF,OAAOE,KAAK;EAChB;EACA;AACJ;AACA;EACIJ,YAAY,CAACQ,SAAS,CAACC,mBAAmB,GAAG,UAAUC,WAAW,EAAE;IAChE,OAAO,IAAI,CAACR,MAAM,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,WAAW,GAAGO,WAAW;EAC3E,CAAC;EACDV,YAAY,CAACQ,SAAS,CAACG,kBAAkB,GAAG,UAAUC,mBAAmB,EAAE;IACvE,IAAIV,MAAM,GAAG,IAAI,CAACA,MAAM,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,WAAW;IAC/D,IAAIL,UAAU,CAACc,mBAAmB,EAAEV,MAAM,CAAC,EACvC,OAAOU,mBAAmB,CAACC,MAAM,CAACX,MAAM,CAACY,MAAM,CAAC;EACxD,CAAC;EACD;EACAd,YAAY,CAACQ,SAAS,CAACO,sBAAsB,GAAG,UAAUL,WAAW,EAAE;IACnE,OAAO,IAAI,CAACP,WAAW,GAAG,GAAG,GAAG,IAAI,CAACD,MAAM,GAAG,WAAW,GAAGQ,WAAW;EAC3E,CAAC;EACD;EACAV,YAAY,CAACQ,SAAS,CAACQ,oBAAoB,GAAG,UAAUJ,mBAAmB,EAAE;IACzE,IAAIV,MAAM,GAAG,IAAI,CAACC,WAAW,GAAG,GAAG,GAAG,IAAI,CAACD,MAAM,GAAG,WAAW;IAC/D,IAAIJ,UAAU,CAACc,mBAAmB,EAAEV,MAAM,CAAC,EACvC,OAAOU,mBAAmB,CAACC,MAAM,CAACX,MAAM,CAACY,MAAM,CAAC;EACxD,CAAC;EACDd,YAAY,CAACQ,SAAS,CAACS,mBAAmB,GAAG,YAAY;IACrD,OAAO,IAAI,CAACf,MAAM,GAAG,qBAAqB;EAC9C,CAAC;EACDF,YAAY,CAACQ,SAAS,CAACU,gBAAgB,GAAG,UAAUC,GAAG,EAAE;IACrD,OAAO,IAAI,CAACb,mBAAmB,CAACc,IAAI,CAACD,GAAG,CAAC;EAC7C,CAAC;EACDnB,YAAY,CAACQ,SAAS,CAACa,yBAAyB,GAAG,YAAY;IAC3D,OAAO,IAAI,CAACnB,MAAM,GAAG,qBAAqB;EAC9C,CAAC;EACD,OAAOF,YAAY;AACvB,CAAC,CAACD,UAAU,CAAE;AACd,SAASC,YAAY"},"metadata":{},"sourceType":"module"}