{"ast":null,"code":"import { ImpressionsCacheInMemory } from '../inMemory/ImpressionsCacheInMemory';\nimport { ImpressionCountsCacheInMemory } from '../inMemory/ImpressionCountsCacheInMemory';\nimport { EventsCacheInMemory } from '../inMemory/EventsCacheInMemory';\nimport { validatePrefix } from '../KeyBuilder';\nimport { KeyBuilderCS } from '../KeyBuilderCS';\nimport { isLocalStorageAvailable } from '../../utils/env/isLocalStorageAvailable';\nimport { SplitsCacheInLocal } from './SplitsCacheInLocal';\nimport { MySegmentsCacheInLocal } from './MySegmentsCacheInLocal';\nimport { MySegmentsCacheInMemory } from '../inMemory/MySegmentsCacheInMemory';\nimport { SplitsCacheInMemory } from '../inMemory/SplitsCacheInMemory';\nimport { DEFAULT_CACHE_EXPIRATION_IN_MILLIS } from '../../utils/constants/browser';\nimport { InMemoryStorageCSFactory } from '../inMemory/InMemoryStorageCS';\nimport { LOG_PREFIX } from './constants';\nimport { LOCALHOST_MODE, STORAGE_LOCALSTORAGE } from '../../utils/constants';\nimport { shouldRecordTelemetry, TelemetryCacheInMemory } from '../inMemory/TelemetryCacheInMemory';\n/**\n * InLocal storage factory for standalone client-side SplitFactory\n */\nexport function InLocalStorage(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var prefix = validatePrefix(options.prefix);\n  function InLocalStorageCSFactory(params) {\n    // Fallback to InMemoryStorage if LocalStorage API is not available\n    if (!isLocalStorageAvailable()) {\n      params.log.warn(LOG_PREFIX + 'LocalStorage API is unavailable. Falling back to default MEMORY storage');\n      return InMemoryStorageCSFactory(params);\n    }\n    var log = params.log;\n    var keys = new KeyBuilderCS(prefix, params.matchingKey);\n    var expirationTimestamp = Date.now() - DEFAULT_CACHE_EXPIRATION_IN_MILLIS;\n    return {\n      splits: new SplitsCacheInLocal(log, keys, expirationTimestamp, params.splitFiltersValidation),\n      segments: new MySegmentsCacheInLocal(log, keys),\n      impressions: new ImpressionsCacheInMemory(params.impressionsQueueSize),\n      impressionCounts: params.optimize ? new ImpressionCountsCacheInMemory() : undefined,\n      events: new EventsCacheInMemory(params.eventsQueueSize),\n      telemetry: params.mode !== LOCALHOST_MODE && shouldRecordTelemetry() ? new TelemetryCacheInMemory() : undefined,\n      destroy: function () {\n        this.splits = new SplitsCacheInMemory();\n        this.segments = new MySegmentsCacheInMemory();\n        this.impressions.clear();\n        this.impressionCounts && this.impressionCounts.clear();\n        this.events.clear();\n      },\n      // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).\n      shared: function (matchingKey) {\n        var childKeysBuilder = new KeyBuilderCS(prefix, matchingKey);\n        return {\n          splits: this.splits,\n          segments: new MySegmentsCacheInLocal(log, childKeysBuilder),\n          impressions: this.impressions,\n          impressionCounts: this.impressionCounts,\n          events: this.events,\n          telemetry: this.telemetry,\n          destroy: function () {\n            this.splits = new SplitsCacheInMemory();\n            this.segments = new MySegmentsCacheInMemory();\n          }\n        };\n      }\n    };\n  }\n  InLocalStorageCSFactory.type = STORAGE_LOCALSTORAGE;\n  return InLocalStorageCSFactory;\n}","map":{"version":3,"names":["ImpressionsCacheInMemory","ImpressionCountsCacheInMemory","EventsCacheInMemory","validatePrefix","KeyBuilderCS","isLocalStorageAvailable","SplitsCacheInLocal","MySegmentsCacheInLocal","MySegmentsCacheInMemory","SplitsCacheInMemory","DEFAULT_CACHE_EXPIRATION_IN_MILLIS","InMemoryStorageCSFactory","LOG_PREFIX","LOCALHOST_MODE","STORAGE_LOCALSTORAGE","shouldRecordTelemetry","TelemetryCacheInMemory","InLocalStorage","options","prefix","InLocalStorageCSFactory","params","log","warn","keys","matchingKey","expirationTimestamp","Date","now","splits","splitFiltersValidation","segments","impressions","impressionsQueueSize","impressionCounts","optimize","undefined","events","eventsQueueSize","telemetry","mode","destroy","clear","shared","childKeysBuilder","type"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inLocalStorage/index.js"],"sourcesContent":["import { ImpressionsCacheInMemory } from '../inMemory/ImpressionsCacheInMemory';\nimport { ImpressionCountsCacheInMemory } from '../inMemory/ImpressionCountsCacheInMemory';\nimport { EventsCacheInMemory } from '../inMemory/EventsCacheInMemory';\nimport { validatePrefix } from '../KeyBuilder';\nimport { KeyBuilderCS } from '../KeyBuilderCS';\nimport { isLocalStorageAvailable } from '../../utils/env/isLocalStorageAvailable';\nimport { SplitsCacheInLocal } from './SplitsCacheInLocal';\nimport { MySegmentsCacheInLocal } from './MySegmentsCacheInLocal';\nimport { MySegmentsCacheInMemory } from '../inMemory/MySegmentsCacheInMemory';\nimport { SplitsCacheInMemory } from '../inMemory/SplitsCacheInMemory';\nimport { DEFAULT_CACHE_EXPIRATION_IN_MILLIS } from '../../utils/constants/browser';\nimport { InMemoryStorageCSFactory } from '../inMemory/InMemoryStorageCS';\nimport { LOG_PREFIX } from './constants';\nimport { LOCALHOST_MODE, STORAGE_LOCALSTORAGE } from '../../utils/constants';\nimport { shouldRecordTelemetry, TelemetryCacheInMemory } from '../inMemory/TelemetryCacheInMemory';\n/**\n * InLocal storage factory for standalone client-side SplitFactory\n */\nexport function InLocalStorage(options) {\n    if (options === void 0) { options = {}; }\n    var prefix = validatePrefix(options.prefix);\n    function InLocalStorageCSFactory(params) {\n        // Fallback to InMemoryStorage if LocalStorage API is not available\n        if (!isLocalStorageAvailable()) {\n            params.log.warn(LOG_PREFIX + 'LocalStorage API is unavailable. Falling back to default MEMORY storage');\n            return InMemoryStorageCSFactory(params);\n        }\n        var log = params.log;\n        var keys = new KeyBuilderCS(prefix, params.matchingKey);\n        var expirationTimestamp = Date.now() - DEFAULT_CACHE_EXPIRATION_IN_MILLIS;\n        return {\n            splits: new SplitsCacheInLocal(log, keys, expirationTimestamp, params.splitFiltersValidation),\n            segments: new MySegmentsCacheInLocal(log, keys),\n            impressions: new ImpressionsCacheInMemory(params.impressionsQueueSize),\n            impressionCounts: params.optimize ? new ImpressionCountsCacheInMemory() : undefined,\n            events: new EventsCacheInMemory(params.eventsQueueSize),\n            telemetry: params.mode !== LOCALHOST_MODE && shouldRecordTelemetry() ? new TelemetryCacheInMemory() : undefined,\n            destroy: function () {\n                this.splits = new SplitsCacheInMemory();\n                this.segments = new MySegmentsCacheInMemory();\n                this.impressions.clear();\n                this.impressionCounts && this.impressionCounts.clear();\n                this.events.clear();\n            },\n            // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).\n            shared: function (matchingKey) {\n                var childKeysBuilder = new KeyBuilderCS(prefix, matchingKey);\n                return {\n                    splits: this.splits,\n                    segments: new MySegmentsCacheInLocal(log, childKeysBuilder),\n                    impressions: this.impressions,\n                    impressionCounts: this.impressionCounts,\n                    events: this.events,\n                    telemetry: this.telemetry,\n                    destroy: function () {\n                        this.splits = new SplitsCacheInMemory();\n                        this.segments = new MySegmentsCacheInMemory();\n                    }\n                };\n            },\n        };\n    }\n    InLocalStorageCSFactory.type = STORAGE_LOCALSTORAGE;\n    return InLocalStorageCSFactory;\n}\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,sCAAsC;AAC/E,SAASC,6BAA6B,QAAQ,2CAA2C;AACzF,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,uBAAuB,QAAQ,yCAAyC;AACjF,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,uBAAuB,QAAQ,qCAAqC;AAC7E,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,kCAAkC,QAAQ,+BAA+B;AAClF,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,SAASC,UAAU,QAAQ,aAAa;AACxC,SAASC,cAAc,EAAEC,oBAAoB,QAAQ,uBAAuB;AAC5E,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,oCAAoC;AAClG;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,OAAO,EAAE;EACpC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,MAAM,GAAGhB,cAAc,CAACe,OAAO,CAACC,MAAM,CAAC;EAC3C,SAASC,uBAAuB,CAACC,MAAM,EAAE;IACrC;IACA,IAAI,CAAChB,uBAAuB,EAAE,EAAE;MAC5BgB,MAAM,CAACC,GAAG,CAACC,IAAI,CAACX,UAAU,GAAG,yEAAyE,CAAC;MACvG,OAAOD,wBAAwB,CAACU,MAAM,CAAC;IAC3C;IACA,IAAIC,GAAG,GAAGD,MAAM,CAACC,GAAG;IACpB,IAAIE,IAAI,GAAG,IAAIpB,YAAY,CAACe,MAAM,EAAEE,MAAM,CAACI,WAAW,CAAC;IACvD,IAAIC,mBAAmB,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGlB,kCAAkC;IACzE,OAAO;MACHmB,MAAM,EAAE,IAAIvB,kBAAkB,CAACgB,GAAG,EAAEE,IAAI,EAAEE,mBAAmB,EAAEL,MAAM,CAACS,sBAAsB,CAAC;MAC7FC,QAAQ,EAAE,IAAIxB,sBAAsB,CAACe,GAAG,EAAEE,IAAI,CAAC;MAC/CQ,WAAW,EAAE,IAAIhC,wBAAwB,CAACqB,MAAM,CAACY,oBAAoB,CAAC;MACtEC,gBAAgB,EAAEb,MAAM,CAACc,QAAQ,GAAG,IAAIlC,6BAA6B,EAAE,GAAGmC,SAAS;MACnFC,MAAM,EAAE,IAAInC,mBAAmB,CAACmB,MAAM,CAACiB,eAAe,CAAC;MACvDC,SAAS,EAAElB,MAAM,CAACmB,IAAI,KAAK3B,cAAc,IAAIE,qBAAqB,EAAE,GAAG,IAAIC,sBAAsB,EAAE,GAAGoB,SAAS;MAC/GK,OAAO,EAAE,YAAY;QACjB,IAAI,CAACZ,MAAM,GAAG,IAAIpB,mBAAmB,EAAE;QACvC,IAAI,CAACsB,QAAQ,GAAG,IAAIvB,uBAAuB,EAAE;QAC7C,IAAI,CAACwB,WAAW,CAACU,KAAK,EAAE;QACxB,IAAI,CAACR,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,CAACQ,KAAK,EAAE;QACtD,IAAI,CAACL,MAAM,CAACK,KAAK,EAAE;MACvB,CAAC;MACD;MACAC,MAAM,EAAE,UAAUlB,WAAW,EAAE;QAC3B,IAAImB,gBAAgB,GAAG,IAAIxC,YAAY,CAACe,MAAM,EAAEM,WAAW,CAAC;QAC5D,OAAO;UACHI,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBE,QAAQ,EAAE,IAAIxB,sBAAsB,CAACe,GAAG,EAAEsB,gBAAgB,CAAC;UAC3DZ,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BE,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;UACvCG,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBE,SAAS,EAAE,IAAI,CAACA,SAAS;UACzBE,OAAO,EAAE,YAAY;YACjB,IAAI,CAACZ,MAAM,GAAG,IAAIpB,mBAAmB,EAAE;YACvC,IAAI,CAACsB,QAAQ,GAAG,IAAIvB,uBAAuB,EAAE;UACjD;QACJ,CAAC;MACL;IACJ,CAAC;EACL;EACAY,uBAAuB,CAACyB,IAAI,GAAG/B,oBAAoB;EACnD,OAAOM,uBAAuB;AAClC"},"metadata":{},"sourceType":"module"}