{"ast":null,"code":"import { WARN_INTEGRATION_INVALID } from '../../../logger/constants';\n/**\n * This function validates `settings.integrations` object\n *\n * @param {any} settings config object provided by the user to initialize the sdk\n * @param {function} integrationValidator filter used to remove invalid integration items\n * @param {string} extraWarning optional string used to better describe why an item might be invalid\n *\n * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.\n */\nexport function validateIntegrations(settings, integrationValidator, extraWarning) {\n  var integrations = settings.integrations,\n    log = settings.log;\n  // If integrations is not an array or an empty array, we return an empty array (no integrations).\n  if (!Array.isArray(integrations) || integrations.length === 0) return [];\n  // We remove invalid integration items\n  var validIntegrations = integrations.filter(integrationValidator);\n  // Log a warning if at least one item is invalid\n  var invalids = integrations.length - validIntegrations.length;\n  if (invalids) log.warn(WARN_INTEGRATION_INVALID, [invalids, extraWarning || '']);\n  return validIntegrations;\n}","map":{"version":3,"names":["WARN_INTEGRATION_INVALID","validateIntegrations","settings","integrationValidator","extraWarning","integrations","log","Array","isArray","length","validIntegrations","filter","invalids","warn"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/settingsValidation/integrations/common.js"],"sourcesContent":["import { WARN_INTEGRATION_INVALID } from '../../../logger/constants';\n/**\n * This function validates `settings.integrations` object\n *\n * @param {any} settings config object provided by the user to initialize the sdk\n * @param {function} integrationValidator filter used to remove invalid integration items\n * @param {string} extraWarning optional string used to better describe why an item might be invalid\n *\n * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.\n */\nexport function validateIntegrations(settings, integrationValidator, extraWarning) {\n    var integrations = settings.integrations, log = settings.log;\n    // If integrations is not an array or an empty array, we return an empty array (no integrations).\n    if (!Array.isArray(integrations) || integrations.length === 0)\n        return [];\n    // We remove invalid integration items\n    var validIntegrations = integrations.filter(integrationValidator);\n    // Log a warning if at least one item is invalid\n    var invalids = integrations.length - validIntegrations.length;\n    if (invalids)\n        log.warn(WARN_INTEGRATION_INVALID, [invalids, extraWarning || '']);\n    return validIntegrations;\n}\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,2BAA2B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,CAACC,QAAQ,EAAEC,oBAAoB,EAAEC,YAAY,EAAE;EAC/E,IAAIC,YAAY,GAAGH,QAAQ,CAACG,YAAY;IAAEC,GAAG,GAAGJ,QAAQ,CAACI,GAAG;EAC5D;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,IAAIA,YAAY,CAACI,MAAM,KAAK,CAAC,EACzD,OAAO,EAAE;EACb;EACA,IAAIC,iBAAiB,GAAGL,YAAY,CAACM,MAAM,CAACR,oBAAoB,CAAC;EACjE;EACA,IAAIS,QAAQ,GAAGP,YAAY,CAACI,MAAM,GAAGC,iBAAiB,CAACD,MAAM;EAC7D,IAAIG,QAAQ,EACRN,GAAG,CAACO,IAAI,CAACb,wBAAwB,EAAE,CAACY,QAAQ,EAAER,YAAY,IAAI,EAAE,CAAC,CAAC;EACtE,OAAOM,iBAAiB;AAC5B"},"metadata":{},"sourceType":"module"}