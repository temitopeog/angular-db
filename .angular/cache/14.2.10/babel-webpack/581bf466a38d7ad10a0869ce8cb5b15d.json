{"ast":null,"code":"import { submitterFactory, firstPushWindowDecorator } from './submitter';\nimport { SUBMITTERS_PUSH_FULL_QUEUE } from '../../logger/constants';\nvar DATA_NAME = 'events';\n/**\n * Submitter that periodically posts tracked events\n */\nexport function eventsSubmitterFactory(params) {\n  var _a = params.settings,\n    log = _a.log,\n    eventsPushRate = _a.scheduler.eventsPushRate,\n    eventsFirstPushWindow = _a.startup.eventsFirstPushWindow,\n    postEventsBulk = params.splitApi.postEventsBulk,\n    events = params.storage.events;\n  // don't retry events.\n  var submitter = submitterFactory(log, postEventsBulk, events, eventsPushRate, DATA_NAME);\n  // Set a timer for the first push window of events.\n  if (eventsFirstPushWindow > 0) submitter = firstPushWindowDecorator(submitter, eventsFirstPushWindow);\n  // register events submitter to be executed when events cache is full\n  events.setOnFullQueueCb(function () {\n    if (submitter.isRunning()) {\n      log.info(SUBMITTERS_PUSH_FULL_QUEUE, [DATA_NAME]);\n      submitter.execute();\n    }\n    // If submitter is stopped (e.g., user consent declined or unknown, or app state offline), we don't send the data.\n    // Data will be sent when submitter is resumed.\n  });\n\n  return submitter;\n}","map":{"version":3,"names":["submitterFactory","firstPushWindowDecorator","SUBMITTERS_PUSH_FULL_QUEUE","DATA_NAME","eventsSubmitterFactory","params","_a","settings","log","eventsPushRate","scheduler","eventsFirstPushWindow","startup","postEventsBulk","splitApi","events","storage","submitter","setOnFullQueueCb","isRunning","info","execute"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/submitters/eventsSubmitter.js"],"sourcesContent":["import { submitterFactory, firstPushWindowDecorator } from './submitter';\nimport { SUBMITTERS_PUSH_FULL_QUEUE } from '../../logger/constants';\nvar DATA_NAME = 'events';\n/**\n * Submitter that periodically posts tracked events\n */\nexport function eventsSubmitterFactory(params) {\n    var _a = params.settings, log = _a.log, eventsPushRate = _a.scheduler.eventsPushRate, eventsFirstPushWindow = _a.startup.eventsFirstPushWindow, postEventsBulk = params.splitApi.postEventsBulk, events = params.storage.events;\n    // don't retry events.\n    var submitter = submitterFactory(log, postEventsBulk, events, eventsPushRate, DATA_NAME);\n    // Set a timer for the first push window of events.\n    if (eventsFirstPushWindow > 0)\n        submitter = firstPushWindowDecorator(submitter, eventsFirstPushWindow);\n    // register events submitter to be executed when events cache is full\n    events.setOnFullQueueCb(function () {\n        if (submitter.isRunning()) {\n            log.info(SUBMITTERS_PUSH_FULL_QUEUE, [DATA_NAME]);\n            submitter.execute();\n        }\n        // If submitter is stopped (e.g., user consent declined or unknown, or app state offline), we don't send the data.\n        // Data will be sent when submitter is resumed.\n    });\n    return submitter;\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,wBAAwB,QAAQ,aAAa;AACxE,SAASC,0BAA0B,QAAQ,wBAAwB;AACnE,IAAIC,SAAS,GAAG,QAAQ;AACxB;AACA;AACA;AACA,OAAO,SAASC,sBAAsB,CAACC,MAAM,EAAE;EAC3C,IAAIC,EAAE,GAAGD,MAAM,CAACE,QAAQ;IAAEC,GAAG,GAAGF,EAAE,CAACE,GAAG;IAAEC,cAAc,GAAGH,EAAE,CAACI,SAAS,CAACD,cAAc;IAAEE,qBAAqB,GAAGL,EAAE,CAACM,OAAO,CAACD,qBAAqB;IAAEE,cAAc,GAAGR,MAAM,CAACS,QAAQ,CAACD,cAAc;IAAEE,MAAM,GAAGV,MAAM,CAACW,OAAO,CAACD,MAAM;EAC/N;EACA,IAAIE,SAAS,GAAGjB,gBAAgB,CAACQ,GAAG,EAAEK,cAAc,EAAEE,MAAM,EAAEN,cAAc,EAAEN,SAAS,CAAC;EACxF;EACA,IAAIQ,qBAAqB,GAAG,CAAC,EACzBM,SAAS,GAAGhB,wBAAwB,CAACgB,SAAS,EAAEN,qBAAqB,CAAC;EAC1E;EACAI,MAAM,CAACG,gBAAgB,CAAC,YAAY;IAChC,IAAID,SAAS,CAACE,SAAS,EAAE,EAAE;MACvBX,GAAG,CAACY,IAAI,CAAClB,0BAA0B,EAAE,CAACC,SAAS,CAAC,CAAC;MACjDc,SAAS,CAACI,OAAO,EAAE;IACvB;IACA;IACA;EACJ,CAAC,CAAC;;EACF,OAAOJ,SAAS;AACpB"},"metadata":{},"sourceType":"module"}