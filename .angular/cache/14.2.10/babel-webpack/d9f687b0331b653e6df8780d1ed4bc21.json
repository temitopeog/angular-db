{"ast":null,"code":"import { ERROR_NOT_BOOLEAN, USER_CONSENT_UPDATED, USER_CONSENT_NOT_UPDATED, USER_CONSENT_INITIAL } from '../logger/constants';\nimport { isConsentGranted } from './index';\nimport { CONSENT_GRANTED, CONSENT_DECLINED, CONSENT_UNKNOWN } from '../utils/constants';\nimport { isBoolean } from '../utils/lang';\n// User consent enum\nvar ConsentStatus = {\n  GRANTED: CONSENT_GRANTED,\n  DECLINED: CONSENT_DECLINED,\n  UNKNOWN: CONSENT_UNKNOWN\n};\n/**\n * The public user consent API exposed via SplitFactory, used to control if the SDK tracks and sends impressions and events or not.\n */\nexport function createUserConsentAPI(params) {\n  var settings = params.settings,\n    log = params.settings.log,\n    syncManager = params.syncManager,\n    _a = params.storage,\n    events = _a.events,\n    impressions = _a.impressions,\n    impressionCounts = _a.impressionCounts;\n  if (!isConsentGranted(settings)) log.info(USER_CONSENT_INITIAL, [settings.userConsent]);\n  return {\n    setStatus: function (consent) {\n      var _a, _b;\n      // validate input param\n      if (!isBoolean(consent)) {\n        log.warn(ERROR_NOT_BOOLEAN, ['UserConsent.setStatus']);\n        return false;\n      }\n      var newConsentStatus = consent ? CONSENT_GRANTED : CONSENT_DECLINED;\n      if (settings.userConsent !== newConsentStatus) {\n        log.info(USER_CONSENT_UPDATED, [settings.userConsent, newConsentStatus]); // @ts-ignore, modify readonly prop\n        settings.userConsent = newConsentStatus;\n        if (consent) {\n          // resumes submitters if transitioning to GRANTED\n          (_a = syncManager === null || syncManager === void 0 ? void 0 : syncManager.submitterManager) === null || _a === void 0 ? void 0 : _a.start();\n        } else {\n          // pauses submitters (except telemetry), and drops tracked data if transitioning to DECLINED\n          (_b = syncManager === null || syncManager === void 0 ? void 0 : syncManager.submitterManager) === null || _b === void 0 ? void 0 : _b.stop(true);\n          // @ts-ignore, clear method is present in storage for standalone and partial consumer mode\n          if (events.clear) events.clear(); // @ts-ignore\n          if (impressions.clear) impressions.clear();\n          if (impressionCounts) impressionCounts.clear();\n        }\n      } else {\n        log.info(USER_CONSENT_NOT_UPDATED, [newConsentStatus]);\n      }\n      return true;\n    },\n    getStatus: function () {\n      return settings.userConsent;\n    },\n    Status: ConsentStatus\n  };\n}","map":{"version":3,"names":["ERROR_NOT_BOOLEAN","USER_CONSENT_UPDATED","USER_CONSENT_NOT_UPDATED","USER_CONSENT_INITIAL","isConsentGranted","CONSENT_GRANTED","CONSENT_DECLINED","CONSENT_UNKNOWN","isBoolean","ConsentStatus","GRANTED","DECLINED","UNKNOWN","createUserConsentAPI","params","settings","log","syncManager","_a","storage","events","impressions","impressionCounts","info","userConsent","setStatus","consent","_b","warn","newConsentStatus","submitterManager","start","stop","clear","getStatus","Status"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/consent/sdkUserConsent.js"],"sourcesContent":["import { ERROR_NOT_BOOLEAN, USER_CONSENT_UPDATED, USER_CONSENT_NOT_UPDATED, USER_CONSENT_INITIAL } from '../logger/constants';\nimport { isConsentGranted } from './index';\nimport { CONSENT_GRANTED, CONSENT_DECLINED, CONSENT_UNKNOWN } from '../utils/constants';\nimport { isBoolean } from '../utils/lang';\n// User consent enum\nvar ConsentStatus = {\n    GRANTED: CONSENT_GRANTED,\n    DECLINED: CONSENT_DECLINED,\n    UNKNOWN: CONSENT_UNKNOWN,\n};\n/**\n * The public user consent API exposed via SplitFactory, used to control if the SDK tracks and sends impressions and events or not.\n */\nexport function createUserConsentAPI(params) {\n    var settings = params.settings, log = params.settings.log, syncManager = params.syncManager, _a = params.storage, events = _a.events, impressions = _a.impressions, impressionCounts = _a.impressionCounts;\n    if (!isConsentGranted(settings))\n        log.info(USER_CONSENT_INITIAL, [settings.userConsent]);\n    return {\n        setStatus: function (consent) {\n            var _a, _b;\n            // validate input param\n            if (!isBoolean(consent)) {\n                log.warn(ERROR_NOT_BOOLEAN, ['UserConsent.setStatus']);\n                return false;\n            }\n            var newConsentStatus = consent ? CONSENT_GRANTED : CONSENT_DECLINED;\n            if (settings.userConsent !== newConsentStatus) {\n                log.info(USER_CONSENT_UPDATED, [settings.userConsent, newConsentStatus]); // @ts-ignore, modify readonly prop\n                settings.userConsent = newConsentStatus;\n                if (consent) { // resumes submitters if transitioning to GRANTED\n                    (_a = syncManager === null || syncManager === void 0 ? void 0 : syncManager.submitterManager) === null || _a === void 0 ? void 0 : _a.start();\n                }\n                else { // pauses submitters (except telemetry), and drops tracked data if transitioning to DECLINED\n                    (_b = syncManager === null || syncManager === void 0 ? void 0 : syncManager.submitterManager) === null || _b === void 0 ? void 0 : _b.stop(true);\n                    // @ts-ignore, clear method is present in storage for standalone and partial consumer mode\n                    if (events.clear)\n                        events.clear(); // @ts-ignore\n                    if (impressions.clear)\n                        impressions.clear();\n                    if (impressionCounts)\n                        impressionCounts.clear();\n                }\n            }\n            else {\n                log.info(USER_CONSENT_NOT_UPDATED, [newConsentStatus]);\n            }\n            return true;\n        },\n        getStatus: function () {\n            return settings.userConsent;\n        },\n        Status: ConsentStatus\n    };\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,oBAAoB,EAAEC,wBAAwB,EAAEC,oBAAoB,QAAQ,qBAAqB;AAC7H,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,SAASC,eAAe,EAAEC,gBAAgB,EAAEC,eAAe,QAAQ,oBAAoB;AACvF,SAASC,SAAS,QAAQ,eAAe;AACzC;AACA,IAAIC,aAAa,GAAG;EAChBC,OAAO,EAAEL,eAAe;EACxBM,QAAQ,EAAEL,gBAAgB;EAC1BM,OAAO,EAAEL;AACb,CAAC;AACD;AACA;AACA;AACA,OAAO,SAASM,oBAAoB,CAACC,MAAM,EAAE;EACzC,IAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAQ;IAAEC,GAAG,GAAGF,MAAM,CAACC,QAAQ,CAACC,GAAG;IAAEC,WAAW,GAAGH,MAAM,CAACG,WAAW;IAAEC,EAAE,GAAGJ,MAAM,CAACK,OAAO;IAAEC,MAAM,GAAGF,EAAE,CAACE,MAAM;IAAEC,WAAW,GAAGH,EAAE,CAACG,WAAW;IAAEC,gBAAgB,GAAGJ,EAAE,CAACI,gBAAgB;EAC1M,IAAI,CAAClB,gBAAgB,CAACW,QAAQ,CAAC,EAC3BC,GAAG,CAACO,IAAI,CAACpB,oBAAoB,EAAE,CAACY,QAAQ,CAACS,WAAW,CAAC,CAAC;EAC1D,OAAO;IACHC,SAAS,EAAE,UAAUC,OAAO,EAAE;MAC1B,IAAIR,EAAE,EAAES,EAAE;MACV;MACA,IAAI,CAACnB,SAAS,CAACkB,OAAO,CAAC,EAAE;QACrBV,GAAG,CAACY,IAAI,CAAC5B,iBAAiB,EAAE,CAAC,uBAAuB,CAAC,CAAC;QACtD,OAAO,KAAK;MAChB;MACA,IAAI6B,gBAAgB,GAAGH,OAAO,GAAGrB,eAAe,GAAGC,gBAAgB;MACnE,IAAIS,QAAQ,CAACS,WAAW,KAAKK,gBAAgB,EAAE;QAC3Cb,GAAG,CAACO,IAAI,CAACtB,oBAAoB,EAAE,CAACc,QAAQ,CAACS,WAAW,EAAEK,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC1Ed,QAAQ,CAACS,WAAW,GAAGK,gBAAgB;QACvC,IAAIH,OAAO,EAAE;UAAE;UACX,CAACR,EAAE,GAAGD,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACa,gBAAgB,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACa,KAAK,EAAE;QACjJ,CAAC,MACI;UAAE;UACH,CAACJ,EAAE,GAAGV,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACa,gBAAgB,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,IAAI,CAAC,IAAI,CAAC;UAChJ;UACA,IAAIZ,MAAM,CAACa,KAAK,EACZb,MAAM,CAACa,KAAK,EAAE,CAAC,CAAC;UACpB,IAAIZ,WAAW,CAACY,KAAK,EACjBZ,WAAW,CAACY,KAAK,EAAE;UACvB,IAAIX,gBAAgB,EAChBA,gBAAgB,CAACW,KAAK,EAAE;QAChC;MACJ,CAAC,MACI;QACDjB,GAAG,CAACO,IAAI,CAACrB,wBAAwB,EAAE,CAAC2B,gBAAgB,CAAC,CAAC;MAC1D;MACA,OAAO,IAAI;IACf,CAAC;IACDK,SAAS,EAAE,YAAY;MACnB,OAAOnB,QAAQ,CAACS,WAAW;IAC/B,CAAC;IACDW,MAAM,EAAE1B;EACZ,CAAC;AACL"},"metadata":{},"sourceType":"module"}