{"ast":null,"code":"import { findLatencyIndex } from '../findLatencyIndex';\nvar MAX_STREAMING_EVENTS = 20;\nvar MAX_TAGS = 10;\nfunction newBuckets() {\n  // MAX_LATENCY_BUCKET_COUNT (length) is 23;\n  return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n}\nvar ACCEPTANCE_RANGE = 0.001;\n/**\n * Used on client-side. 0.1% of instances will track telemetry\n */\nexport function shouldRecordTelemetry() {\n  return Math.random() <= ACCEPTANCE_RANGE;\n}\nvar TelemetryCacheInMemory = /** @class */function () {\n  function TelemetryCacheInMemory() {\n    this.notReadyUsage = 0;\n    this.impressionStats = [0, 0, 0];\n    this.eventStats = [0, 0];\n    // @ts-expect-error\n    this.lastSync = {};\n    // @ts-expect-error\n    this.httpErrors = {};\n    // @ts-expect-error\n    this.httpLatencies = {};\n    this.authRejections = 0;\n    this.tokenRefreshes = 0;\n    this.streamingEvents = [];\n    this.tags = [];\n    // @ts-expect-error\n    this.exceptions = {};\n    // @ts-expect-error\n    this.latencies = {};\n  }\n  TelemetryCacheInMemory.prototype.getTimeUntilReady = function () {\n    return this.timeUntilReady;\n  };\n  TelemetryCacheInMemory.prototype.recordTimeUntilReady = function (ms) {\n    this.timeUntilReady = ms;\n  };\n  TelemetryCacheInMemory.prototype.getTimeUntilReadyFromCache = function () {\n    return this.timeUntilReadyFromCache;\n  };\n  TelemetryCacheInMemory.prototype.recordTimeUntilReadyFromCache = function (ms) {\n    this.timeUntilReadyFromCache = ms;\n  };\n  TelemetryCacheInMemory.prototype.getNonReadyUsage = function () {\n    return this.notReadyUsage;\n  };\n  TelemetryCacheInMemory.prototype.recordNonReadyUsage = function () {\n    this.notReadyUsage++;\n  };\n  TelemetryCacheInMemory.prototype.getImpressionStats = function (type) {\n    return this.impressionStats[type];\n  };\n  TelemetryCacheInMemory.prototype.recordImpressionStats = function (type, count) {\n    this.impressionStats[type] += count;\n  };\n  TelemetryCacheInMemory.prototype.getEventStats = function (type) {\n    return this.eventStats[type];\n  };\n  TelemetryCacheInMemory.prototype.recordEventStats = function (type, count) {\n    this.eventStats[type] += count;\n  };\n  TelemetryCacheInMemory.prototype.getLastSynchronization = function () {\n    return this.lastSync;\n  };\n  TelemetryCacheInMemory.prototype.recordSuccessfulSync = function (resource, timeMs) {\n    this.lastSync[resource] = timeMs;\n  };\n  TelemetryCacheInMemory.prototype.popHttpErrors = function () {\n    var result = this.httpErrors; // @ts-expect-error\n    this.httpErrors = {};\n    return result;\n  };\n  TelemetryCacheInMemory.prototype.recordHttpError = function (resource, status) {\n    if (!this.httpErrors[resource]) this.httpErrors[resource] = {};\n    if (!this.httpErrors[resource][status]) {\n      this.httpErrors[resource][status] = 1;\n    } else {\n      this.httpErrors[resource][status]++;\n    }\n  };\n  TelemetryCacheInMemory.prototype.popHttpLatencies = function () {\n    var result = this.httpLatencies; // @ts-expect-error\n    this.httpLatencies = {};\n    return result;\n  };\n  TelemetryCacheInMemory.prototype.recordHttpLatency = function (resource, latencyMs) {\n    if (!this.httpLatencies[resource]) {\n      this.httpLatencies[resource] = newBuckets();\n    }\n    this.httpLatencies[resource][findLatencyIndex(latencyMs)]++;\n  };\n  TelemetryCacheInMemory.prototype.popAuthRejections = function () {\n    var result = this.authRejections;\n    this.authRejections = 0;\n    return result;\n  };\n  TelemetryCacheInMemory.prototype.recordAuthRejections = function () {\n    this.authRejections++;\n  };\n  TelemetryCacheInMemory.prototype.popTokenRefreshes = function () {\n    var result = this.tokenRefreshes;\n    this.tokenRefreshes = 0;\n    return result;\n  };\n  TelemetryCacheInMemory.prototype.recordTokenRefreshes = function () {\n    this.tokenRefreshes++;\n  };\n  TelemetryCacheInMemory.prototype.popStreamingEvents = function () {\n    return this.streamingEvents.splice(0);\n  };\n  TelemetryCacheInMemory.prototype.recordStreamingEvents = function (streamingEvent) {\n    if (this.streamingEvents.length < MAX_STREAMING_EVENTS) {\n      this.streamingEvents.push(streamingEvent);\n    }\n  };\n  TelemetryCacheInMemory.prototype.popTags = function () {\n    return this.tags.splice(0);\n  };\n  TelemetryCacheInMemory.prototype.addTag = function (tag) {\n    if (this.tags.length < MAX_TAGS) {\n      this.tags.push(tag);\n    }\n  };\n  TelemetryCacheInMemory.prototype.getSessionLength = function () {\n    return this.sessionLength;\n  };\n  TelemetryCacheInMemory.prototype.recordSessionLength = function (ms) {\n    this.sessionLength = ms;\n  };\n  TelemetryCacheInMemory.prototype.popExceptions = function () {\n    var result = this.exceptions; // @ts-expect-error\n    this.exceptions = {};\n    return result;\n  };\n  TelemetryCacheInMemory.prototype.recordException = function (method) {\n    if (!this.exceptions[method]) {\n      this.exceptions[method] = 1;\n    } else {\n      this.exceptions[method]++;\n    }\n  };\n  TelemetryCacheInMemory.prototype.popLatencies = function () {\n    var result = this.latencies; // @ts-expect-error\n    this.latencies = {};\n    return result;\n  };\n  TelemetryCacheInMemory.prototype.recordLatency = function (method, latencyMs) {\n    if (!this.latencies[method]) {\n      this.latencies[method] = newBuckets();\n    }\n    this.latencies[method][findLatencyIndex(latencyMs)]++;\n  };\n  return TelemetryCacheInMemory;\n}();\nexport { TelemetryCacheInMemory };","map":{"version":3,"names":["findLatencyIndex","MAX_STREAMING_EVENTS","MAX_TAGS","newBuckets","ACCEPTANCE_RANGE","shouldRecordTelemetry","Math","random","TelemetryCacheInMemory","notReadyUsage","impressionStats","eventStats","lastSync","httpErrors","httpLatencies","authRejections","tokenRefreshes","streamingEvents","tags","exceptions","latencies","prototype","getTimeUntilReady","timeUntilReady","recordTimeUntilReady","ms","getTimeUntilReadyFromCache","timeUntilReadyFromCache","recordTimeUntilReadyFromCache","getNonReadyUsage","recordNonReadyUsage","getImpressionStats","type","recordImpressionStats","count","getEventStats","recordEventStats","getLastSynchronization","recordSuccessfulSync","resource","timeMs","popHttpErrors","result","recordHttpError","status","popHttpLatencies","recordHttpLatency","latencyMs","popAuthRejections","recordAuthRejections","popTokenRefreshes","recordTokenRefreshes","popStreamingEvents","splice","recordStreamingEvents","streamingEvent","length","push","popTags","addTag","tag","getSessionLength","sessionLength","recordSessionLength","popExceptions","recordException","method","popLatencies","recordLatency"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inMemory/TelemetryCacheInMemory.js"],"sourcesContent":["import { findLatencyIndex } from '../findLatencyIndex';\nvar MAX_STREAMING_EVENTS = 20;\nvar MAX_TAGS = 10;\nfunction newBuckets() {\n    // MAX_LATENCY_BUCKET_COUNT (length) is 23;\n    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n}\nvar ACCEPTANCE_RANGE = 0.001;\n/**\n * Used on client-side. 0.1% of instances will track telemetry\n */\nexport function shouldRecordTelemetry() {\n    return Math.random() <= ACCEPTANCE_RANGE;\n}\nvar TelemetryCacheInMemory = /** @class */ (function () {\n    function TelemetryCacheInMemory() {\n        this.notReadyUsage = 0;\n        this.impressionStats = [0, 0, 0];\n        this.eventStats = [0, 0];\n        // @ts-expect-error\n        this.lastSync = {};\n        // @ts-expect-error\n        this.httpErrors = {};\n        // @ts-expect-error\n        this.httpLatencies = {};\n        this.authRejections = 0;\n        this.tokenRefreshes = 0;\n        this.streamingEvents = [];\n        this.tags = [];\n        // @ts-expect-error\n        this.exceptions = {};\n        // @ts-expect-error\n        this.latencies = {};\n    }\n    TelemetryCacheInMemory.prototype.getTimeUntilReady = function () {\n        return this.timeUntilReady;\n    };\n    TelemetryCacheInMemory.prototype.recordTimeUntilReady = function (ms) {\n        this.timeUntilReady = ms;\n    };\n    TelemetryCacheInMemory.prototype.getTimeUntilReadyFromCache = function () {\n        return this.timeUntilReadyFromCache;\n    };\n    TelemetryCacheInMemory.prototype.recordTimeUntilReadyFromCache = function (ms) {\n        this.timeUntilReadyFromCache = ms;\n    };\n    TelemetryCacheInMemory.prototype.getNonReadyUsage = function () {\n        return this.notReadyUsage;\n    };\n    TelemetryCacheInMemory.prototype.recordNonReadyUsage = function () {\n        this.notReadyUsage++;\n    };\n    TelemetryCacheInMemory.prototype.getImpressionStats = function (type) {\n        return this.impressionStats[type];\n    };\n    TelemetryCacheInMemory.prototype.recordImpressionStats = function (type, count) {\n        this.impressionStats[type] += count;\n    };\n    TelemetryCacheInMemory.prototype.getEventStats = function (type) {\n        return this.eventStats[type];\n    };\n    TelemetryCacheInMemory.prototype.recordEventStats = function (type, count) {\n        this.eventStats[type] += count;\n    };\n    TelemetryCacheInMemory.prototype.getLastSynchronization = function () {\n        return this.lastSync;\n    };\n    TelemetryCacheInMemory.prototype.recordSuccessfulSync = function (resource, timeMs) {\n        this.lastSync[resource] = timeMs;\n    };\n    TelemetryCacheInMemory.prototype.popHttpErrors = function () {\n        var result = this.httpErrors; // @ts-expect-error\n        this.httpErrors = {};\n        return result;\n    };\n    TelemetryCacheInMemory.prototype.recordHttpError = function (resource, status) {\n        if (!this.httpErrors[resource])\n            this.httpErrors[resource] = {};\n        if (!this.httpErrors[resource][status]) {\n            this.httpErrors[resource][status] = 1;\n        }\n        else {\n            this.httpErrors[resource][status]++;\n        }\n    };\n    TelemetryCacheInMemory.prototype.popHttpLatencies = function () {\n        var result = this.httpLatencies; // @ts-expect-error\n        this.httpLatencies = {};\n        return result;\n    };\n    TelemetryCacheInMemory.prototype.recordHttpLatency = function (resource, latencyMs) {\n        if (!this.httpLatencies[resource]) {\n            this.httpLatencies[resource] = newBuckets();\n        }\n        this.httpLatencies[resource][findLatencyIndex(latencyMs)]++;\n    };\n    TelemetryCacheInMemory.prototype.popAuthRejections = function () {\n        var result = this.authRejections;\n        this.authRejections = 0;\n        return result;\n    };\n    TelemetryCacheInMemory.prototype.recordAuthRejections = function () {\n        this.authRejections++;\n    };\n    TelemetryCacheInMemory.prototype.popTokenRefreshes = function () {\n        var result = this.tokenRefreshes;\n        this.tokenRefreshes = 0;\n        return result;\n    };\n    TelemetryCacheInMemory.prototype.recordTokenRefreshes = function () {\n        this.tokenRefreshes++;\n    };\n    TelemetryCacheInMemory.prototype.popStreamingEvents = function () {\n        return this.streamingEvents.splice(0);\n    };\n    TelemetryCacheInMemory.prototype.recordStreamingEvents = function (streamingEvent) {\n        if (this.streamingEvents.length < MAX_STREAMING_EVENTS) {\n            this.streamingEvents.push(streamingEvent);\n        }\n    };\n    TelemetryCacheInMemory.prototype.popTags = function () {\n        return this.tags.splice(0);\n    };\n    TelemetryCacheInMemory.prototype.addTag = function (tag) {\n        if (this.tags.length < MAX_TAGS) {\n            this.tags.push(tag);\n        }\n    };\n    TelemetryCacheInMemory.prototype.getSessionLength = function () {\n        return this.sessionLength;\n    };\n    TelemetryCacheInMemory.prototype.recordSessionLength = function (ms) {\n        this.sessionLength = ms;\n    };\n    TelemetryCacheInMemory.prototype.popExceptions = function () {\n        var result = this.exceptions; // @ts-expect-error\n        this.exceptions = {};\n        return result;\n    };\n    TelemetryCacheInMemory.prototype.recordException = function (method) {\n        if (!this.exceptions[method]) {\n            this.exceptions[method] = 1;\n        }\n        else {\n            this.exceptions[method]++;\n        }\n    };\n    TelemetryCacheInMemory.prototype.popLatencies = function () {\n        var result = this.latencies; // @ts-expect-error\n        this.latencies = {};\n        return result;\n    };\n    TelemetryCacheInMemory.prototype.recordLatency = function (method, latencyMs) {\n        if (!this.latencies[method]) {\n            this.latencies[method] = newBuckets();\n        }\n        this.latencies[method][findLatencyIndex(latencyMs)]++;\n    };\n    return TelemetryCacheInMemory;\n}());\nexport { TelemetryCacheInMemory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}