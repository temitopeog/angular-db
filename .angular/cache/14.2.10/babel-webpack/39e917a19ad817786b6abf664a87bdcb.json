{"ast":null,"code":"import { isString, isFiniteNumber, isBoolean } from '../../utils/lang';\nexport function validateAttribute(log, attributeKey, attributeValue, method) {\n  if (!isString(attributeKey) || attributeKey.length === 0) {\n    log.warn(method + \": you passed an invalid attribute name, attribute name must be a non-empty string.\");\n    return false;\n  }\n  var isStringVal = isString(attributeValue);\n  var isFiniteVal = isFiniteNumber(attributeValue);\n  var isBoolVal = isBoolean(attributeValue);\n  var isArrayVal = Array.isArray(attributeValue);\n  if (!(isStringVal || isFiniteVal || isBoolVal || isArrayVal)) {\n    // If it's not of valid type.\n    log.warn(method + \": you passed an invalid attribute value for \" + attributeKey + \". Acceptable types are: string, number, boolean and array of strings.\");\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["isString","isFiniteNumber","isBoolean","validateAttribute","log","attributeKey","attributeValue","method","length","warn","isStringVal","isFiniteVal","isBoolVal","isArrayVal","Array","isArray"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/inputValidation/attribute.js"],"sourcesContent":["import { isString, isFiniteNumber, isBoolean } from '../../utils/lang';\nexport function validateAttribute(log, attributeKey, attributeValue, method) {\n    if (!isString(attributeKey) || attributeKey.length === 0) {\n        log.warn(method + \": you passed an invalid attribute name, attribute name must be a non-empty string.\");\n        return false;\n    }\n    var isStringVal = isString(attributeValue);\n    var isFiniteVal = isFiniteNumber(attributeValue);\n    var isBoolVal = isBoolean(attributeValue);\n    var isArrayVal = Array.isArray(attributeValue);\n    if (!(isStringVal || isFiniteVal || isBoolVal || isArrayVal)) { // If it's not of valid type.\n        log.warn(method + \": you passed an invalid attribute value for \" + attributeKey + \". Acceptable types are: string, number, boolean and array of strings.\");\n        return false;\n    }\n    return true;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,cAAc,EAAEC,SAAS,QAAQ,kBAAkB;AACtE,OAAO,SAASC,iBAAiB,CAACC,GAAG,EAAEC,YAAY,EAAEC,cAAc,EAAEC,MAAM,EAAE;EACzE,IAAI,CAACP,QAAQ,CAACK,YAAY,CAAC,IAAIA,YAAY,CAACG,MAAM,KAAK,CAAC,EAAE;IACtDJ,GAAG,CAACK,IAAI,CAACF,MAAM,GAAG,oFAAoF,CAAC;IACvG,OAAO,KAAK;EAChB;EACA,IAAIG,WAAW,GAAGV,QAAQ,CAACM,cAAc,CAAC;EAC1C,IAAIK,WAAW,GAAGV,cAAc,CAACK,cAAc,CAAC;EAChD,IAAIM,SAAS,GAAGV,SAAS,CAACI,cAAc,CAAC;EACzC,IAAIO,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACT,cAAc,CAAC;EAC9C,IAAI,EAAEI,WAAW,IAAIC,WAAW,IAAIC,SAAS,IAAIC,UAAU,CAAC,EAAE;IAAE;IAC5DT,GAAG,CAACK,IAAI,CAACF,MAAM,GAAG,8CAA8C,GAAGF,YAAY,GAAG,uEAAuE,CAAC;IAC1J,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module"}