{"ast":null,"code":"/* eslint-disable no-use-before-define */\n/**\n * yallist implementation based on isaacs/yallist (https://github.com/isaacs/yallist/yallist.js),\n * with the minimal features used by the SDK.\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n**/\nvar Node = /** @class */function () {\n  function Node(value, prev, next, list) {\n    this.list = list;\n    this.value = value;\n    if (prev) {\n      prev.next = this;\n      this.prev = prev;\n    } else {\n      this.prev = null;\n    }\n    if (next) {\n      next.prev = this;\n      this.next = next;\n    } else {\n      this.next = null;\n    }\n  }\n  return Node;\n}();\nexport { Node };\nvar LinkedList = /** @class */function () {\n  function LinkedList() {\n    this.tail = null;\n    this.head = null;\n    this.length = 0;\n  }\n  // removes the given node of `this` list and returns the next node.\n  LinkedList.prototype.removeNode = function (node) {\n    if (!node || !(node instanceof Node)) return;\n    if (node.list !== this) {\n      throw new Error('removing node which does not belong to this list');\n    }\n    var next = node.next;\n    var prev = node.prev;\n    if (next) {\n      next.prev = prev;\n    }\n    if (prev) {\n      prev.next = next;\n    }\n    if (node === this.head) {\n      this.head = next;\n    }\n    if (node === this.tail) {\n      this.tail = prev;\n    }\n    node.list.length--;\n    node.next = null;\n    node.prev = null;\n    node.list = null;\n    return next;\n  };\n  // Move a Node object to the front of the list. (That is, pull it out of wherever it lives, and make it the new head.)\n  // If the node belongs to a different list, then that list will remove it first.\n  LinkedList.prototype.unshiftNode = function (node) {\n    if (!node || !(node instanceof Node)) return;\n    if (node === this.head) {\n      return;\n    }\n    if (node.list) {\n      node.list.removeNode(node);\n    }\n    var head = this.head;\n    node.list = this;\n    node.next = head;\n    if (head) {\n      head.prev = node;\n    }\n    this.head = node;\n    if (!this.tail) {\n      this.tail = node;\n    }\n    this.length++;\n  };\n  // similar to Array.prototype.unshift, it adds one or more elements to the head of the list and returns the new length of the list.\n  LinkedList.prototype.unshift = function () {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      this.head = new Node(arguments[i], null, this.head, this);\n      if (!this.tail) {\n        this.tail = this.head;\n      }\n      this.length++;\n    }\n    return this.length;\n  };\n  return LinkedList;\n}();\nexport { LinkedList };","map":{"version":3,"names":["Node","value","prev","next","list","LinkedList","tail","head","length","prototype","removeNode","node","Error","unshiftNode","unshift","i","l","arguments"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/LRUCache/LinkedList.js"],"sourcesContent":["/* eslint-disable no-use-before-define */\n/**\n * yallist implementation based on isaacs/yallist (https://github.com/isaacs/yallist/yallist.js),\n * with the minimal features used by the SDK.\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n**/\nvar Node = /** @class */ (function () {\n    function Node(value, prev, next, list) {\n        this.list = list;\n        this.value = value;\n        if (prev) {\n            prev.next = this;\n            this.prev = prev;\n        }\n        else {\n            this.prev = null;\n        }\n        if (next) {\n            next.prev = this;\n            this.next = next;\n        }\n        else {\n            this.next = null;\n        }\n    }\n    return Node;\n}());\nexport { Node };\nvar LinkedList = /** @class */ (function () {\n    function LinkedList() {\n        this.tail = null;\n        this.head = null;\n        this.length = 0;\n    }\n    // removes the given node of `this` list and returns the next node.\n    LinkedList.prototype.removeNode = function (node) {\n        if (!node || !(node instanceof Node))\n            return;\n        if (node.list !== this) {\n            throw new Error('removing node which does not belong to this list');\n        }\n        var next = node.next;\n        var prev = node.prev;\n        if (next) {\n            next.prev = prev;\n        }\n        if (prev) {\n            prev.next = next;\n        }\n        if (node === this.head) {\n            this.head = next;\n        }\n        if (node === this.tail) {\n            this.tail = prev;\n        }\n        node.list.length--;\n        node.next = null;\n        node.prev = null;\n        node.list = null;\n        return next;\n    };\n    // Move a Node object to the front of the list. (That is, pull it out of wherever it lives, and make it the new head.)\n    // If the node belongs to a different list, then that list will remove it first.\n    LinkedList.prototype.unshiftNode = function (node) {\n        if (!node || !(node instanceof Node))\n            return;\n        if (node === this.head) {\n            return;\n        }\n        if (node.list) {\n            node.list.removeNode(node);\n        }\n        var head = this.head;\n        node.list = this;\n        node.next = head;\n        if (head) {\n            head.prev = node;\n        }\n        this.head = node;\n        if (!this.tail) {\n            this.tail = node;\n        }\n        this.length++;\n    };\n    // similar to Array.prototype.unshift, it adds one or more elements to the head of the list and returns the new length of the list.\n    LinkedList.prototype.unshift = function () {\n        for (var i = 0, l = arguments.length; i < l; i++) {\n            this.head = new Node(arguments[i], null, this.head, this);\n            if (!this.tail) {\n                this.tail = this.head;\n            }\n            this.length++;\n        }\n        return this.length;\n    };\n    return LinkedList;\n}());\nexport { LinkedList };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}