{"ast":null,"code":"import { Logger, LogLevels } from '../../../logger';\nimport { getLogLevel } from './commons';\nfunction isLogger(log) {\n  return log && typeof log.debug === 'function' && typeof log.info === 'function' && typeof log.warn === 'function' && typeof log.error === 'function' && typeof log.setLogLevel === 'function';\n}\n// By default it starts disabled.\nvar initialLogLevel = LogLevels.NONE;\n/**\n * Validates the `debug` property at config and use it to set the logger.\n *\n * @param settings user config object, with an optional `debug` property of type boolean, string log level or a Logger object.\n * @returns a logger instance, that might be: the provided logger at `settings.debug`, or one with the given `debug` log level,\n * or one with NONE log level if `debug` is not defined or invalid.\n */\nexport function validateLogger(settings) {\n  var debug = settings.debug;\n  var logLevel = initialLogLevel;\n  if (debug !== undefined) {\n    if (isLogger(debug)) return debug;\n    logLevel = getLogLevel(settings.debug);\n  }\n  var log = new Logger({\n    logLevel: logLevel || initialLogLevel\n  });\n  // @ts-ignore // `debug` value is invalid if logLevel is undefined at this point\n  if (!logLevel) log._log(LogLevels.ERROR, 'Invalid `debug` value at config. Logs will be disabled.');\n  return log;\n}","map":{"version":3,"names":["Logger","LogLevels","getLogLevel","isLogger","log","debug","info","warn","error","setLogLevel","initialLogLevel","NONE","validateLogger","settings","logLevel","undefined","_log","ERROR"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/settingsValidation/logger/pluggableLogger.js"],"sourcesContent":["import { Logger, LogLevels } from '../../../logger';\nimport { getLogLevel } from './commons';\nfunction isLogger(log) {\n    return log && typeof log.debug === 'function' && typeof log.info === 'function' && typeof log.warn === 'function' && typeof log.error === 'function' && typeof log.setLogLevel === 'function';\n}\n// By default it starts disabled.\nvar initialLogLevel = LogLevels.NONE;\n/**\n * Validates the `debug` property at config and use it to set the logger.\n *\n * @param settings user config object, with an optional `debug` property of type boolean, string log level or a Logger object.\n * @returns a logger instance, that might be: the provided logger at `settings.debug`, or one with the given `debug` log level,\n * or one with NONE log level if `debug` is not defined or invalid.\n */\nexport function validateLogger(settings) {\n    var debug = settings.debug;\n    var logLevel = initialLogLevel;\n    if (debug !== undefined) {\n        if (isLogger(debug))\n            return debug;\n        logLevel = getLogLevel(settings.debug);\n    }\n    var log = new Logger({ logLevel: logLevel || initialLogLevel });\n    // @ts-ignore // `debug` value is invalid if logLevel is undefined at this point\n    if (!logLevel)\n        log._log(LogLevels.ERROR, 'Invalid `debug` value at config. Logs will be disabled.');\n    return log;\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,iBAAiB;AACnD,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,QAAQ,CAACC,GAAG,EAAE;EACnB,OAAOA,GAAG,IAAI,OAAOA,GAAG,CAACC,KAAK,KAAK,UAAU,IAAI,OAAOD,GAAG,CAACE,IAAI,KAAK,UAAU,IAAI,OAAOF,GAAG,CAACG,IAAI,KAAK,UAAU,IAAI,OAAOH,GAAG,CAACI,KAAK,KAAK,UAAU,IAAI,OAAOJ,GAAG,CAACK,WAAW,KAAK,UAAU;AACjM;AACA;AACA,IAAIC,eAAe,GAAGT,SAAS,CAACU,IAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,QAAQ,EAAE;EACrC,IAAIR,KAAK,GAAGQ,QAAQ,CAACR,KAAK;EAC1B,IAAIS,QAAQ,GAAGJ,eAAe;EAC9B,IAAIL,KAAK,KAAKU,SAAS,EAAE;IACrB,IAAIZ,QAAQ,CAACE,KAAK,CAAC,EACf,OAAOA,KAAK;IAChBS,QAAQ,GAAGZ,WAAW,CAACW,QAAQ,CAACR,KAAK,CAAC;EAC1C;EACA,IAAID,GAAG,GAAG,IAAIJ,MAAM,CAAC;IAAEc,QAAQ,EAAEA,QAAQ,IAAIJ;EAAgB,CAAC,CAAC;EAC/D;EACA,IAAI,CAACI,QAAQ,EACTV,GAAG,CAACY,IAAI,CAACf,SAAS,CAACgB,KAAK,EAAE,yDAAyD,CAAC;EACxF,OAAOb,GAAG;AACd"},"metadata":{},"sourceType":"module"}