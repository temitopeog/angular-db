{"ast":null,"code":"import { allMatcherContext } from './all';\nimport { segmentMatcherContext } from './segment';\nimport { whitelistMatcherContext } from './whitelist';\nimport { equalToMatcherContext } from './eq';\nimport { greaterThanEqualMatcherContext } from './gte';\nimport { lessThanEqualMatcherContext } from './lte';\nimport { betweenMatcherContext } from './between';\nimport { equalToSetMatcherContext } from './eq_set';\nimport { containsAnySetMatcherContext } from './cont_any';\nimport { containsAllSetMatcherContext } from './cont_all';\nimport { partOfSetMatcherContext } from './part_of';\nimport { endsWithMatcherContext } from './ew';\nimport { startsWithMatcherContext } from './sw';\nimport { containsStringMatcherContext } from './cont_str';\nimport { dependencyMatcherContext } from './dependency';\nimport { booleanMatcherContext } from './boolean';\nimport { stringMatcherContext } from './string';\nvar matchers = [undefined, allMatcherContext, segmentMatcherContext, whitelistMatcherContext, equalToMatcherContext, greaterThanEqualMatcherContext, lessThanEqualMatcherContext, betweenMatcherContext, equalToSetMatcherContext, containsAnySetMatcherContext, containsAllSetMatcherContext, partOfSetMatcherContext, endsWithMatcherContext, startsWithMatcherContext, containsStringMatcherContext, dependencyMatcherContext, booleanMatcherContext, stringMatcherContext // MATCHES_STRING: 17\n];\n/**\n * Matcher factory.\n */\nexport function matcherFactory(log, matcherDto, storage) {\n  var type = matcherDto.type,\n    value = matcherDto.value;\n  var matcherFn;\n  // @ts-ignore\n  if (matchers[type]) matcherFn = matchers[type](log, value, storage); // There is no index-out-of-bound exception in JavaScript\n  return matcherFn;\n}","map":{"version":3,"names":["allMatcherContext","segmentMatcherContext","whitelistMatcherContext","equalToMatcherContext","greaterThanEqualMatcherContext","lessThanEqualMatcherContext","betweenMatcherContext","equalToSetMatcherContext","containsAnySetMatcherContext","containsAllSetMatcherContext","partOfSetMatcherContext","endsWithMatcherContext","startsWithMatcherContext","containsStringMatcherContext","dependencyMatcherContext","booleanMatcherContext","stringMatcherContext","matchers","undefined","matcherFactory","log","matcherDto","storage","type","value","matcherFn"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/evaluator/matchers/index.js"],"sourcesContent":["import { allMatcherContext } from './all';\nimport { segmentMatcherContext } from './segment';\nimport { whitelistMatcherContext } from './whitelist';\nimport { equalToMatcherContext } from './eq';\nimport { greaterThanEqualMatcherContext } from './gte';\nimport { lessThanEqualMatcherContext } from './lte';\nimport { betweenMatcherContext } from './between';\nimport { equalToSetMatcherContext } from './eq_set';\nimport { containsAnySetMatcherContext } from './cont_any';\nimport { containsAllSetMatcherContext } from './cont_all';\nimport { partOfSetMatcherContext } from './part_of';\nimport { endsWithMatcherContext } from './ew';\nimport { startsWithMatcherContext } from './sw';\nimport { containsStringMatcherContext } from './cont_str';\nimport { dependencyMatcherContext } from './dependency';\nimport { booleanMatcherContext } from './boolean';\nimport { stringMatcherContext } from './string';\nvar matchers = [\n    undefined,\n    allMatcherContext,\n    segmentMatcherContext,\n    whitelistMatcherContext,\n    equalToMatcherContext,\n    greaterThanEqualMatcherContext,\n    lessThanEqualMatcherContext,\n    betweenMatcherContext,\n    equalToSetMatcherContext,\n    containsAnySetMatcherContext,\n    containsAllSetMatcherContext,\n    partOfSetMatcherContext,\n    endsWithMatcherContext,\n    startsWithMatcherContext,\n    containsStringMatcherContext,\n    dependencyMatcherContext,\n    booleanMatcherContext,\n    stringMatcherContext // MATCHES_STRING: 17\n];\n/**\n * Matcher factory.\n */\nexport function matcherFactory(log, matcherDto, storage) {\n    var type = matcherDto.type, value = matcherDto.value;\n    var matcherFn;\n    // @ts-ignore\n    if (matchers[type])\n        matcherFn = matchers[type](log, value, storage); // There is no index-out-of-bound exception in JavaScript\n    return matcherFn;\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,OAAO;AACzC,SAASC,qBAAqB,QAAQ,WAAW;AACjD,SAASC,uBAAuB,QAAQ,aAAa;AACrD,SAASC,qBAAqB,QAAQ,MAAM;AAC5C,SAASC,8BAA8B,QAAQ,OAAO;AACtD,SAASC,2BAA2B,QAAQ,OAAO;AACnD,SAASC,qBAAqB,QAAQ,WAAW;AACjD,SAASC,wBAAwB,QAAQ,UAAU;AACnD,SAASC,4BAA4B,QAAQ,YAAY;AACzD,SAASC,4BAA4B,QAAQ,YAAY;AACzD,SAASC,uBAAuB,QAAQ,WAAW;AACnD,SAASC,sBAAsB,QAAQ,MAAM;AAC7C,SAASC,wBAAwB,QAAQ,MAAM;AAC/C,SAASC,4BAA4B,QAAQ,YAAY;AACzD,SAASC,wBAAwB,QAAQ,cAAc;AACvD,SAASC,qBAAqB,QAAQ,WAAW;AACjD,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,IAAIC,QAAQ,GAAG,CACXC,SAAS,EACTlB,iBAAiB,EACjBC,qBAAqB,EACrBC,uBAAuB,EACvBC,qBAAqB,EACrBC,8BAA8B,EAC9BC,2BAA2B,EAC3BC,qBAAqB,EACrBC,wBAAwB,EACxBC,4BAA4B,EAC5BC,4BAA4B,EAC5BC,uBAAuB,EACvBC,sBAAsB,EACtBC,wBAAwB,EACxBC,4BAA4B,EAC5BC,wBAAwB,EACxBC,qBAAqB,EACrBC,oBAAoB,CAAC;AAAA,CACxB;AACD;AACA;AACA;AACA,OAAO,SAASG,cAAc,CAACC,GAAG,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACrD,IAAIC,IAAI,GAAGF,UAAU,CAACE,IAAI;IAAEC,KAAK,GAAGH,UAAU,CAACG,KAAK;EACpD,IAAIC,SAAS;EACb;EACA,IAAIR,QAAQ,CAACM,IAAI,CAAC,EACdE,SAAS,GAAGR,QAAQ,CAACM,IAAI,CAAC,CAACH,GAAG,EAAEI,KAAK,EAAEF,OAAO,CAAC,CAAC,CAAC;EACrD,OAAOG,SAAS;AACpB"},"metadata":{},"sourceType":"module"}