{"ast":null,"code":"import { ERROR_EMPTY_ARRAY } from '../../logger/constants';\nimport { uniq } from '../lang';\nimport { validateSplit } from './split';\nexport function validateSplits(log, maybeSplits, method, listName, item) {\n  if (listName === void 0) {\n    listName = 'split_names';\n  }\n  if (item === void 0) {\n    item = 'split name';\n  }\n  if (Array.isArray(maybeSplits) && maybeSplits.length > 0) {\n    var validatedArray_1 = [];\n    // Remove invalid values\n    maybeSplits.forEach(function (maybeSplit) {\n      var splitName = validateSplit(log, maybeSplit, method, item);\n      if (splitName) validatedArray_1.push(splitName);\n    });\n    // Strip off duplicated values if we have valid split names then return\n    if (validatedArray_1.length) return uniq(validatedArray_1);\n  }\n  log.error(ERROR_EMPTY_ARRAY, [method, listName]);\n  return false;\n}","map":{"version":3,"names":["ERROR_EMPTY_ARRAY","uniq","validateSplit","validateSplits","log","maybeSplits","method","listName","item","Array","isArray","length","validatedArray_1","forEach","maybeSplit","splitName","push","error"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/inputValidation/splits.js"],"sourcesContent":["import { ERROR_EMPTY_ARRAY } from '../../logger/constants';\nimport { uniq } from '../lang';\nimport { validateSplit } from './split';\nexport function validateSplits(log, maybeSplits, method, listName, item) {\n    if (listName === void 0) { listName = 'split_names'; }\n    if (item === void 0) { item = 'split name'; }\n    if (Array.isArray(maybeSplits) && maybeSplits.length > 0) {\n        var validatedArray_1 = [];\n        // Remove invalid values\n        maybeSplits.forEach(function (maybeSplit) {\n            var splitName = validateSplit(log, maybeSplit, method, item);\n            if (splitName)\n                validatedArray_1.push(splitName);\n        });\n        // Strip off duplicated values if we have valid split names then return\n        if (validatedArray_1.length)\n            return uniq(validatedArray_1);\n    }\n    log.error(ERROR_EMPTY_ARRAY, [method, listName]);\n    return false;\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,IAAI,QAAQ,SAAS;AAC9B,SAASC,aAAa,QAAQ,SAAS;AACvC,OAAO,SAASC,cAAc,CAACC,GAAG,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACrE,IAAID,QAAQ,KAAK,KAAK,CAAC,EAAE;IAAEA,QAAQ,GAAG,aAAa;EAAE;EACrD,IAAIC,IAAI,KAAK,KAAK,CAAC,EAAE;IAAEA,IAAI,GAAG,YAAY;EAAE;EAC5C,IAAIC,KAAK,CAACC,OAAO,CAACL,WAAW,CAAC,IAAIA,WAAW,CAACM,MAAM,GAAG,CAAC,EAAE;IACtD,IAAIC,gBAAgB,GAAG,EAAE;IACzB;IACAP,WAAW,CAACQ,OAAO,CAAC,UAAUC,UAAU,EAAE;MACtC,IAAIC,SAAS,GAAGb,aAAa,CAACE,GAAG,EAAEU,UAAU,EAAER,MAAM,EAAEE,IAAI,CAAC;MAC5D,IAAIO,SAAS,EACTH,gBAAgB,CAACI,IAAI,CAACD,SAAS,CAAC;IACxC,CAAC,CAAC;IACF;IACA,IAAIH,gBAAgB,CAACD,MAAM,EACvB,OAAOV,IAAI,CAACW,gBAAgB,CAAC;EACrC;EACAR,GAAG,CAACa,KAAK,CAACjB,iBAAiB,EAAE,CAACM,MAAM,EAAEC,QAAQ,CAAC,CAAC;EAChD,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"module"}