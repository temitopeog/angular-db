{"ast":null,"code":"/**\n * This class provides a skeletal implementation of the ISegmentsCacheSync interface\n * to minimize the effort required to implement this interface.\n */\nvar AbstractSegmentsCacheSync = /** @class */function () {\n  function AbstractSegmentsCacheSync() {}\n  /**\n   * For server-side synchronizer: add the given list of segments to the cache, with an empty list of keys. The segments that already exist are not modified.\n   * For client-side synchronizer: the method is not used.\n   */\n  AbstractSegmentsCacheSync.prototype.registerSegments = function (names) {\n    return false;\n  };\n  /**\n   * For server-side synchronizer: set the change number of `name` segment.\n   * For client-side synchronizer: the method is not used.\n   */\n  AbstractSegmentsCacheSync.prototype.setChangeNumber = function (name, changeNumber) {\n    return true;\n  };\n  /**\n   * For server-side synchronizer: get the change number of `name` segment.\n   * For client-side synchronizer: the method is not used.\n   */\n  AbstractSegmentsCacheSync.prototype.getChangeNumber = function (name) {\n    return -1;\n  };\n  /**\n   * For server-side synchronizer: the method is not used.\n   * For client-side synchronizer: reset the cache with the given list of segments.\n   */\n  AbstractSegmentsCacheSync.prototype.resetSegments = function (names) {\n    return true;\n  };\n  return AbstractSegmentsCacheSync;\n}();\nexport { AbstractSegmentsCacheSync };","map":{"version":3,"names":["AbstractSegmentsCacheSync","prototype","registerSegments","names","setChangeNumber","name","changeNumber","getChangeNumber","resetSegments"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/AbstractSegmentsCacheSync.js"],"sourcesContent":["/**\n * This class provides a skeletal implementation of the ISegmentsCacheSync interface\n * to minimize the effort required to implement this interface.\n */\nvar AbstractSegmentsCacheSync = /** @class */ (function () {\n    function AbstractSegmentsCacheSync() {\n    }\n    /**\n     * For server-side synchronizer: add the given list of segments to the cache, with an empty list of keys. The segments that already exist are not modified.\n     * For client-side synchronizer: the method is not used.\n     */\n    AbstractSegmentsCacheSync.prototype.registerSegments = function (names) { return false; };\n    /**\n     * For server-side synchronizer: set the change number of `name` segment.\n     * For client-side synchronizer: the method is not used.\n     */\n    AbstractSegmentsCacheSync.prototype.setChangeNumber = function (name, changeNumber) { return true; };\n    /**\n     * For server-side synchronizer: get the change number of `name` segment.\n     * For client-side synchronizer: the method is not used.\n     */\n    AbstractSegmentsCacheSync.prototype.getChangeNumber = function (name) { return -1; };\n    /**\n     * For server-side synchronizer: the method is not used.\n     * For client-side synchronizer: reset the cache with the given list of segments.\n     */\n    AbstractSegmentsCacheSync.prototype.resetSegments = function (names) { return true; };\n    return AbstractSegmentsCacheSync;\n}());\nexport { AbstractSegmentsCacheSync };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,yBAAyB,GAAG,aAAe,YAAY;EACvD,SAASA,yBAAyB,GAAG,CACrC;EACA;AACJ;AACA;AACA;EACIA,yBAAyB,CAACC,SAAS,CAACC,gBAAgB,GAAG,UAAUC,KAAK,EAAE;IAAE,OAAO,KAAK;EAAE,CAAC;EACzF;AACJ;AACA;AACA;EACIH,yBAAyB,CAACC,SAAS,CAACG,eAAe,GAAG,UAAUC,IAAI,EAAEC,YAAY,EAAE;IAAE,OAAO,IAAI;EAAE,CAAC;EACpG;AACJ;AACA;AACA;EACIN,yBAAyB,CAACC,SAAS,CAACM,eAAe,GAAG,UAAUF,IAAI,EAAE;IAAE,OAAO,CAAC,CAAC;EAAE,CAAC;EACpF;AACJ;AACA;AACA;EACIL,yBAAyB,CAACC,SAAS,CAACO,aAAa,GAAG,UAAUL,KAAK,EAAE;IAAE,OAAO,IAAI;EAAE,CAAC;EACrF,OAAOH,yBAAyB;AACpC,CAAC,EAAG;AACJ,SAASA,yBAAyB"},"metadata":{},"sourceType":"module"}