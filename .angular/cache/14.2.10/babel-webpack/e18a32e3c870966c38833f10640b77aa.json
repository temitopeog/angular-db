{"ast":null,"code":"import { isObject, isString, isFiniteNumber, isBoolean } from '../lang';\nimport { objectAssign } from '../lang/objectAssign';\nimport { ERROR_NOT_PLAIN_OBJECT, ERROR_SIZE_EXCEEDED, WARN_SETTING_NULL, WARN_TRIMMING_PROPERTIES } from '../../logger/constants';\nvar ECMA_SIZES = {\n  NULL: 0,\n  STRING: 2,\n  BOOLEAN: 4,\n  NUMBER: 8\n};\nvar MAX_PROPERTIES_AMOUNT = 300;\nvar MAX_EVENT_SIZE = 1024 * 32;\nvar BASE_EVENT_SIZE = 1024; // We assume 1kb events without properties (avg measured)\nexport function validateEventProperties(log, maybeProperties, method) {\n  if (maybeProperties == undefined) return {\n    properties: null,\n    size: BASE_EVENT_SIZE\n  }; // eslint-disable-line eqeqeq\n  if (!isObject(maybeProperties)) {\n    log.error(ERROR_NOT_PLAIN_OBJECT, [method, 'properties']);\n    return {\n      properties: false,\n      size: BASE_EVENT_SIZE\n    };\n  }\n  var keys = Object.keys(maybeProperties);\n  // Shallow clone\n  var clone = objectAssign({}, maybeProperties);\n  // To avoid calculating the size twice we'll return it from here.\n  var output = {\n    properties: clone,\n    size: BASE_EVENT_SIZE // We assume 1kb events without properties (avg measured)\n  };\n\n  if (keys.length > MAX_PROPERTIES_AMOUNT) {\n    log.warn(WARN_TRIMMING_PROPERTIES, [method]);\n  }\n  for (var i = 0; i < keys.length; i++) {\n    output.size += keys[i].length * ECMA_SIZES.STRING; // Count the size of the key which is always a string.\n    var val = clone[keys[i]];\n    var isStringVal = isString(val);\n    var isFiniteVal = isFiniteNumber(val);\n    var isBoolVal = isBoolean(val);\n    var isNullVal = val === null;\n    if (!(isStringVal || isFiniteVal || isBoolVal || isNullVal)) {\n      // If it's not of valid type.\n      clone[keys[i]] = null;\n      val = null;\n      isNullVal = true;\n      log.warn(WARN_SETTING_NULL, [method, keys[i]]);\n    }\n    if (isNullVal) output.size += ECMA_SIZES.NULL;else if (isFiniteVal) output.size += ECMA_SIZES.NUMBER;else if (isBoolVal) output.size += ECMA_SIZES.BOOLEAN;else if (isStringVal) output.size += val.length * ECMA_SIZES.STRING;\n    if (output.size > MAX_EVENT_SIZE) {\n      log.error(ERROR_SIZE_EXCEEDED, [method]);\n      output.properties = false;\n      break;\n    }\n  }\n  return output;\n}","map":{"version":3,"names":["isObject","isString","isFiniteNumber","isBoolean","objectAssign","ERROR_NOT_PLAIN_OBJECT","ERROR_SIZE_EXCEEDED","WARN_SETTING_NULL","WARN_TRIMMING_PROPERTIES","ECMA_SIZES","NULL","STRING","BOOLEAN","NUMBER","MAX_PROPERTIES_AMOUNT","MAX_EVENT_SIZE","BASE_EVENT_SIZE","validateEventProperties","log","maybeProperties","method","undefined","properties","size","error","keys","Object","clone","output","length","warn","i","val","isStringVal","isFiniteVal","isBoolVal","isNullVal"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/inputValidation/eventProperties.js"],"sourcesContent":["import { isObject, isString, isFiniteNumber, isBoolean } from '../lang';\nimport { objectAssign } from '../lang/objectAssign';\nimport { ERROR_NOT_PLAIN_OBJECT, ERROR_SIZE_EXCEEDED, WARN_SETTING_NULL, WARN_TRIMMING_PROPERTIES } from '../../logger/constants';\nvar ECMA_SIZES = {\n    NULL: 0,\n    STRING: 2,\n    BOOLEAN: 4,\n    NUMBER: 8\n};\nvar MAX_PROPERTIES_AMOUNT = 300;\nvar MAX_EVENT_SIZE = 1024 * 32;\nvar BASE_EVENT_SIZE = 1024; // We assume 1kb events without properties (avg measured)\nexport function validateEventProperties(log, maybeProperties, method) {\n    if (maybeProperties == undefined)\n        return { properties: null, size: BASE_EVENT_SIZE }; // eslint-disable-line eqeqeq\n    if (!isObject(maybeProperties)) {\n        log.error(ERROR_NOT_PLAIN_OBJECT, [method, 'properties']);\n        return { properties: false, size: BASE_EVENT_SIZE };\n    }\n    var keys = Object.keys(maybeProperties);\n    // Shallow clone\n    var clone = objectAssign({}, maybeProperties);\n    // To avoid calculating the size twice we'll return it from here.\n    var output = {\n        properties: clone,\n        size: BASE_EVENT_SIZE // We assume 1kb events without properties (avg measured)\n    };\n    if (keys.length > MAX_PROPERTIES_AMOUNT) {\n        log.warn(WARN_TRIMMING_PROPERTIES, [method]);\n    }\n    for (var i = 0; i < keys.length; i++) {\n        output.size += keys[i].length * ECMA_SIZES.STRING; // Count the size of the key which is always a string.\n        var val = clone[keys[i]];\n        var isStringVal = isString(val);\n        var isFiniteVal = isFiniteNumber(val);\n        var isBoolVal = isBoolean(val);\n        var isNullVal = val === null;\n        if (!(isStringVal || isFiniteVal || isBoolVal || isNullVal)) { // If it's not of valid type.\n            clone[keys[i]] = null;\n            val = null;\n            isNullVal = true;\n            log.warn(WARN_SETTING_NULL, [method, keys[i]]);\n        }\n        if (isNullVal)\n            output.size += ECMA_SIZES.NULL;\n        else if (isFiniteVal)\n            output.size += ECMA_SIZES.NUMBER;\n        else if (isBoolVal)\n            output.size += ECMA_SIZES.BOOLEAN;\n        else if (isStringVal)\n            output.size += val.length * ECMA_SIZES.STRING;\n        if (output.size > MAX_EVENT_SIZE) {\n            log.error(ERROR_SIZE_EXCEEDED, [method]);\n            output.properties = false;\n            break;\n        }\n    }\n    return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}