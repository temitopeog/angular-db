{"ast":null,"code":"/**\n * This class provides a skeletal implementation of the ISplitsCacheAsync interface\n * to minimize the effort required to implement this interface.\n */\nvar AbstractSplitsCacheAsync = /** @class */function () {\n  function AbstractSplitsCacheAsync() {}\n  // @TODO revisit segment-related methods ('usesSegments', 'getRegisteredSegments', 'registerSegments')\n  // noop, just keeping the interface. This is used by standalone client-side API only, and so only implemented by InMemory and InLocalStorage.\n  AbstractSplitsCacheAsync.prototype.usesSegments = function () {\n    return Promise.resolve(true);\n  };\n  /**\n   * Check if the splits information is already stored in cache.\n   * Noop, just keeping the interface. This is used by client-side implementations only.\n   */\n  AbstractSplitsCacheAsync.prototype.checkCache = function () {\n    return Promise.resolve(false);\n  };\n  /**\n   * Kill `name` split and set `defaultTreatment` and `changeNumber`.\n   * Used for SPLIT_KILL push notifications.\n   *\n   * @param {string} name\n   * @param {string} defaultTreatment\n   * @param {number} changeNumber\n   * @returns {Promise} a promise that is resolved once the split kill operation is performed. The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated,\n   * for instance, if the `changeNumber` is old, or if the split is not found (e.g., `/splitchanges` hasn't been fetched yet), or if the storage fails to apply the update.\n   * The promise will never be rejected.\n   */\n  AbstractSplitsCacheAsync.prototype.killLocally = function (name, defaultTreatment, changeNumber) {\n    var _this = this;\n    return this.getSplit(name).then(function (split) {\n      if (split) {\n        var parsedSplit = JSON.parse(split);\n        if (!parsedSplit.changeNumber || parsedSplit.changeNumber < changeNumber) {\n          parsedSplit.killed = true;\n          parsedSplit.defaultTreatment = defaultTreatment;\n          parsedSplit.changeNumber = changeNumber;\n          var newSplit = JSON.stringify(parsedSplit);\n          return _this.addSplit(name, newSplit);\n        }\n      }\n      return false;\n    }).catch(function () {\n      return false;\n    });\n  };\n  return AbstractSplitsCacheAsync;\n}();\nexport { AbstractSplitsCacheAsync };","map":{"version":3,"names":["AbstractSplitsCacheAsync","prototype","usesSegments","Promise","resolve","checkCache","killLocally","name","defaultTreatment","changeNumber","_this","getSplit","then","split","parsedSplit","JSON","parse","killed","newSplit","stringify","addSplit","catch"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/AbstractSplitsCacheAsync.js"],"sourcesContent":["/**\n * This class provides a skeletal implementation of the ISplitsCacheAsync interface\n * to minimize the effort required to implement this interface.\n */\nvar AbstractSplitsCacheAsync = /** @class */ (function () {\n    function AbstractSplitsCacheAsync() {\n    }\n    // @TODO revisit segment-related methods ('usesSegments', 'getRegisteredSegments', 'registerSegments')\n    // noop, just keeping the interface. This is used by standalone client-side API only, and so only implemented by InMemory and InLocalStorage.\n    AbstractSplitsCacheAsync.prototype.usesSegments = function () {\n        return Promise.resolve(true);\n    };\n    /**\n     * Check if the splits information is already stored in cache.\n     * Noop, just keeping the interface. This is used by client-side implementations only.\n     */\n    AbstractSplitsCacheAsync.prototype.checkCache = function () {\n        return Promise.resolve(false);\n    };\n    /**\n     * Kill `name` split and set `defaultTreatment` and `changeNumber`.\n     * Used for SPLIT_KILL push notifications.\n     *\n     * @param {string} name\n     * @param {string} defaultTreatment\n     * @param {number} changeNumber\n     * @returns {Promise} a promise that is resolved once the split kill operation is performed. The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated,\n     * for instance, if the `changeNumber` is old, or if the split is not found (e.g., `/splitchanges` hasn't been fetched yet), or if the storage fails to apply the update.\n     * The promise will never be rejected.\n     */\n    AbstractSplitsCacheAsync.prototype.killLocally = function (name, defaultTreatment, changeNumber) {\n        var _this = this;\n        return this.getSplit(name).then(function (split) {\n            if (split) {\n                var parsedSplit = JSON.parse(split);\n                if (!parsedSplit.changeNumber || parsedSplit.changeNumber < changeNumber) {\n                    parsedSplit.killed = true;\n                    parsedSplit.defaultTreatment = defaultTreatment;\n                    parsedSplit.changeNumber = changeNumber;\n                    var newSplit = JSON.stringify(parsedSplit);\n                    return _this.addSplit(name, newSplit);\n                }\n            }\n            return false;\n        }).catch(function () { return false; });\n    };\n    return AbstractSplitsCacheAsync;\n}());\nexport { AbstractSplitsCacheAsync };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,wBAAwB,GAAG,aAAe,YAAY;EACtD,SAASA,wBAAwB,GAAG,CACpC;EACA;EACA;EACAA,wBAAwB,CAACC,SAAS,CAACC,YAAY,GAAG,YAAY;IAC1D,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAChC,CAAC;EACD;AACJ;AACA;AACA;EACIJ,wBAAwB,CAACC,SAAS,CAACI,UAAU,GAAG,YAAY;IACxD,OAAOF,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,wBAAwB,CAACC,SAAS,CAACK,WAAW,GAAG,UAAUC,IAAI,EAAEC,gBAAgB,EAAEC,YAAY,EAAE;IAC7F,IAAIC,KAAK,GAAG,IAAI;IAChB,OAAO,IAAI,CAACC,QAAQ,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,UAAUC,KAAK,EAAE;MAC7C,IAAIA,KAAK,EAAE;QACP,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC;QACnC,IAAI,CAACC,WAAW,CAACL,YAAY,IAAIK,WAAW,CAACL,YAAY,GAAGA,YAAY,EAAE;UACtEK,WAAW,CAACG,MAAM,GAAG,IAAI;UACzBH,WAAW,CAACN,gBAAgB,GAAGA,gBAAgB;UAC/CM,WAAW,CAACL,YAAY,GAAGA,YAAY;UACvC,IAAIS,QAAQ,GAAGH,IAAI,CAACI,SAAS,CAACL,WAAW,CAAC;UAC1C,OAAOJ,KAAK,CAACU,QAAQ,CAACb,IAAI,EAAEW,QAAQ,CAAC;QACzC;MACJ;MACA,OAAO,KAAK;IAChB,CAAC,CAAC,CAACG,KAAK,CAAC,YAAY;MAAE,OAAO,KAAK;IAAE,CAAC,CAAC;EAC3C,CAAC;EACD,OAAOrB,wBAAwB;AACnC,CAAC,EAAG;AACJ,SAASA,wBAAwB"},"metadata":{},"sourceType":"module"}