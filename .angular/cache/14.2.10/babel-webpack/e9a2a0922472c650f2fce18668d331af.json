{"ast":null,"code":"/**\n * Factory of SplitChanges fetcher.\n * SplitChanges fetcher is a wrapper around `splitChanges` API service that parses the response and handle errors.\n */\nexport function splitChangesFetcherFactory(fetchSplitChanges) {\n  return function splitChangesFetcher(since, noCache,\n  // Optional decorator for `fetchSplitChanges` promise, such as timeout or time tracker\n  decorator) {\n    var splitsPromise = fetchSplitChanges(since, noCache);\n    if (decorator) splitsPromise = decorator(splitsPromise);\n    return splitsPromise.then(function (resp) {\n      return resp.json();\n    });\n  };\n}","map":{"version":3,"names":["splitChangesFetcherFactory","fetchSplitChanges","splitChangesFetcher","since","noCache","decorator","splitsPromise","then","resp","json"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/polling/fetchers/splitChangesFetcher.js"],"sourcesContent":["/**\n * Factory of SplitChanges fetcher.\n * SplitChanges fetcher is a wrapper around `splitChanges` API service that parses the response and handle errors.\n */\nexport function splitChangesFetcherFactory(fetchSplitChanges) {\n    return function splitChangesFetcher(since, noCache, \n    // Optional decorator for `fetchSplitChanges` promise, such as timeout or time tracker\n    decorator) {\n        var splitsPromise = fetchSplitChanges(since, noCache);\n        if (decorator)\n            splitsPromise = decorator(splitsPromise);\n        return splitsPromise.then(function (resp) { return resp.json(); });\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,0BAA0B,CAACC,iBAAiB,EAAE;EAC1D,OAAO,SAASC,mBAAmB,CAACC,KAAK,EAAEC,OAAO;EAClD;EACAC,SAAS,EAAE;IACP,IAAIC,aAAa,GAAGL,iBAAiB,CAACE,KAAK,EAAEC,OAAO,CAAC;IACrD,IAAIC,SAAS,EACTC,aAAa,GAAGD,SAAS,CAACC,aAAa,CAAC;IAC5C,OAAOA,aAAa,CAACC,IAAI,CAAC,UAAUC,IAAI,EAAE;MAAE,OAAOA,IAAI,CAACC,IAAI,EAAE;IAAE,CAAC,CAAC;EACtE,CAAC;AACL"},"metadata":{},"sourceType":"module"}