{"ast":null,"code":"import { fromObjectSyncTaskFactory } from './syncTasks/fromObjectSyncTask';\nimport { objectAssign } from '../../utils/lang/objectAssign';\nimport { SDK_SEGMENTS_ARRIVED } from '../../readiness/constants';\nfunction flush() {\n  return Promise.resolve();\n}\n/**\n * Offline SyncManager factory.\n * Can be used for server-side API, and client-side API with or without multiple clients.\n *\n * @param splitsParser e.g., `splitsParserFromFile`, `splitsParserFromSettings`.\n */\nexport function syncManagerOfflineFactory(splitsParserFactory) {\n  /**\n   * SyncManager factory for modular SDK\n   */\n  return function (_a) {\n    var settings = _a.settings,\n      readiness = _a.readiness,\n      storage = _a.storage;\n    return objectAssign(fromObjectSyncTaskFactory(splitsParserFactory(), storage, readiness, settings), {\n      // fake flush, that resolves immediately\n      flush: flush,\n      // [Only used for client-side]\n      shared: function (matchingKey, readinessManager) {\n        return {\n          start: function () {\n            // In LOCALHOST mode, shared clients are ready in the next event-loop cycle than created\n            // SDK_READY cannot be emitted directly because this will not update the readiness status\n            setTimeout(function () {\n              readinessManager.segments.emit(SDK_SEGMENTS_ARRIVED); // SDK_SPLITS_ARRIVED emitted by main SyncManager\n            }, 0);\n          },\n          stop: function () {},\n          isRunning: function () {\n            return true;\n          },\n          flush: flush\n        };\n      }\n    });\n  };\n}","map":{"version":3,"names":["fromObjectSyncTaskFactory","objectAssign","SDK_SEGMENTS_ARRIVED","flush","Promise","resolve","syncManagerOfflineFactory","splitsParserFactory","_a","settings","readiness","storage","shared","matchingKey","readinessManager","start","setTimeout","segments","emit","stop","isRunning"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/offline/syncManagerOffline.js"],"sourcesContent":["import { fromObjectSyncTaskFactory } from './syncTasks/fromObjectSyncTask';\nimport { objectAssign } from '../../utils/lang/objectAssign';\nimport { SDK_SEGMENTS_ARRIVED } from '../../readiness/constants';\nfunction flush() {\n    return Promise.resolve();\n}\n/**\n * Offline SyncManager factory.\n * Can be used for server-side API, and client-side API with or without multiple clients.\n *\n * @param splitsParser e.g., `splitsParserFromFile`, `splitsParserFromSettings`.\n */\nexport function syncManagerOfflineFactory(splitsParserFactory) {\n    /**\n     * SyncManager factory for modular SDK\n     */\n    return function (_a) {\n        var settings = _a.settings, readiness = _a.readiness, storage = _a.storage;\n        return objectAssign(fromObjectSyncTaskFactory(splitsParserFactory(), storage, readiness, settings), {\n            // fake flush, that resolves immediately\n            flush: flush,\n            // [Only used for client-side]\n            shared: function (matchingKey, readinessManager) {\n                return {\n                    start: function () {\n                        // In LOCALHOST mode, shared clients are ready in the next event-loop cycle than created\n                        // SDK_READY cannot be emitted directly because this will not update the readiness status\n                        setTimeout(function () {\n                            readinessManager.segments.emit(SDK_SEGMENTS_ARRIVED); // SDK_SPLITS_ARRIVED emitted by main SyncManager\n                        }, 0);\n                    },\n                    stop: function () { },\n                    isRunning: function () {\n                        return true;\n                    },\n                    flush: flush,\n                };\n            }\n        });\n    };\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,gCAAgC;AAC1E,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,KAAK,GAAG;EACb,OAAOC,OAAO,CAACC,OAAO,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyB,CAACC,mBAAmB,EAAE;EAC3D;AACJ;AACA;EACI,OAAO,UAAUC,EAAE,EAAE;IACjB,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;MAAEC,SAAS,GAAGF,EAAE,CAACE,SAAS;MAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;IAC1E,OAAOV,YAAY,CAACD,yBAAyB,CAACO,mBAAmB,EAAE,EAAEI,OAAO,EAAED,SAAS,EAAED,QAAQ,CAAC,EAAE;MAChG;MACAN,KAAK,EAAEA,KAAK;MACZ;MACAS,MAAM,EAAE,UAAUC,WAAW,EAAEC,gBAAgB,EAAE;QAC7C,OAAO;UACHC,KAAK,EAAE,YAAY;YACf;YACA;YACAC,UAAU,CAAC,YAAY;cACnBF,gBAAgB,CAACG,QAAQ,CAACC,IAAI,CAAChB,oBAAoB,CAAC,CAAC,CAAC;YAC1D,CAAC,EAAE,CAAC,CAAC;UACT,CAAC;UACDiB,IAAI,EAAE,YAAY,CAAE,CAAC;UACrBC,SAAS,EAAE,YAAY;YACnB,OAAO,IAAI;UACf,CAAC;UACDjB,KAAK,EAAEA;QACX,CAAC;MACL;IACJ,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module"}