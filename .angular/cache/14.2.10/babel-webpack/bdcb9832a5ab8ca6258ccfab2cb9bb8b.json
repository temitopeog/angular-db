{"ast":null,"code":"/* eslint-disable no-undef */\nimport { uniq } from '../../utils/lang';\nimport { SPLIT_IMPRESSION, SPLIT_EVENT } from '../../utils/constants';\nvar logPrefix = 'split-to-ga: ';\nvar noGaWarning = '`ga` command queue not found.';\nvar noHit = 'No hit was sent.';\nvar SplitToGa = /** @class */function () {\n  /**\n   * constructor description\n   * @param {object} options options passed at the SDK integrations settings (isomorphic SDK) or the SplitToGoogleAnalytics plugin (pluggable browser SDK)\n   */\n  function SplitToGa(log, options) {\n    this.trackerNames = SplitToGa.defaultTrackerNames;\n    this.log = log;\n    if (options) {\n      if (typeof options.filter === 'function') this.filter = options.filter;\n      if (typeof options.mapper === 'function') this.mapper = options.mapper;\n      // We strip off duplicated values if we received a `trackerNames` param.\n      // We don't warn if a tracker does not exist, since the user might create it after the SDK is initialized.\n      // Note: GA allows to create and get trackers using a string or number as tracker name, and does nothing if other types are used.\n      if (Array.isArray(options.trackerNames)) this.trackerNames = uniq(options.trackerNames);\n      // No need to validate `impressions` and `events` flags. Any other value than `false` is ignored (considered true by default).\n      this.impressions = options.impressions;\n      this.events = options.events;\n    }\n    log.info(logPrefix + 'integration started');\n    if (typeof SplitToGa.getGa() !== 'function') log.warn(logPrefix + (noGaWarning + \" No hits will be sent until it is available.\"));\n  }\n  // Default mapper function.\n  SplitToGa.defaultMapper = function (_a) {\n    var type = _a.type,\n      payload = _a.payload;\n    switch (type) {\n      case SPLIT_IMPRESSION:\n        return {\n          hitType: 'event',\n          eventCategory: 'split-impression',\n          eventAction: 'Evaluate ' + payload.impression.feature,\n          eventLabel: 'Treatment: ' + payload.impression.treatment + '. Targeting rule: ' + payload.impression.label + '.',\n          nonInteraction: true\n        };\n      case SPLIT_EVENT:\n        return {\n          hitType: 'event',\n          eventCategory: 'split-event',\n          eventAction: payload.eventTypeId,\n          eventValue: payload.value,\n          nonInteraction: true\n        };\n    }\n  };\n  // Util to access ga command queue, accounting for the possibility that it has been renamed.\n  SplitToGa.getGa = function () {\n    return typeof window !== 'undefined' ? window[window['GoogleAnalyticsObject'] || 'ga'] : undefined;\n  };\n  /**\n   * Validates if a given object is a UniversalAnalytics.FieldsObject instance, and logs a warning if not.\n   * It checks that the object contains a `hitType`, since it is the minimal field required to send the hit\n   * and avoid the GA error `No hit type specified. Aborting hit.`.\n   * Other validations (e.g., an `event` hitType must have a `eventCategory` and `eventAction`) are handled\n   * and logged (as warnings or errors depending the case) by GA debugger, but the hit is sent anyway.\n   *\n   * @param {object} log factory logger\n   * @param {UniversalAnalytics.FieldsObject} fieldsObject object to validate.\n   * @returns {boolean} Whether the data instance is a valid FieldsObject or not.\n   */\n  SplitToGa.validateFieldsObject = function (log, fieldsObject) {\n    if (fieldsObject && fieldsObject.hitType) return true;\n    log.warn(logPrefix + 'your custom mapper returned an invalid FieldsObject instance. It must be an object with at least a `hitType` field.');\n    return false;\n  };\n  SplitToGa.prototype.queue = function (data) {\n    // access ga command queue via `getGa` method, accounting for the possibility that\n    // the global `ga` reference was not yet mutated by analytics.js.\n    var ga = SplitToGa.getGa();\n    if (ga) {\n      if (this.impressions === false && data.type === SPLIT_IMPRESSION) return;\n      if (this.events === false && data.type === SPLIT_EVENT) return;\n      var fieldsObject_1;\n      try {\n        // only try/catch filter and mapper, which might be defined by the user\n        // filter\n        if (this.filter && !this.filter(data)) return;\n        // map data into a FieldsObject instance\n        fieldsObject_1 = SplitToGa.defaultMapper(data);\n        if (this.mapper) {\n          fieldsObject_1 = this.mapper(data, fieldsObject_1);\n          // don't send the hit if it is falsy or invalid\n          if (!fieldsObject_1 || !SplitToGa.validateFieldsObject(this.log, fieldsObject_1)) return;\n        }\n      } catch (err) {\n        this.log.warn(logPrefix + (\"queue method threw: \" + err + \". \" + noHit));\n        return;\n      }\n      // send the hit\n      this.trackerNames.forEach(function (trackerName) {\n        var sendCommand = trackerName ? trackerName + \".send\" : 'send';\n        // mark the hit as a Split one to avoid the loop.\n        fieldsObject_1.splitHit = true;\n        // Send to GA using our reference to the GA object.\n        ga(sendCommand, fieldsObject_1);\n      });\n    } else {\n      this.log.warn(logPrefix + (noGaWarning + \" \" + noHit));\n    }\n  };\n  // A falsy object represents the default tracker\n  SplitToGa.defaultTrackerNames = [''];\n  return SplitToGa;\n}();\nexport { SplitToGa };","map":{"version":3,"names":["uniq","SPLIT_IMPRESSION","SPLIT_EVENT","logPrefix","noGaWarning","noHit","SplitToGa","log","options","trackerNames","defaultTrackerNames","filter","mapper","Array","isArray","impressions","events","info","getGa","warn","defaultMapper","_a","type","payload","hitType","eventCategory","eventAction","impression","feature","eventLabel","treatment","label","nonInteraction","eventTypeId","eventValue","value","window","undefined","validateFieldsObject","fieldsObject","prototype","queue","data","ga","fieldsObject_1","err","forEach","trackerName","sendCommand","splitHit"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/integrations/ga/SplitToGa.js"],"sourcesContent":["/* eslint-disable no-undef */\nimport { uniq } from '../../utils/lang';\nimport { SPLIT_IMPRESSION, SPLIT_EVENT } from '../../utils/constants';\nvar logPrefix = 'split-to-ga: ';\nvar noGaWarning = '`ga` command queue not found.';\nvar noHit = 'No hit was sent.';\nvar SplitToGa = /** @class */ (function () {\n    /**\n     * constructor description\n     * @param {object} options options passed at the SDK integrations settings (isomorphic SDK) or the SplitToGoogleAnalytics plugin (pluggable browser SDK)\n     */\n    function SplitToGa(log, options) {\n        this.trackerNames = SplitToGa.defaultTrackerNames;\n        this.log = log;\n        if (options) {\n            if (typeof options.filter === 'function')\n                this.filter = options.filter;\n            if (typeof options.mapper === 'function')\n                this.mapper = options.mapper;\n            // We strip off duplicated values if we received a `trackerNames` param.\n            // We don't warn if a tracker does not exist, since the user might create it after the SDK is initialized.\n            // Note: GA allows to create and get trackers using a string or number as tracker name, and does nothing if other types are used.\n            if (Array.isArray(options.trackerNames))\n                this.trackerNames = uniq(options.trackerNames);\n            // No need to validate `impressions` and `events` flags. Any other value than `false` is ignored (considered true by default).\n            this.impressions = options.impressions;\n            this.events = options.events;\n        }\n        log.info(logPrefix + 'integration started');\n        if (typeof SplitToGa.getGa() !== 'function')\n            log.warn(logPrefix + (noGaWarning + \" No hits will be sent until it is available.\"));\n    }\n    // Default mapper function.\n    SplitToGa.defaultMapper = function (_a) {\n        var type = _a.type, payload = _a.payload;\n        switch (type) {\n            case SPLIT_IMPRESSION:\n                return {\n                    hitType: 'event',\n                    eventCategory: 'split-impression',\n                    eventAction: 'Evaluate ' + payload.impression.feature,\n                    eventLabel: 'Treatment: ' + payload.impression.treatment + '. Targeting rule: ' + payload.impression.label + '.',\n                    nonInteraction: true,\n                };\n            case SPLIT_EVENT:\n                return {\n                    hitType: 'event',\n                    eventCategory: 'split-event',\n                    eventAction: payload.eventTypeId,\n                    eventValue: payload.value,\n                    nonInteraction: true,\n                };\n        }\n    };\n    // Util to access ga command queue, accounting for the possibility that it has been renamed.\n    SplitToGa.getGa = function () {\n        return typeof window !== 'undefined' ? window[window['GoogleAnalyticsObject'] || 'ga'] : undefined;\n    };\n    /**\n     * Validates if a given object is a UniversalAnalytics.FieldsObject instance, and logs a warning if not.\n     * It checks that the object contains a `hitType`, since it is the minimal field required to send the hit\n     * and avoid the GA error `No hit type specified. Aborting hit.`.\n     * Other validations (e.g., an `event` hitType must have a `eventCategory` and `eventAction`) are handled\n     * and logged (as warnings or errors depending the case) by GA debugger, but the hit is sent anyway.\n     *\n     * @param {object} log factory logger\n     * @param {UniversalAnalytics.FieldsObject} fieldsObject object to validate.\n     * @returns {boolean} Whether the data instance is a valid FieldsObject or not.\n     */\n    SplitToGa.validateFieldsObject = function (log, fieldsObject) {\n        if (fieldsObject && fieldsObject.hitType)\n            return true;\n        log.warn(logPrefix + 'your custom mapper returned an invalid FieldsObject instance. It must be an object with at least a `hitType` field.');\n        return false;\n    };\n    SplitToGa.prototype.queue = function (data) {\n        // access ga command queue via `getGa` method, accounting for the possibility that\n        // the global `ga` reference was not yet mutated by analytics.js.\n        var ga = SplitToGa.getGa();\n        if (ga) {\n            if (this.impressions === false && data.type === SPLIT_IMPRESSION)\n                return;\n            if (this.events === false && data.type === SPLIT_EVENT)\n                return;\n            var fieldsObject_1;\n            try { // only try/catch filter and mapper, which might be defined by the user\n                // filter\n                if (this.filter && !this.filter(data))\n                    return;\n                // map data into a FieldsObject instance\n                fieldsObject_1 = SplitToGa.defaultMapper(data);\n                if (this.mapper) {\n                    fieldsObject_1 = this.mapper(data, fieldsObject_1);\n                    // don't send the hit if it is falsy or invalid\n                    if (!fieldsObject_1 || !SplitToGa.validateFieldsObject(this.log, fieldsObject_1))\n                        return;\n                }\n            }\n            catch (err) {\n                this.log.warn(logPrefix + (\"queue method threw: \" + err + \". \" + noHit));\n                return;\n            }\n            // send the hit\n            this.trackerNames.forEach(function (trackerName) {\n                var sendCommand = trackerName ? trackerName + \".send\" : 'send';\n                // mark the hit as a Split one to avoid the loop.\n                fieldsObject_1.splitHit = true;\n                // Send to GA using our reference to the GA object.\n                ga(sendCommand, fieldsObject_1);\n            });\n        }\n        else {\n            this.log.warn(logPrefix + (noGaWarning + \" \" + noHit));\n        }\n    };\n    // A falsy object represents the default tracker\n    SplitToGa.defaultTrackerNames = [''];\n    return SplitToGa;\n}());\nexport { SplitToGa };\n"],"mappings":"AAAA;AACA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,gBAAgB,EAAEC,WAAW,QAAQ,uBAAuB;AACrE,IAAIC,SAAS,GAAG,eAAe;AAC/B,IAAIC,WAAW,GAAG,+BAA+B;AACjD,IAAIC,KAAK,GAAG,kBAAkB;AAC9B,IAAIC,SAAS,GAAG,aAAe,YAAY;EACvC;AACJ;AACA;AACA;EACI,SAASA,SAAS,CAACC,GAAG,EAAEC,OAAO,EAAE;IAC7B,IAAI,CAACC,YAAY,GAAGH,SAAS,CAACI,mBAAmB;IACjD,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAIC,OAAO,EAAE;MACT,IAAI,OAAOA,OAAO,CAACG,MAAM,KAAK,UAAU,EACpC,IAAI,CAACA,MAAM,GAAGH,OAAO,CAACG,MAAM;MAChC,IAAI,OAAOH,OAAO,CAACI,MAAM,KAAK,UAAU,EACpC,IAAI,CAACA,MAAM,GAAGJ,OAAO,CAACI,MAAM;MAChC;MACA;MACA;MACA,IAAIC,KAAK,CAACC,OAAO,CAACN,OAAO,CAACC,YAAY,CAAC,EACnC,IAAI,CAACA,YAAY,GAAGT,IAAI,CAACQ,OAAO,CAACC,YAAY,CAAC;MAClD;MACA,IAAI,CAACM,WAAW,GAAGP,OAAO,CAACO,WAAW;MACtC,IAAI,CAACC,MAAM,GAAGR,OAAO,CAACQ,MAAM;IAChC;IACAT,GAAG,CAACU,IAAI,CAACd,SAAS,GAAG,qBAAqB,CAAC;IAC3C,IAAI,OAAOG,SAAS,CAACY,KAAK,EAAE,KAAK,UAAU,EACvCX,GAAG,CAACY,IAAI,CAAChB,SAAS,IAAIC,WAAW,GAAG,8CAA8C,CAAC,CAAC;EAC5F;EACA;EACAE,SAAS,CAACc,aAAa,GAAG,UAAUC,EAAE,EAAE;IACpC,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAI;MAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;IACxC,QAAQD,IAAI;MACR,KAAKrB,gBAAgB;QACjB,OAAO;UACHuB,OAAO,EAAE,OAAO;UAChBC,aAAa,EAAE,kBAAkB;UACjCC,WAAW,EAAE,WAAW,GAAGH,OAAO,CAACI,UAAU,CAACC,OAAO;UACrDC,UAAU,EAAE,aAAa,GAAGN,OAAO,CAACI,UAAU,CAACG,SAAS,GAAG,oBAAoB,GAAGP,OAAO,CAACI,UAAU,CAACI,KAAK,GAAG,GAAG;UAChHC,cAAc,EAAE;QACpB,CAAC;MACL,KAAK9B,WAAW;QACZ,OAAO;UACHsB,OAAO,EAAE,OAAO;UAChBC,aAAa,EAAE,aAAa;UAC5BC,WAAW,EAAEH,OAAO,CAACU,WAAW;UAChCC,UAAU,EAAEX,OAAO,CAACY,KAAK;UACzBH,cAAc,EAAE;QACpB,CAAC;IAAC;EAEd,CAAC;EACD;EACA1B,SAAS,CAACY,KAAK,GAAG,YAAY;IAC1B,OAAO,OAAOkB,MAAM,KAAK,WAAW,GAAGA,MAAM,CAACA,MAAM,CAAC,uBAAuB,CAAC,IAAI,IAAI,CAAC,GAAGC,SAAS;EACtG,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/B,SAAS,CAACgC,oBAAoB,GAAG,UAAU/B,GAAG,EAAEgC,YAAY,EAAE;IAC1D,IAAIA,YAAY,IAAIA,YAAY,CAACf,OAAO,EACpC,OAAO,IAAI;IACfjB,GAAG,CAACY,IAAI,CAAChB,SAAS,GAAG,qHAAqH,CAAC;IAC3I,OAAO,KAAK;EAChB,CAAC;EACDG,SAAS,CAACkC,SAAS,CAACC,KAAK,GAAG,UAAUC,IAAI,EAAE;IACxC;IACA;IACA,IAAIC,EAAE,GAAGrC,SAAS,CAACY,KAAK,EAAE;IAC1B,IAAIyB,EAAE,EAAE;MACJ,IAAI,IAAI,CAAC5B,WAAW,KAAK,KAAK,IAAI2B,IAAI,CAACpB,IAAI,KAAKrB,gBAAgB,EAC5D;MACJ,IAAI,IAAI,CAACe,MAAM,KAAK,KAAK,IAAI0B,IAAI,CAACpB,IAAI,KAAKpB,WAAW,EAClD;MACJ,IAAI0C,cAAc;MAClB,IAAI;QAAE;QACF;QACA,IAAI,IAAI,CAACjC,MAAM,IAAI,CAAC,IAAI,CAACA,MAAM,CAAC+B,IAAI,CAAC,EACjC;QACJ;QACAE,cAAc,GAAGtC,SAAS,CAACc,aAAa,CAACsB,IAAI,CAAC;QAC9C,IAAI,IAAI,CAAC9B,MAAM,EAAE;UACbgC,cAAc,GAAG,IAAI,CAAChC,MAAM,CAAC8B,IAAI,EAAEE,cAAc,CAAC;UAClD;UACA,IAAI,CAACA,cAAc,IAAI,CAACtC,SAAS,CAACgC,oBAAoB,CAAC,IAAI,CAAC/B,GAAG,EAAEqC,cAAc,CAAC,EAC5E;QACR;MACJ,CAAC,CACD,OAAOC,GAAG,EAAE;QACR,IAAI,CAACtC,GAAG,CAACY,IAAI,CAAChB,SAAS,IAAI,sBAAsB,GAAG0C,GAAG,GAAG,IAAI,GAAGxC,KAAK,CAAC,CAAC;QACxE;MACJ;MACA;MACA,IAAI,CAACI,YAAY,CAACqC,OAAO,CAAC,UAAUC,WAAW,EAAE;QAC7C,IAAIC,WAAW,GAAGD,WAAW,GAAGA,WAAW,GAAG,OAAO,GAAG,MAAM;QAC9D;QACAH,cAAc,CAACK,QAAQ,GAAG,IAAI;QAC9B;QACAN,EAAE,CAACK,WAAW,EAAEJ,cAAc,CAAC;MACnC,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAACrC,GAAG,CAACY,IAAI,CAAChB,SAAS,IAAIC,WAAW,GAAG,GAAG,GAAGC,KAAK,CAAC,CAAC;IAC1D;EACJ,CAAC;EACD;EACAC,SAAS,CAACI,mBAAmB,GAAG,CAAC,EAAE,CAAC;EACpC,OAAOJ,SAAS;AACpB,CAAC,EAAG;AACJ,SAASA,SAAS"},"metadata":{},"sourceType":"module"}