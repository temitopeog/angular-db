{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractSplitsCacheSync, usesSegments } from '../AbstractSplitsCacheSync';\nimport { isFiniteNumber } from '../../utils/lang';\n/**\n * Default ISplitsCacheSync implementation that stores split definitions in memory.\n * Supported by all JS runtimes.\n */\nvar SplitsCacheInMemory = /** @class */function (_super) {\n  __extends(SplitsCacheInMemory, _super);\n  function SplitsCacheInMemory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.splitsCache = {};\n    _this.ttCache = {};\n    _this.changeNumber = -1;\n    _this.splitsWithSegmentsCount = 0;\n    return _this;\n  }\n  SplitsCacheInMemory.prototype.clear = function () {\n    this.splitsCache = {};\n    this.ttCache = {};\n    this.changeNumber = -1;\n    this.splitsWithSegmentsCount = 0;\n  };\n  SplitsCacheInMemory.prototype.addSplit = function (name, split) {\n    var splitFromMemory = this.getSplit(name);\n    if (splitFromMemory) {\n      // We had this Split already\n      var previousSplit = JSON.parse(splitFromMemory);\n      if (previousSplit.trafficTypeName) {\n        var previousTtName = previousSplit.trafficTypeName;\n        this.ttCache[previousTtName]--;\n        if (!this.ttCache[previousTtName]) delete this.ttCache[previousTtName];\n      }\n      if (usesSegments(previousSplit)) {\n        // Substract from segments count for the previous version of this Split.\n        this.splitsWithSegmentsCount--;\n      }\n    }\n    var parsedSplit = JSON.parse(split);\n    if (parsedSplit) {\n      // Store the Split.\n      this.splitsCache[name] = split;\n      // Update TT cache\n      var ttName = parsedSplit.trafficTypeName;\n      if (ttName) {\n        // safeguard\n        if (!this.ttCache[ttName]) this.ttCache[ttName] = 0;\n        this.ttCache[ttName]++;\n      }\n      // Add to segments count for the new version of the Split\n      if (usesSegments(parsedSplit)) this.splitsWithSegmentsCount++;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  SplitsCacheInMemory.prototype.removeSplit = function (name) {\n    var split = this.getSplit(name);\n    if (split) {\n      // Delete the Split\n      delete this.splitsCache[name];\n      var parsedSplit = JSON.parse(split);\n      var ttName = parsedSplit.trafficTypeName;\n      if (ttName) {\n        // safeguard\n        this.ttCache[ttName]--; // Update tt cache\n        if (!this.ttCache[ttName]) delete this.ttCache[ttName];\n      }\n      // Update the segments count.\n      if (usesSegments(parsedSplit)) this.splitsWithSegmentsCount--;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  SplitsCacheInMemory.prototype.getSplit = function (name) {\n    return this.splitsCache[name] || null;\n  };\n  SplitsCacheInMemory.prototype.setChangeNumber = function (changeNumber) {\n    this.changeNumber = changeNumber;\n    return true;\n  };\n  SplitsCacheInMemory.prototype.getChangeNumber = function () {\n    return this.changeNumber;\n  };\n  SplitsCacheInMemory.prototype.getSplitNames = function () {\n    return Object.keys(this.splitsCache);\n  };\n  SplitsCacheInMemory.prototype.trafficTypeExists = function (trafficType) {\n    return isFiniteNumber(this.ttCache[trafficType]) && this.ttCache[trafficType] > 0;\n  };\n  SplitsCacheInMemory.prototype.usesSegments = function () {\n    return this.getChangeNumber() === -1 || this.splitsWithSegmentsCount > 0;\n  };\n  return SplitsCacheInMemory;\n}(AbstractSplitsCacheSync);\nexport { SplitsCacheInMemory };","map":{"version":3,"names":["__extends","AbstractSplitsCacheSync","usesSegments","isFiniteNumber","SplitsCacheInMemory","_super","_this","apply","arguments","splitsCache","ttCache","changeNumber","splitsWithSegmentsCount","prototype","clear","addSplit","name","split","splitFromMemory","getSplit","previousSplit","JSON","parse","trafficTypeName","previousTtName","parsedSplit","ttName","removeSplit","setChangeNumber","getChangeNumber","getSplitNames","Object","keys","trafficTypeExists","trafficType"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inMemory/SplitsCacheInMemory.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractSplitsCacheSync, usesSegments } from '../AbstractSplitsCacheSync';\nimport { isFiniteNumber } from '../../utils/lang';\n/**\n * Default ISplitsCacheSync implementation that stores split definitions in memory.\n * Supported by all JS runtimes.\n */\nvar SplitsCacheInMemory = /** @class */ (function (_super) {\n    __extends(SplitsCacheInMemory, _super);\n    function SplitsCacheInMemory() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.splitsCache = {};\n        _this.ttCache = {};\n        _this.changeNumber = -1;\n        _this.splitsWithSegmentsCount = 0;\n        return _this;\n    }\n    SplitsCacheInMemory.prototype.clear = function () {\n        this.splitsCache = {};\n        this.ttCache = {};\n        this.changeNumber = -1;\n        this.splitsWithSegmentsCount = 0;\n    };\n    SplitsCacheInMemory.prototype.addSplit = function (name, split) {\n        var splitFromMemory = this.getSplit(name);\n        if (splitFromMemory) { // We had this Split already\n            var previousSplit = JSON.parse(splitFromMemory);\n            if (previousSplit.trafficTypeName) {\n                var previousTtName = previousSplit.trafficTypeName;\n                this.ttCache[previousTtName]--;\n                if (!this.ttCache[previousTtName])\n                    delete this.ttCache[previousTtName];\n            }\n            if (usesSegments(previousSplit)) { // Substract from segments count for the previous version of this Split.\n                this.splitsWithSegmentsCount--;\n            }\n        }\n        var parsedSplit = JSON.parse(split);\n        if (parsedSplit) {\n            // Store the Split.\n            this.splitsCache[name] = split;\n            // Update TT cache\n            var ttName = parsedSplit.trafficTypeName;\n            if (ttName) { // safeguard\n                if (!this.ttCache[ttName])\n                    this.ttCache[ttName] = 0;\n                this.ttCache[ttName]++;\n            }\n            // Add to segments count for the new version of the Split\n            if (usesSegments(parsedSplit))\n                this.splitsWithSegmentsCount++;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    SplitsCacheInMemory.prototype.removeSplit = function (name) {\n        var split = this.getSplit(name);\n        if (split) {\n            // Delete the Split\n            delete this.splitsCache[name];\n            var parsedSplit = JSON.parse(split);\n            var ttName = parsedSplit.trafficTypeName;\n            if (ttName) { // safeguard\n                this.ttCache[ttName]--; // Update tt cache\n                if (!this.ttCache[ttName])\n                    delete this.ttCache[ttName];\n            }\n            // Update the segments count.\n            if (usesSegments(parsedSplit))\n                this.splitsWithSegmentsCount--;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    SplitsCacheInMemory.prototype.getSplit = function (name) {\n        return this.splitsCache[name] || null;\n    };\n    SplitsCacheInMemory.prototype.setChangeNumber = function (changeNumber) {\n        this.changeNumber = changeNumber;\n        return true;\n    };\n    SplitsCacheInMemory.prototype.getChangeNumber = function () {\n        return this.changeNumber;\n    };\n    SplitsCacheInMemory.prototype.getSplitNames = function () {\n        return Object.keys(this.splitsCache);\n    };\n    SplitsCacheInMemory.prototype.trafficTypeExists = function (trafficType) {\n        return isFiniteNumber(this.ttCache[trafficType]) && this.ttCache[trafficType] > 0;\n    };\n    SplitsCacheInMemory.prototype.usesSegments = function () {\n        return this.getChangeNumber() === -1 || this.splitsWithSegmentsCount > 0;\n    };\n    return SplitsCacheInMemory;\n}(AbstractSplitsCacheSync));\nexport { SplitsCacheInMemory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}