{"ast":null,"code":"import { sdkReadinessManagerFactory } from '../readiness/sdkReadinessManager';\nimport { impressionsTrackerFactory } from '../trackers/impressionsTracker';\nimport { eventTrackerFactory } from '../trackers/eventTracker';\nimport { telemetryTrackerFactory } from '../trackers/telemetryTracker';\nimport { getMatching } from '../utils/key';\nimport { shouldBeOptimized } from '../trackers/impressionObserver/utils';\nimport { validateAndTrackApiKey } from '../utils/inputValidation/apiKey';\nimport { createLoggerAPI } from '../logger/sdkLogger';\nimport { NEW_FACTORY, RETRIEVE_MANAGER } from '../logger/constants';\nimport { metadataBuilder } from '../storages/metadataBuilder';\nimport { SDK_SPLITS_ARRIVED, SDK_SEGMENTS_ARRIVED } from '../readiness/constants';\nimport { objectAssign } from '../utils/lang/objectAssign';\n/**\n * Modular SDK factory\n */\nexport function sdkFactory(params) {\n  var settings = params.settings,\n    platform = params.platform,\n    storageFactory = params.storageFactory,\n    splitApiFactory = params.splitApiFactory,\n    extraProps = params.extraProps,\n    syncManagerFactory = params.syncManagerFactory,\n    SignalListener = params.SignalListener,\n    impressionsObserverFactory = params.impressionsObserverFactory,\n    integrationsManagerFactory = params.integrationsManagerFactory,\n    sdkManagerFactory = params.sdkManagerFactory,\n    sdkClientMethodFactory = params.sdkClientMethodFactory;\n  var log = settings.log;\n  // @TODO handle non-recoverable errors, such as, global `fetch` not available, invalid API Key, etc.\n  // On non-recoverable errors, we should mark the SDK as destroyed and not start synchronization.\n  // We will just log and allow for the SDK to end up throwing an SDK_TIMEOUT event for devs to handle.\n  validateAndTrackApiKey(log, settings.core.authorizationKey);\n  var sdkReadinessManager = sdkReadinessManagerFactory(log, platform.EventEmitter, settings.startup.readyTimeout);\n  var readiness = sdkReadinessManager.readinessManager;\n  // @TODO consider passing the settings object, so that each storage access only what it needs\n  var storageFactoryParams = {\n    impressionsQueueSize: settings.scheduler.impressionsQueueSize,\n    eventsQueueSize: settings.scheduler.eventsQueueSize,\n    optimize: shouldBeOptimized(settings),\n    // ATM, only used by InLocalStorage\n    matchingKey: getMatching(settings.core.key),\n    splitFiltersValidation: settings.sync.__splitFiltersValidation,\n    // ATM, only used by PluggableStorage\n    mode: settings.mode,\n    // Callback used to emit SDK_READY in consumer mode, where `syncManagerFactory` is undefined,\n    // or partial consumer mode, where it only has submitters, and therefore it doesn't emit readiness events.\n    onReadyCb: function (error) {\n      if (error) return; // Don't emit SDK_READY if storage failed to connect. Error message is logged by wrapperAdapter\n      readiness.splits.emit(SDK_SPLITS_ARRIVED);\n      readiness.segments.emit(SDK_SEGMENTS_ARRIVED);\n    },\n    metadata: metadataBuilder(settings),\n    log: log\n  };\n  var storage = storageFactory(storageFactoryParams);\n  // @TODO add support for dataloader: `if (params.dataLoader) params.dataLoader(storage);`\n  var integrationsManager = integrationsManagerFactory && integrationsManagerFactory({\n    settings: settings,\n    storage: storage\n  });\n  // trackers\n  var observer = impressionsObserverFactory && impressionsObserverFactory();\n  var impressionsTracker = impressionsTrackerFactory(settings, storage.impressions, integrationsManager, observer, storage.impressionCounts, storage.telemetry);\n  var eventTracker = eventTrackerFactory(settings, storage.events, integrationsManager, storage.telemetry);\n  var telemetryTracker = telemetryTrackerFactory(storage.telemetry, platform.now);\n  // splitApi is used by SyncManager and Browser signal listener\n  var splitApi = splitApiFactory && splitApiFactory(settings, platform, telemetryTracker);\n  var ctx = {\n    splitApi: splitApi,\n    eventTracker: eventTracker,\n    impressionsTracker: impressionsTracker,\n    telemetryTracker: telemetryTracker,\n    sdkReadinessManager: sdkReadinessManager,\n    readiness: readiness,\n    settings: settings,\n    storage: storage,\n    platform: platform\n  };\n  var syncManager = syncManagerFactory && syncManagerFactory(ctx);\n  ctx.syncManager = syncManager;\n  var signalListener = SignalListener && new SignalListener(syncManager, settings, storage, splitApi);\n  ctx.signalListener = signalListener;\n  // SDK client and manager\n  var clientMethod = sdkClientMethodFactory(ctx);\n  var managerInstance = sdkManagerFactory(log, storage.splits, sdkReadinessManager);\n  syncManager && syncManager.start();\n  signalListener && signalListener.start();\n  log.info(NEW_FACTORY);\n  // @ts-ignore\n  return objectAssign({\n    // Split evaluation and event tracking engine\n    client: clientMethod,\n    // Manager API to explore available information\n    manager: function () {\n      log.debug(RETRIEVE_MANAGER);\n      return managerInstance;\n    },\n    // Logger wrapper API\n    Logger: createLoggerAPI(settings.log),\n    settings: settings\n  }, extraProps && extraProps(ctx));\n}","map":{"version":3,"names":["sdkReadinessManagerFactory","impressionsTrackerFactory","eventTrackerFactory","telemetryTrackerFactory","getMatching","shouldBeOptimized","validateAndTrackApiKey","createLoggerAPI","NEW_FACTORY","RETRIEVE_MANAGER","metadataBuilder","SDK_SPLITS_ARRIVED","SDK_SEGMENTS_ARRIVED","objectAssign","sdkFactory","params","settings","platform","storageFactory","splitApiFactory","extraProps","syncManagerFactory","SignalListener","impressionsObserverFactory","integrationsManagerFactory","sdkManagerFactory","sdkClientMethodFactory","log","core","authorizationKey","sdkReadinessManager","EventEmitter","startup","readyTimeout","readiness","readinessManager","storageFactoryParams","impressionsQueueSize","scheduler","eventsQueueSize","optimize","matchingKey","key","splitFiltersValidation","sync","__splitFiltersValidation","mode","onReadyCb","error","splits","emit","segments","metadata","storage","integrationsManager","observer","impressionsTracker","impressions","impressionCounts","telemetry","eventTracker","events","telemetryTracker","now","splitApi","ctx","syncManager","signalListener","clientMethod","managerInstance","start","info","client","manager","debug","Logger"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sdkFactory/index.js"],"sourcesContent":["import { sdkReadinessManagerFactory } from '../readiness/sdkReadinessManager';\nimport { impressionsTrackerFactory } from '../trackers/impressionsTracker';\nimport { eventTrackerFactory } from '../trackers/eventTracker';\nimport { telemetryTrackerFactory } from '../trackers/telemetryTracker';\nimport { getMatching } from '../utils/key';\nimport { shouldBeOptimized } from '../trackers/impressionObserver/utils';\nimport { validateAndTrackApiKey } from '../utils/inputValidation/apiKey';\nimport { createLoggerAPI } from '../logger/sdkLogger';\nimport { NEW_FACTORY, RETRIEVE_MANAGER } from '../logger/constants';\nimport { metadataBuilder } from '../storages/metadataBuilder';\nimport { SDK_SPLITS_ARRIVED, SDK_SEGMENTS_ARRIVED } from '../readiness/constants';\nimport { objectAssign } from '../utils/lang/objectAssign';\n/**\n * Modular SDK factory\n */\nexport function sdkFactory(params) {\n    var settings = params.settings, platform = params.platform, storageFactory = params.storageFactory, splitApiFactory = params.splitApiFactory, extraProps = params.extraProps, syncManagerFactory = params.syncManagerFactory, SignalListener = params.SignalListener, impressionsObserverFactory = params.impressionsObserverFactory, integrationsManagerFactory = params.integrationsManagerFactory, sdkManagerFactory = params.sdkManagerFactory, sdkClientMethodFactory = params.sdkClientMethodFactory;\n    var log = settings.log;\n    // @TODO handle non-recoverable errors, such as, global `fetch` not available, invalid API Key, etc.\n    // On non-recoverable errors, we should mark the SDK as destroyed and not start synchronization.\n    // We will just log and allow for the SDK to end up throwing an SDK_TIMEOUT event for devs to handle.\n    validateAndTrackApiKey(log, settings.core.authorizationKey);\n    var sdkReadinessManager = sdkReadinessManagerFactory(log, platform.EventEmitter, settings.startup.readyTimeout);\n    var readiness = sdkReadinessManager.readinessManager;\n    // @TODO consider passing the settings object, so that each storage access only what it needs\n    var storageFactoryParams = {\n        impressionsQueueSize: settings.scheduler.impressionsQueueSize,\n        eventsQueueSize: settings.scheduler.eventsQueueSize,\n        optimize: shouldBeOptimized(settings),\n        // ATM, only used by InLocalStorage\n        matchingKey: getMatching(settings.core.key),\n        splitFiltersValidation: settings.sync.__splitFiltersValidation,\n        // ATM, only used by PluggableStorage\n        mode: settings.mode,\n        // Callback used to emit SDK_READY in consumer mode, where `syncManagerFactory` is undefined,\n        // or partial consumer mode, where it only has submitters, and therefore it doesn't emit readiness events.\n        onReadyCb: function (error) {\n            if (error)\n                return; // Don't emit SDK_READY if storage failed to connect. Error message is logged by wrapperAdapter\n            readiness.splits.emit(SDK_SPLITS_ARRIVED);\n            readiness.segments.emit(SDK_SEGMENTS_ARRIVED);\n        },\n        metadata: metadataBuilder(settings),\n        log: log\n    };\n    var storage = storageFactory(storageFactoryParams);\n    // @TODO add support for dataloader: `if (params.dataLoader) params.dataLoader(storage);`\n    var integrationsManager = integrationsManagerFactory && integrationsManagerFactory({ settings: settings, storage: storage });\n    // trackers\n    var observer = impressionsObserverFactory && impressionsObserverFactory();\n    var impressionsTracker = impressionsTrackerFactory(settings, storage.impressions, integrationsManager, observer, storage.impressionCounts, storage.telemetry);\n    var eventTracker = eventTrackerFactory(settings, storage.events, integrationsManager, storage.telemetry);\n    var telemetryTracker = telemetryTrackerFactory(storage.telemetry, platform.now);\n    // splitApi is used by SyncManager and Browser signal listener\n    var splitApi = splitApiFactory && splitApiFactory(settings, platform, telemetryTracker);\n    var ctx = { splitApi: splitApi, eventTracker: eventTracker, impressionsTracker: impressionsTracker, telemetryTracker: telemetryTracker, sdkReadinessManager: sdkReadinessManager, readiness: readiness, settings: settings, storage: storage, platform: platform };\n    var syncManager = syncManagerFactory && syncManagerFactory(ctx);\n    ctx.syncManager = syncManager;\n    var signalListener = SignalListener && new SignalListener(syncManager, settings, storage, splitApi);\n    ctx.signalListener = signalListener;\n    // SDK client and manager\n    var clientMethod = sdkClientMethodFactory(ctx);\n    var managerInstance = sdkManagerFactory(log, storage.splits, sdkReadinessManager);\n    syncManager && syncManager.start();\n    signalListener && signalListener.start();\n    log.info(NEW_FACTORY);\n    // @ts-ignore\n    return objectAssign({\n        // Split evaluation and event tracking engine\n        client: clientMethod,\n        // Manager API to explore available information\n        manager: function () {\n            log.debug(RETRIEVE_MANAGER);\n            return managerInstance;\n        },\n        // Logger wrapper API\n        Logger: createLoggerAPI(settings.log),\n        settings: settings,\n    }, extraProps && extraProps(ctx));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}