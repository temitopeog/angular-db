{"ast":null,"code":"import { objectAssign } from '../utils/lang/objectAssign';\nimport { releaseApiKey } from '../utils/inputValidation/apiKey';\nimport { clientFactory } from './client';\nimport { clientInputValidationDecorator } from './clientInputValidation';\n/**\n * Creates an Sdk client, i.e., a base client with status and destroy interface\n */\nexport function sdkClientFactory(params, isSharedClient) {\n  var sdkReadinessManager = params.sdkReadinessManager,\n    syncManager = params.syncManager,\n    storage = params.storage,\n    signalListener = params.signalListener,\n    settings = params.settings,\n    telemetryTracker = params.telemetryTracker;\n  return objectAssign(\n  // Proto-linkage of the readiness Event Emitter\n  Object.create(sdkReadinessManager.sdkStatus),\n  // Client API (getTreatment* & track methods)\n  clientInputValidationDecorator(settings, clientFactory(params), sdkReadinessManager.readinessManager),\n  // Sdk destroy\n  {\n    destroy: function () {\n      // record stat before flushing data\n      if (!isSharedClient) telemetryTracker.sessionLength();\n      // Stop background jobs\n      syncManager && syncManager.stop();\n      var flush = syncManager ? syncManager.flush() : Promise.resolve();\n      return flush.then(function () {\n        // Cleanup event listeners\n        sdkReadinessManager.readinessManager.destroy();\n        signalListener && signalListener.stop();\n        // Release the API Key if it is the main client\n        if (!isSharedClient) releaseApiKey(settings.core.authorizationKey);\n        // Cleanup storage\n        return storage.destroy();\n      });\n    }\n  });\n}","map":{"version":3,"names":["objectAssign","releaseApiKey","clientFactory","clientInputValidationDecorator","sdkClientFactory","params","isSharedClient","sdkReadinessManager","syncManager","storage","signalListener","settings","telemetryTracker","Object","create","sdkStatus","readinessManager","destroy","sessionLength","stop","flush","Promise","resolve","then","core","authorizationKey"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sdkClient/sdkClient.js"],"sourcesContent":["import { objectAssign } from '../utils/lang/objectAssign';\nimport { releaseApiKey } from '../utils/inputValidation/apiKey';\nimport { clientFactory } from './client';\nimport { clientInputValidationDecorator } from './clientInputValidation';\n/**\n * Creates an Sdk client, i.e., a base client with status and destroy interface\n */\nexport function sdkClientFactory(params, isSharedClient) {\n    var sdkReadinessManager = params.sdkReadinessManager, syncManager = params.syncManager, storage = params.storage, signalListener = params.signalListener, settings = params.settings, telemetryTracker = params.telemetryTracker;\n    return objectAssign(\n    // Proto-linkage of the readiness Event Emitter\n    Object.create(sdkReadinessManager.sdkStatus), \n    // Client API (getTreatment* & track methods)\n    clientInputValidationDecorator(settings, clientFactory(params), sdkReadinessManager.readinessManager), \n    // Sdk destroy\n    {\n        destroy: function () {\n            // record stat before flushing data\n            if (!isSharedClient)\n                telemetryTracker.sessionLength();\n            // Stop background jobs\n            syncManager && syncManager.stop();\n            var flush = syncManager ? syncManager.flush() : Promise.resolve();\n            return flush.then(function () {\n                // Cleanup event listeners\n                sdkReadinessManager.readinessManager.destroy();\n                signalListener && signalListener.stop();\n                // Release the API Key if it is the main client\n                if (!isSharedClient)\n                    releaseApiKey(settings.core.authorizationKey);\n                // Cleanup storage\n                return storage.destroy();\n            });\n        }\n    });\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,4BAA4B;AACzD,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,aAAa,QAAQ,UAAU;AACxC,SAASC,8BAA8B,QAAQ,yBAAyB;AACxE;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAACC,MAAM,EAAEC,cAAc,EAAE;EACrD,IAAIC,mBAAmB,GAAGF,MAAM,CAACE,mBAAmB;IAAEC,WAAW,GAAGH,MAAM,CAACG,WAAW;IAAEC,OAAO,GAAGJ,MAAM,CAACI,OAAO;IAAEC,cAAc,GAAGL,MAAM,CAACK,cAAc;IAAEC,QAAQ,GAAGN,MAAM,CAACM,QAAQ;IAAEC,gBAAgB,GAAGP,MAAM,CAACO,gBAAgB;EAChO,OAAOZ,YAAY;EACnB;EACAa,MAAM,CAACC,MAAM,CAACP,mBAAmB,CAACQ,SAAS,CAAC;EAC5C;EACAZ,8BAA8B,CAACQ,QAAQ,EAAET,aAAa,CAACG,MAAM,CAAC,EAAEE,mBAAmB,CAACS,gBAAgB,CAAC;EACrG;EACA;IACIC,OAAO,EAAE,YAAY;MACjB;MACA,IAAI,CAACX,cAAc,EACfM,gBAAgB,CAACM,aAAa,EAAE;MACpC;MACAV,WAAW,IAAIA,WAAW,CAACW,IAAI,EAAE;MACjC,IAAIC,KAAK,GAAGZ,WAAW,GAAGA,WAAW,CAACY,KAAK,EAAE,GAAGC,OAAO,CAACC,OAAO,EAAE;MACjE,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY;QAC1B;QACAhB,mBAAmB,CAACS,gBAAgB,CAACC,OAAO,EAAE;QAC9CP,cAAc,IAAIA,cAAc,CAACS,IAAI,EAAE;QACvC;QACA,IAAI,CAACb,cAAc,EACfL,aAAa,CAACU,QAAQ,CAACa,IAAI,CAACC,gBAAgB,CAAC;QACjD;QACA,OAAOhB,OAAO,CAACQ,OAAO,EAAE;MAC5B,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}