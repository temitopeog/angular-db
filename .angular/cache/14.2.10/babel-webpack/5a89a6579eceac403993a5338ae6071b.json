{"ast":null,"code":"import { objectAssign } from '../utils/lang/objectAssign';\nimport { ERROR_HTTP, ERROR_CLIENT_CANNOT_GET_READY } from '../logger/constants';\nvar messageNoFetch = 'Global fetch API is not available.';\n/**\n * Factory of Split HTTP clients, which are HTTP clients with predefined headers for Split endpoints.\n *\n * @param settings SDK settings, used to access authorizationKey, logger instance and metadata (SDK version, ip and hostname) to set additional headers\n * @param options global request options\n * @param fetch optional http client to use instead of the global Fetch (for environments where Fetch API is not available such as Node)\n */\nexport function splitHttpClientFactory(settings, getFetch, getOptions) {\n  var log = settings.log,\n    authorizationKey = settings.core.authorizationKey,\n    version = settings.version,\n    _a = settings.runtime,\n    ip = _a.ip,\n    hostname = _a.hostname;\n  var options = getOptions && getOptions();\n  var fetch = getFetch && getFetch();\n  // if fetch is not available, log Error\n  if (!fetch) log.error(ERROR_CLIENT_CANNOT_GET_READY, [messageNoFetch]);\n  var headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'Authorization': \"Bearer \" + authorizationKey,\n    'SplitSDKVersion': version\n  };\n  if (ip) headers['SplitSDKMachineIP'] = ip;\n  if (hostname) headers['SplitSDKMachineName'] = hostname;\n  return function httpClient(url, reqOpts, latencyTracker, logErrorsAsInfo) {\n    if (reqOpts === void 0) {\n      reqOpts = {};\n    }\n    if (latencyTracker === void 0) {\n      latencyTracker = function () {};\n    }\n    if (logErrorsAsInfo === void 0) {\n      logErrorsAsInfo = false;\n    }\n    var request = objectAssign({\n      headers: reqOpts.headers ? objectAssign({}, headers, reqOpts.headers) : headers,\n      method: reqOpts.method || 'GET',\n      body: reqOpts.body\n    }, options);\n    // using `fetch(url, options)` signature to work with unfetch, a lightweight ponyfill of fetch API.\n    return fetch ? fetch(url, request)\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful\n    .then(function (response) {\n      if (!response.ok) {\n        return response.text().then(function (message) {\n          return Promise.reject({\n            response: response,\n            message: message\n          });\n        });\n      }\n      latencyTracker();\n      return response;\n    }).catch(function (error) {\n      var resp = error && error.response;\n      var msg = '';\n      if (resp) {\n        // An HTTP error\n        switch (resp.status) {\n          case 404:\n            msg = 'Invalid API key or resource not found.';\n            break;\n          // Don't use resp.statusText since reason phrase is removed in HTTP/2\n          default:\n            msg = error.message;\n            break;\n        }\n      } else {\n        // Something else, either an error making the request or a Network error.\n        msg = error.message || 'Network Error';\n      }\n      if (!resp || resp.status !== 403) {\n        // 403's log we'll be handled somewhere else.\n        log[logErrorsAsInfo ? 'info' : 'error'](ERROR_HTTP, [resp ? resp.status : 'NO_STATUS', url, msg]);\n      }\n      var networkError = new Error(msg);\n      // passes `undefined` as statusCode if not an HTTP error (resp === undefined)\n      networkError.statusCode = resp && resp.status;\n      latencyTracker(networkError);\n      throw networkError;\n    }) : Promise.reject(new Error(messageNoFetch));\n  };\n}","map":{"version":3,"names":["objectAssign","ERROR_HTTP","ERROR_CLIENT_CANNOT_GET_READY","messageNoFetch","splitHttpClientFactory","settings","getFetch","getOptions","log","authorizationKey","core","version","_a","runtime","ip","hostname","options","fetch","error","headers","httpClient","url","reqOpts","latencyTracker","logErrorsAsInfo","request","method","body","then","response","ok","text","message","Promise","reject","catch","resp","msg","status","networkError","Error","statusCode"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/services/splitHttpClient.js"],"sourcesContent":["import { objectAssign } from '../utils/lang/objectAssign';\nimport { ERROR_HTTP, ERROR_CLIENT_CANNOT_GET_READY } from '../logger/constants';\nvar messageNoFetch = 'Global fetch API is not available.';\n/**\n * Factory of Split HTTP clients, which are HTTP clients with predefined headers for Split endpoints.\n *\n * @param settings SDK settings, used to access authorizationKey, logger instance and metadata (SDK version, ip and hostname) to set additional headers\n * @param options global request options\n * @param fetch optional http client to use instead of the global Fetch (for environments where Fetch API is not available such as Node)\n */\nexport function splitHttpClientFactory(settings, getFetch, getOptions) {\n    var log = settings.log, authorizationKey = settings.core.authorizationKey, version = settings.version, _a = settings.runtime, ip = _a.ip, hostname = _a.hostname;\n    var options = getOptions && getOptions();\n    var fetch = getFetch && getFetch();\n    // if fetch is not available, log Error\n    if (!fetch)\n        log.error(ERROR_CLIENT_CANNOT_GET_READY, [messageNoFetch]);\n    var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + authorizationKey,\n        'SplitSDKVersion': version\n    };\n    if (ip)\n        headers['SplitSDKMachineIP'] = ip;\n    if (hostname)\n        headers['SplitSDKMachineName'] = hostname;\n    return function httpClient(url, reqOpts, latencyTracker, logErrorsAsInfo) {\n        if (reqOpts === void 0) { reqOpts = {}; }\n        if (latencyTracker === void 0) { latencyTracker = function () { }; }\n        if (logErrorsAsInfo === void 0) { logErrorsAsInfo = false; }\n        var request = objectAssign({\n            headers: reqOpts.headers ? objectAssign({}, headers, reqOpts.headers) : headers,\n            method: reqOpts.method || 'GET',\n            body: reqOpts.body\n        }, options);\n        // using `fetch(url, options)` signature to work with unfetch, a lightweight ponyfill of fetch API.\n        return fetch ? fetch(url, request)\n            // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful\n            .then(function (response) {\n            if (!response.ok) {\n                return response.text().then(function (message) { return Promise.reject({ response: response, message: message }); });\n            }\n            latencyTracker();\n            return response;\n        })\n            .catch(function (error) {\n            var resp = error && error.response;\n            var msg = '';\n            if (resp) { // An HTTP error\n                switch (resp.status) {\n                    case 404:\n                        msg = 'Invalid API key or resource not found.';\n                        break;\n                    // Don't use resp.statusText since reason phrase is removed in HTTP/2\n                    default:\n                        msg = error.message;\n                        break;\n                }\n            }\n            else { // Something else, either an error making the request or a Network error.\n                msg = error.message || 'Network Error';\n            }\n            if (!resp || resp.status !== 403) { // 403's log we'll be handled somewhere else.\n                log[logErrorsAsInfo ? 'info' : 'error'](ERROR_HTTP, [resp ? resp.status : 'NO_STATUS', url, msg]);\n            }\n            var networkError = new Error(msg);\n            // passes `undefined` as statusCode if not an HTTP error (resp === undefined)\n            networkError.statusCode = resp && resp.status;\n            latencyTracker(networkError);\n            throw networkError;\n        }) : Promise.reject(new Error(messageNoFetch));\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}