{"ast":null,"code":"import { Engine } from './Engine';\nimport { thenable } from '../utils/promise/thenable';\nimport * as LabelsConstants from '../utils/labels';\nimport { CONTROL } from '../utils/constants';\nvar treatmentException = {\n  treatment: CONTROL,\n  label: LabelsConstants.EXCEPTION,\n  config: null\n};\nfunction treatmentsException(splitNames) {\n  var evaluations = {};\n  splitNames.forEach(function (splitName) {\n    evaluations[splitName] = treatmentException;\n  });\n  return evaluations;\n}\nexport function evaluateFeature(log, key, splitName, attributes, storage) {\n  var stringifiedSplit;\n  try {\n    stringifiedSplit = storage.splits.getSplit(splitName);\n  } catch (e) {\n    // Exception on sync `getSplit` storage. Not possible ATM with InMemory and InLocal storages.\n    return treatmentException;\n  }\n  if (thenable(stringifiedSplit)) {\n    return stringifiedSplit.then(function (result) {\n      return getEvaluation(log, result, key, attributes, storage);\n    }).catch(\n    // Exception on async `getSplit` storage. For example, when the storage is redis or\n    // pluggable and there is a connection issue and we can't retrieve the split to be evaluated\n    function () {\n      return treatmentException;\n    });\n  }\n  return getEvaluation(log, stringifiedSplit, key, attributes, storage);\n}\nexport function evaluateFeatures(log, key, splitNames, attributes, storage) {\n  var stringifiedSplits;\n  try {\n    stringifiedSplits = storage.splits.getSplits(splitNames);\n  } catch (e) {\n    // Exception on sync `getSplits` storage. Not possible ATM with InMemory and InLocal storages.\n    return treatmentsException(splitNames);\n  }\n  return thenable(stringifiedSplits) ? stringifiedSplits.then(function (splits) {\n    return getEvaluations(log, splitNames, splits, key, attributes, storage);\n  }).catch(function () {\n    // Exception on async `getSplits` storage. For example, when the storage is redis or\n    // pluggable and there is a connection issue and we can't retrieve the split to be evaluated\n    return treatmentsException(splitNames);\n  }) : getEvaluations(log, splitNames, stringifiedSplits, key, attributes, storage);\n}\nfunction getEvaluation(log, stringifiedSplit, key, attributes, storage) {\n  var evaluation = {\n    treatment: CONTROL,\n    label: LabelsConstants.SPLIT_NOT_FOUND,\n    config: null\n  };\n  if (stringifiedSplit) {\n    var splitJSON_1 = JSON.parse(stringifiedSplit);\n    var split_1 = Engine.parse(log, splitJSON_1, storage);\n    evaluation = split_1.getTreatment(key, attributes, evaluateFeature);\n    // If the storage is async and the evaluated split uses segment, evaluation is thenable\n    if (thenable(evaluation)) {\n      return evaluation.then(function (result) {\n        result.changeNumber = split_1.getChangeNumber();\n        result.config = splitJSON_1.configurations && splitJSON_1.configurations[result.treatment] || null;\n        return result;\n      });\n    } else {\n      evaluation.changeNumber = split_1.getChangeNumber(); // Always sync and optional\n      evaluation.config = splitJSON_1.configurations && splitJSON_1.configurations[evaluation.treatment] || null;\n    }\n  }\n  return evaluation;\n}\nfunction getEvaluations(log, splitNames, splits, key, attributes, storage) {\n  var result = {};\n  var thenables = [];\n  splitNames.forEach(function (splitName) {\n    var evaluation = getEvaluation(log, splits[splitName], key, attributes, storage);\n    if (thenable(evaluation)) {\n      thenables.push(evaluation.then(function (res) {\n        result[splitName] = res;\n      }));\n    } else {\n      result[splitName] = evaluation;\n    }\n  });\n  return thenables.length > 0 ? Promise.all(thenables).then(function () {\n    return result;\n  }) : result;\n}","map":{"version":3,"names":["Engine","thenable","LabelsConstants","CONTROL","treatmentException","treatment","label","EXCEPTION","config","treatmentsException","splitNames","evaluations","forEach","splitName","evaluateFeature","log","key","attributes","storage","stringifiedSplit","splits","getSplit","e","then","result","getEvaluation","catch","evaluateFeatures","stringifiedSplits","getSplits","getEvaluations","evaluation","SPLIT_NOT_FOUND","splitJSON_1","JSON","parse","split_1","getTreatment","changeNumber","getChangeNumber","configurations","thenables","push","res","length","Promise","all"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/evaluator/index.js"],"sourcesContent":["import { Engine } from './Engine';\nimport { thenable } from '../utils/promise/thenable';\nimport * as LabelsConstants from '../utils/labels';\nimport { CONTROL } from '../utils/constants';\nvar treatmentException = {\n    treatment: CONTROL,\n    label: LabelsConstants.EXCEPTION,\n    config: null\n};\nfunction treatmentsException(splitNames) {\n    var evaluations = {};\n    splitNames.forEach(function (splitName) {\n        evaluations[splitName] = treatmentException;\n    });\n    return evaluations;\n}\nexport function evaluateFeature(log, key, splitName, attributes, storage) {\n    var stringifiedSplit;\n    try {\n        stringifiedSplit = storage.splits.getSplit(splitName);\n    }\n    catch (e) {\n        // Exception on sync `getSplit` storage. Not possible ATM with InMemory and InLocal storages.\n        return treatmentException;\n    }\n    if (thenable(stringifiedSplit)) {\n        return stringifiedSplit.then(function (result) { return getEvaluation(log, result, key, attributes, storage); }).catch(\n        // Exception on async `getSplit` storage. For example, when the storage is redis or\n        // pluggable and there is a connection issue and we can't retrieve the split to be evaluated\n        function () { return treatmentException; });\n    }\n    return getEvaluation(log, stringifiedSplit, key, attributes, storage);\n}\nexport function evaluateFeatures(log, key, splitNames, attributes, storage) {\n    var stringifiedSplits;\n    try {\n        stringifiedSplits = storage.splits.getSplits(splitNames);\n    }\n    catch (e) {\n        // Exception on sync `getSplits` storage. Not possible ATM with InMemory and InLocal storages.\n        return treatmentsException(splitNames);\n    }\n    return (thenable(stringifiedSplits)) ?\n        stringifiedSplits.then(function (splits) { return getEvaluations(log, splitNames, splits, key, attributes, storage); })\n            .catch(function () {\n            // Exception on async `getSplits` storage. For example, when the storage is redis or\n            // pluggable and there is a connection issue and we can't retrieve the split to be evaluated\n            return treatmentsException(splitNames);\n        }) :\n        getEvaluations(log, splitNames, stringifiedSplits, key, attributes, storage);\n}\nfunction getEvaluation(log, stringifiedSplit, key, attributes, storage) {\n    var evaluation = {\n        treatment: CONTROL,\n        label: LabelsConstants.SPLIT_NOT_FOUND,\n        config: null\n    };\n    if (stringifiedSplit) {\n        var splitJSON_1 = JSON.parse(stringifiedSplit);\n        var split_1 = Engine.parse(log, splitJSON_1, storage);\n        evaluation = split_1.getTreatment(key, attributes, evaluateFeature);\n        // If the storage is async and the evaluated split uses segment, evaluation is thenable\n        if (thenable(evaluation)) {\n            return evaluation.then(function (result) {\n                result.changeNumber = split_1.getChangeNumber();\n                result.config = splitJSON_1.configurations && splitJSON_1.configurations[result.treatment] || null;\n                return result;\n            });\n        }\n        else {\n            evaluation.changeNumber = split_1.getChangeNumber(); // Always sync and optional\n            evaluation.config = splitJSON_1.configurations && splitJSON_1.configurations[evaluation.treatment] || null;\n        }\n    }\n    return evaluation;\n}\nfunction getEvaluations(log, splitNames, splits, key, attributes, storage) {\n    var result = {};\n    var thenables = [];\n    splitNames.forEach(function (splitName) {\n        var evaluation = getEvaluation(log, splits[splitName], key, attributes, storage);\n        if (thenable(evaluation)) {\n            thenables.push(evaluation.then(function (res) {\n                result[splitName] = res;\n            }));\n        }\n        else {\n            result[splitName] = evaluation;\n        }\n    });\n    return thenables.length > 0 ? Promise.all(thenables).then(function () { return result; }) : result;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,OAAO,KAAKC,eAAe,MAAM,iBAAiB;AAClD,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,IAAIC,kBAAkB,GAAG;EACrBC,SAAS,EAAEF,OAAO;EAClBG,KAAK,EAAEJ,eAAe,CAACK,SAAS;EAChCC,MAAM,EAAE;AACZ,CAAC;AACD,SAASC,mBAAmB,CAACC,UAAU,EAAE;EACrC,IAAIC,WAAW,GAAG,CAAC,CAAC;EACpBD,UAAU,CAACE,OAAO,CAAC,UAAUC,SAAS,EAAE;IACpCF,WAAW,CAACE,SAAS,CAAC,GAAGT,kBAAkB;EAC/C,CAAC,CAAC;EACF,OAAOO,WAAW;AACtB;AACA,OAAO,SAASG,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEH,SAAS,EAAEI,UAAU,EAAEC,OAAO,EAAE;EACtE,IAAIC,gBAAgB;EACpB,IAAI;IACAA,gBAAgB,GAAGD,OAAO,CAACE,MAAM,CAACC,QAAQ,CAACR,SAAS,CAAC;EACzD,CAAC,CACD,OAAOS,CAAC,EAAE;IACN;IACA,OAAOlB,kBAAkB;EAC7B;EACA,IAAIH,QAAQ,CAACkB,gBAAgB,CAAC,EAAE;IAC5B,OAAOA,gBAAgB,CAACI,IAAI,CAAC,UAAUC,MAAM,EAAE;MAAE,OAAOC,aAAa,CAACV,GAAG,EAAES,MAAM,EAAER,GAAG,EAAEC,UAAU,EAAEC,OAAO,CAAC;IAAE,CAAC,CAAC,CAACQ,KAAK;IACtH;IACA;IACA,YAAY;MAAE,OAAOtB,kBAAkB;IAAE,CAAC,CAAC;EAC/C;EACA,OAAOqB,aAAa,CAACV,GAAG,EAAEI,gBAAgB,EAAEH,GAAG,EAAEC,UAAU,EAAEC,OAAO,CAAC;AACzE;AACA,OAAO,SAASS,gBAAgB,CAACZ,GAAG,EAAEC,GAAG,EAAEN,UAAU,EAAEO,UAAU,EAAEC,OAAO,EAAE;EACxE,IAAIU,iBAAiB;EACrB,IAAI;IACAA,iBAAiB,GAAGV,OAAO,CAACE,MAAM,CAACS,SAAS,CAACnB,UAAU,CAAC;EAC5D,CAAC,CACD,OAAOY,CAAC,EAAE;IACN;IACA,OAAOb,mBAAmB,CAACC,UAAU,CAAC;EAC1C;EACA,OAAQT,QAAQ,CAAC2B,iBAAiB,CAAC,GAC/BA,iBAAiB,CAACL,IAAI,CAAC,UAAUH,MAAM,EAAE;IAAE,OAAOU,cAAc,CAACf,GAAG,EAAEL,UAAU,EAAEU,MAAM,EAAEJ,GAAG,EAAEC,UAAU,EAAEC,OAAO,CAAC;EAAE,CAAC,CAAC,CAClHQ,KAAK,CAAC,YAAY;IACnB;IACA;IACA,OAAOjB,mBAAmB,CAACC,UAAU,CAAC;EAC1C,CAAC,CAAC,GACFoB,cAAc,CAACf,GAAG,EAAEL,UAAU,EAAEkB,iBAAiB,EAAEZ,GAAG,EAAEC,UAAU,EAAEC,OAAO,CAAC;AACpF;AACA,SAASO,aAAa,CAACV,GAAG,EAAEI,gBAAgB,EAAEH,GAAG,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACpE,IAAIa,UAAU,GAAG;IACb1B,SAAS,EAAEF,OAAO;IAClBG,KAAK,EAAEJ,eAAe,CAAC8B,eAAe;IACtCxB,MAAM,EAAE;EACZ,CAAC;EACD,IAAIW,gBAAgB,EAAE;IAClB,IAAIc,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAChB,gBAAgB,CAAC;IAC9C,IAAIiB,OAAO,GAAGpC,MAAM,CAACmC,KAAK,CAACpB,GAAG,EAAEkB,WAAW,EAAEf,OAAO,CAAC;IACrDa,UAAU,GAAGK,OAAO,CAACC,YAAY,CAACrB,GAAG,EAAEC,UAAU,EAAEH,eAAe,CAAC;IACnE;IACA,IAAIb,QAAQ,CAAC8B,UAAU,CAAC,EAAE;MACtB,OAAOA,UAAU,CAACR,IAAI,CAAC,UAAUC,MAAM,EAAE;QACrCA,MAAM,CAACc,YAAY,GAAGF,OAAO,CAACG,eAAe,EAAE;QAC/Cf,MAAM,CAAChB,MAAM,GAAGyB,WAAW,CAACO,cAAc,IAAIP,WAAW,CAACO,cAAc,CAAChB,MAAM,CAACnB,SAAS,CAAC,IAAI,IAAI;QAClG,OAAOmB,MAAM;MACjB,CAAC,CAAC;IACN,CAAC,MACI;MACDO,UAAU,CAACO,YAAY,GAAGF,OAAO,CAACG,eAAe,EAAE,CAAC,CAAC;MACrDR,UAAU,CAACvB,MAAM,GAAGyB,WAAW,CAACO,cAAc,IAAIP,WAAW,CAACO,cAAc,CAACT,UAAU,CAAC1B,SAAS,CAAC,IAAI,IAAI;IAC9G;EACJ;EACA,OAAO0B,UAAU;AACrB;AACA,SAASD,cAAc,CAACf,GAAG,EAAEL,UAAU,EAAEU,MAAM,EAAEJ,GAAG,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACvE,IAAIM,MAAM,GAAG,CAAC,CAAC;EACf,IAAIiB,SAAS,GAAG,EAAE;EAClB/B,UAAU,CAACE,OAAO,CAAC,UAAUC,SAAS,EAAE;IACpC,IAAIkB,UAAU,GAAGN,aAAa,CAACV,GAAG,EAAEK,MAAM,CAACP,SAAS,CAAC,EAAEG,GAAG,EAAEC,UAAU,EAAEC,OAAO,CAAC;IAChF,IAAIjB,QAAQ,CAAC8B,UAAU,CAAC,EAAE;MACtBU,SAAS,CAACC,IAAI,CAACX,UAAU,CAACR,IAAI,CAAC,UAAUoB,GAAG,EAAE;QAC1CnB,MAAM,CAACX,SAAS,CAAC,GAAG8B,GAAG;MAC3B,CAAC,CAAC,CAAC;IACP,CAAC,MACI;MACDnB,MAAM,CAACX,SAAS,CAAC,GAAGkB,UAAU;IAClC;EACJ,CAAC,CAAC;EACF,OAAOU,SAAS,CAACG,MAAM,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC,CAAClB,IAAI,CAAC,YAAY;IAAE,OAAOC,MAAM;EAAE,CAAC,CAAC,GAAGA,MAAM;AACtG"},"metadata":{},"sourceType":"module"}