{"ast":null,"code":"/* eslint-disable no-fallthrough */\nimport { UTF16ToUTF8, x86Fmix, x86Multiply, x86Rotl } from './common';\n/*\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\n// PUBLIC FUNCTIONS\n// ----------------\nfunction hash32(key, seed) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  key = key || '';\n  seed = seed || 0;\n  var remainder = key.length % 4;\n  var bytes = key.length - remainder;\n  var h1 = seed;\n  var k1 = 0;\n  var c1 = 0xcc9e2d51;\n  var c2 = 0x1b873593;\n  for (var i = 0; i < bytes; i = i + 4) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n    k1 = x86Multiply(k1, c1);\n    k1 = x86Rotl(k1, 15);\n    k1 = x86Multiply(k1, c2);\n    h1 ^= k1;\n    h1 = x86Rotl(h1, 13);\n    h1 = x86Multiply(h1, 5) + 0xe6546b64;\n  }\n  k1 = 0;\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = x86Multiply(k1, c1);\n      k1 = x86Rotl(k1, 15);\n      k1 = x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n  h1 ^= key.length;\n  h1 = x86Fmix(h1);\n  return h1 >>> 0;\n}\nexport function hash(str, seed) {\n  return hash32(UTF16ToUTF8(str), seed >>> 0);\n}\nexport function bucket(str, seed) {\n  return Math.abs(hash(str, seed) % 100) + 1;\n}","map":{"version":3,"names":["UTF16ToUTF8","x86Fmix","x86Multiply","x86Rotl","hash32","key","seed","remainder","length","bytes","h1","k1","c1","c2","i","charCodeAt","hash","str","bucket","Math","abs"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/murmur3/murmur3.js"],"sourcesContent":["/* eslint-disable no-fallthrough */\nimport { UTF16ToUTF8, x86Fmix, x86Multiply, x86Rotl } from './common';\n/*\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\n// PUBLIC FUNCTIONS\n// ----------------\nfunction hash32(key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n    key = key || '';\n    seed = seed || 0;\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n    var h1 = seed;\n    var k1 = 0;\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n    for (var i = 0; i < bytes; i = i + 4) {\n        k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n        k1 = x86Multiply(k1, c1);\n        k1 = x86Rotl(k1, 15);\n        k1 = x86Multiply(k1, c2);\n        h1 ^= k1;\n        h1 = x86Rotl(h1, 13);\n        h1 = x86Multiply(h1, 5) + 0xe6546b64;\n    }\n    k1 = 0;\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n            k1 = x86Multiply(k1, c1);\n            k1 = x86Rotl(k1, 15);\n            k1 = x86Multiply(k1, c2);\n            h1 ^= k1;\n    }\n    h1 ^= key.length;\n    h1 = x86Fmix(h1);\n    return h1 >>> 0;\n}\nexport function hash(str, seed) {\n    return hash32(UTF16ToUTF8(str), seed >>> 0);\n}\nexport function bucket(str, seed) {\n    return Math.abs(hash(str, seed) % 100) + 1;\n}\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,OAAO,EAAEC,WAAW,EAAEC,OAAO,QAAQ,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,CAACC,GAAG,EAAEC,IAAI,EAAE;EACvB;EACA;EACA;EACA;EACAD,GAAG,GAAGA,GAAG,IAAI,EAAE;EACfC,IAAI,GAAGA,IAAI,IAAI,CAAC;EAChB,IAAIC,SAAS,GAAGF,GAAG,CAACG,MAAM,GAAG,CAAC;EAC9B,IAAIC,KAAK,GAAGJ,GAAG,CAACG,MAAM,GAAGD,SAAS;EAClC,IAAIG,EAAE,GAAGJ,IAAI;EACb,IAAIK,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,UAAU;EACnB,IAAIC,EAAE,GAAG,UAAU;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,EAAEK,CAAC,GAAGA,CAAC,GAAG,CAAC,EAAE;IAClCH,EAAE,GAAKN,GAAG,CAACU,UAAU,CAACD,CAAC,CAAC,GAAG,IAAI,GAAM,CAACT,GAAG,CAACU,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAE,GAAI,CAACT,GAAG,CAACU,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAG,GAAI,CAACT,GAAG,CAACU,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAG;IAC3JH,EAAE,GAAGT,WAAW,CAACS,EAAE,EAAEC,EAAE,CAAC;IACxBD,EAAE,GAAGR,OAAO,CAACQ,EAAE,EAAE,EAAE,CAAC;IACpBA,EAAE,GAAGT,WAAW,CAACS,EAAE,EAAEE,EAAE,CAAC;IACxBH,EAAE,IAAIC,EAAE;IACRD,EAAE,GAAGP,OAAO,CAACO,EAAE,EAAE,EAAE,CAAC;IACpBA,EAAE,GAAGR,WAAW,CAACQ,EAAE,EAAE,CAAC,CAAC,GAAG,UAAU;EACxC;EACAC,EAAE,GAAG,CAAC;EACN,QAAQJ,SAAS;IACb,KAAK,CAAC;MACFI,EAAE,IAAI,CAACN,GAAG,CAACU,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE;IAC9C,KAAK,CAAC;MACFH,EAAE,IAAI,CAACN,GAAG,CAACU,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;IAC7C,KAAK,CAAC;MACFH,EAAE,IAAKN,GAAG,CAACU,UAAU,CAACD,CAAC,CAAC,GAAG,IAAK;MAChCH,EAAE,GAAGT,WAAW,CAACS,EAAE,EAAEC,EAAE,CAAC;MACxBD,EAAE,GAAGR,OAAO,CAACQ,EAAE,EAAE,EAAE,CAAC;MACpBA,EAAE,GAAGT,WAAW,CAACS,EAAE,EAAEE,EAAE,CAAC;MACxBH,EAAE,IAAIC,EAAE;EAAC;EAEjBD,EAAE,IAAIL,GAAG,CAACG,MAAM;EAChBE,EAAE,GAAGT,OAAO,CAACS,EAAE,CAAC;EAChB,OAAOA,EAAE,KAAK,CAAC;AACnB;AACA,OAAO,SAASM,IAAI,CAACC,GAAG,EAAEX,IAAI,EAAE;EAC5B,OAAOF,MAAM,CAACJ,WAAW,CAACiB,GAAG,CAAC,EAAEX,IAAI,KAAK,CAAC,CAAC;AAC/C;AACA,OAAO,SAASY,MAAM,CAACD,GAAG,EAAEX,IAAI,EAAE;EAC9B,OAAOa,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACC,GAAG,EAAEX,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;AAC9C"},"metadata":{},"sourceType":"module"}