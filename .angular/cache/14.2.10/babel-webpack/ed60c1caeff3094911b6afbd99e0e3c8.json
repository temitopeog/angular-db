{"ast":null,"code":"import { merge, get } from '../lang';\nimport { mode } from './mode';\nimport { validateSplitFilters } from './splitFilters';\nimport { STANDALONE_MODE, OPTIMIZED, LOCALHOST_MODE, DEBUG } from '../constants';\nimport { validImpressionsMode } from './impressionsMode';\nimport { validateKey } from '../inputValidation/key';\nimport { validateTrafficType } from '../inputValidation/trafficType';\nimport { ERROR_MIN_CONFIG_PARAM } from '../../logger/constants';\n// Exported for telemetry\nexport var base = {\n  // Define which kind of object you want to retrieve from SplitFactory\n  mode: STANDALONE_MODE,\n  core: {\n    // API token (tight to an environment)\n    authorizationKey: undefined,\n    // key used in your system (only required for browser version)\n    key: undefined,\n    // traffic type for the given key (only used on browser version)\n    trafficType: undefined,\n    // toggle impressions tracking of labels\n    labelsEnabled: true,\n    // toggle sendind (true) or not sending (false) IP and Host Name with impressions, events, and telemetries requests (only used on nodejs version)\n    IPAddressesEnabled: undefined\n  },\n  scheduler: {\n    // fetch feature updates each 30 sec\n    featuresRefreshRate: 30,\n    // fetch segments updates each 60 sec\n    segmentsRefreshRate: 60,\n    // publish telemetry stats each 3600 secs (1 hour)\n    telemetryRefreshRate: 3600,\n    // publish evaluations each 300 sec (default value for OPTIMIZED impressions mode)\n    impressionsRefreshRate: 300,\n    // fetch offline changes each 15 sec\n    offlineRefreshRate: 15,\n    // publish events every 60 seconds after the first flush\n    eventsPushRate: 60,\n    // how many events will be queued before flushing\n    eventsQueueSize: 500,\n    // how many impressions will be queued before flushing\n    impressionsQueueSize: 30000,\n    // backoff base seconds to wait before re attempting to connect to push notifications\n    pushRetryBackoffBase: 1\n  },\n  urls: {\n    // CDN having all the information for your environment\n    sdk: 'https://sdk.split.io/api',\n    // Storage for your SDK events\n    events: 'https://events.split.io/api',\n    // SDK Auth Server\n    auth: 'https://auth.split.io/api',\n    // Streaming Server\n    streaming: 'https://streaming.split.io',\n    // Telemetry Server\n    telemetry: 'https://telemetry.split.io/api'\n  },\n  // Defines which kind of storage we should instanciate.\n  storage: undefined,\n  // Defines if the logs are enabled, SDK wide.\n  debug: undefined,\n  // Defines the impression listener, but will only be used on NodeJS.\n  impressionListener: undefined,\n  // Instance version.\n  version: undefined,\n  // List of integrations.\n  integrations: undefined,\n  // toggle using (true) or not using (false) Server-Side Events for synchronizing storage\n  streamingEnabled: true,\n  sync: {\n    splitFilters: undefined,\n    // impressions collection mode\n    impressionsMode: OPTIMIZED,\n    localhostMode: undefined,\n    enabled: true\n  },\n  // Logger\n  log: undefined\n};\nfunction fromSecondsToMillis(n) {\n  return Math.round(n * 1000);\n}\n/**\n * Validates the given config and use it to build a settings object.\n * NOTE: it doesn't validate the Api Key. Call `validateApikey` or `validateAndTrackApiKey` for that after settings validation.\n *\n * @param config user defined configuration\n * @param validationParams defaults and fields validators used to validate and creates a settings object from a given config\n */\nexport function settingsValidation(config, validationParams) {\n  var defaults = validationParams.defaults,\n    runtime = validationParams.runtime,\n    storage = validationParams.storage,\n    integrations = validationParams.integrations,\n    logger = validationParams.logger,\n    localhost = validationParams.localhost,\n    consent = validationParams.consent;\n  // creates a settings object merging base, defaults and config objects.\n  var withDefaults = merge({}, base, defaults, config);\n  // ensure a valid logger.\n  // First thing to validate, since other validators might use the logger.\n  var log = logger(withDefaults); // @ts-ignore, modify readonly prop\n  withDefaults.log = log;\n  // ensure a valid impressionsMode\n  withDefaults.sync.impressionsMode = validImpressionsMode(log, withDefaults.sync.impressionsMode);\n  function validateMinValue(paramName, actualValue, minValue) {\n    if (actualValue >= minValue) return actualValue;\n    // actualValue is not a number or is lower than minValue\n    log.error(ERROR_MIN_CONFIG_PARAM, [paramName, minValue]);\n    return minValue;\n  }\n  // Scheduler periods\n  var scheduler = withDefaults.scheduler,\n    startup = withDefaults.startup;\n  scheduler.featuresRefreshRate = fromSecondsToMillis(scheduler.featuresRefreshRate);\n  scheduler.segmentsRefreshRate = fromSecondsToMillis(scheduler.segmentsRefreshRate);\n  scheduler.offlineRefreshRate = fromSecondsToMillis(scheduler.offlineRefreshRate);\n  scheduler.eventsPushRate = fromSecondsToMillis(scheduler.eventsPushRate);\n  scheduler.telemetryRefreshRate = fromSecondsToMillis(validateMinValue('telemetryRefreshRate', scheduler.telemetryRefreshRate, 60));\n  // Default impressionsRefreshRate for DEBUG mode is 60 secs\n  if (get(config, 'scheduler.impressionsRefreshRate') === undefined && withDefaults.sync.impressionsMode === DEBUG) scheduler.impressionsRefreshRate = 60;\n  scheduler.impressionsRefreshRate = fromSecondsToMillis(scheduler.impressionsRefreshRate);\n  // Log deprecation for old telemetry param\n  if (scheduler.metricsRefreshRate) log.warn('`metricsRefreshRate` will be deprecated soon. For configuring telemetry rates, update `telemetryRefreshRate` value in configs');\n  // Startup periods\n  startup.requestTimeoutBeforeReady = fromSecondsToMillis(startup.requestTimeoutBeforeReady);\n  startup.readyTimeout = fromSecondsToMillis(startup.readyTimeout);\n  startup.eventsFirstPushWindow = fromSecondsToMillis(startup.eventsFirstPushWindow);\n  // ensure a valid SDK mode\n  // @ts-ignore, modify readonly prop\n  withDefaults.mode = mode(withDefaults.core.authorizationKey, withDefaults.mode);\n  // ensure a valid Storage based on mode defined.\n  // @ts-ignore, modify readonly prop\n  if (storage) withDefaults.storage = storage(withDefaults);\n  // Validate key and TT (for client-side)\n  if (validationParams.acceptKey) {\n    var maybeKey = withDefaults.core.key;\n    // Although `key` is required in client-side, it can be omitted in LOCALHOST mode. In that case, the value `localhost_key` is used.\n    if (withDefaults.mode === LOCALHOST_MODE && maybeKey === undefined) {\n      withDefaults.core.key = 'localhost_key';\n    } else {\n      // Keeping same behaviour than JS SDK: if settings key or TT are invalid,\n      // `false` value is used as binded key/TT of the default client, which leads to some issues.\n      // @ts-ignore, @TODO handle invalid keys as a non-recoverable error?\n      withDefaults.core.key = validateKey(log, maybeKey, 'Client instantiation');\n    }\n    if (validationParams.acceptTT) {\n      var maybeTT = withDefaults.core.trafficType;\n      if (maybeTT !== undefined) {\n        // @ts-ignore\n        withDefaults.core.trafficType = validateTrafficType(log, maybeTT, 'Client instantiation');\n      }\n    }\n  }\n  // Current ip/hostname information\n  // @ts-ignore, modify readonly prop\n  withDefaults.runtime = runtime(withDefaults);\n  // ensure a valid list of integrations.\n  // `integrations` returns an array of valid integration items.\n  // @ts-ignore, modify readonly prop\n  if (integrations) withDefaults.integrations = integrations(withDefaults);\n  if (localhost) withDefaults.sync.localhostMode = localhost(withDefaults);\n  // validate push options\n  if (withDefaults.streamingEnabled !== false) {\n    // @ts-ignore, modify readonly prop\n    withDefaults.streamingEnabled = true;\n    // Backoff bases.\n    // We are not checking if bases are positive numbers. Thus, we might be reauthenticating immediately (`setTimeout` with NaN or negative number)\n    scheduler.pushRetryBackoffBase = fromSecondsToMillis(scheduler.pushRetryBackoffBase);\n  }\n  // validate sync enabled\n  if (withDefaults.sync.enabled !== false) {\n    // @ts-ignore, modify readonly prop\n    withDefaults.sync.enabled = true;\n  }\n  // validate the `splitFilters` settings and parse splits query\n  var splitFiltersValidation = validateSplitFilters(log, withDefaults.sync.splitFilters, withDefaults.mode);\n  withDefaults.sync.splitFilters = splitFiltersValidation.validFilters;\n  withDefaults.sync.__splitFiltersValidation = splitFiltersValidation;\n  // ensure a valid user consent value\n  // @ts-ignore, modify readonly prop\n  withDefaults.userConsent = consent(withDefaults);\n  return withDefaults;\n}","map":{"version":3,"names":["merge","get","mode","validateSplitFilters","STANDALONE_MODE","OPTIMIZED","LOCALHOST_MODE","DEBUG","validImpressionsMode","validateKey","validateTrafficType","ERROR_MIN_CONFIG_PARAM","base","core","authorizationKey","undefined","key","trafficType","labelsEnabled","IPAddressesEnabled","scheduler","featuresRefreshRate","segmentsRefreshRate","telemetryRefreshRate","impressionsRefreshRate","offlineRefreshRate","eventsPushRate","eventsQueueSize","impressionsQueueSize","pushRetryBackoffBase","urls","sdk","events","auth","streaming","telemetry","storage","debug","impressionListener","version","integrations","streamingEnabled","sync","splitFilters","impressionsMode","localhostMode","enabled","log","fromSecondsToMillis","n","Math","round","settingsValidation","config","validationParams","defaults","runtime","logger","localhost","consent","withDefaults","validateMinValue","paramName","actualValue","minValue","error","startup","metricsRefreshRate","warn","requestTimeoutBeforeReady","readyTimeout","eventsFirstPushWindow","acceptKey","maybeKey","acceptTT","maybeTT","splitFiltersValidation","validFilters","__splitFiltersValidation","userConsent"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/settingsValidation/index.js"],"sourcesContent":["import { merge, get } from '../lang';\nimport { mode } from './mode';\nimport { validateSplitFilters } from './splitFilters';\nimport { STANDALONE_MODE, OPTIMIZED, LOCALHOST_MODE, DEBUG } from '../constants';\nimport { validImpressionsMode } from './impressionsMode';\nimport { validateKey } from '../inputValidation/key';\nimport { validateTrafficType } from '../inputValidation/trafficType';\nimport { ERROR_MIN_CONFIG_PARAM } from '../../logger/constants';\n// Exported for telemetry\nexport var base = {\n    // Define which kind of object you want to retrieve from SplitFactory\n    mode: STANDALONE_MODE,\n    core: {\n        // API token (tight to an environment)\n        authorizationKey: undefined,\n        // key used in your system (only required for browser version)\n        key: undefined,\n        // traffic type for the given key (only used on browser version)\n        trafficType: undefined,\n        // toggle impressions tracking of labels\n        labelsEnabled: true,\n        // toggle sendind (true) or not sending (false) IP and Host Name with impressions, events, and telemetries requests (only used on nodejs version)\n        IPAddressesEnabled: undefined\n    },\n    scheduler: {\n        // fetch feature updates each 30 sec\n        featuresRefreshRate: 30,\n        // fetch segments updates each 60 sec\n        segmentsRefreshRate: 60,\n        // publish telemetry stats each 3600 secs (1 hour)\n        telemetryRefreshRate: 3600,\n        // publish evaluations each 300 sec (default value for OPTIMIZED impressions mode)\n        impressionsRefreshRate: 300,\n        // fetch offline changes each 15 sec\n        offlineRefreshRate: 15,\n        // publish events every 60 seconds after the first flush\n        eventsPushRate: 60,\n        // how many events will be queued before flushing\n        eventsQueueSize: 500,\n        // how many impressions will be queued before flushing\n        impressionsQueueSize: 30000,\n        // backoff base seconds to wait before re attempting to connect to push notifications\n        pushRetryBackoffBase: 1,\n    },\n    urls: {\n        // CDN having all the information for your environment\n        sdk: 'https://sdk.split.io/api',\n        // Storage for your SDK events\n        events: 'https://events.split.io/api',\n        // SDK Auth Server\n        auth: 'https://auth.split.io/api',\n        // Streaming Server\n        streaming: 'https://streaming.split.io',\n        // Telemetry Server\n        telemetry: 'https://telemetry.split.io/api',\n    },\n    // Defines which kind of storage we should instanciate.\n    storage: undefined,\n    // Defines if the logs are enabled, SDK wide.\n    debug: undefined,\n    // Defines the impression listener, but will only be used on NodeJS.\n    impressionListener: undefined,\n    // Instance version.\n    version: undefined,\n    // List of integrations.\n    integrations: undefined,\n    // toggle using (true) or not using (false) Server-Side Events for synchronizing storage\n    streamingEnabled: true,\n    sync: {\n        splitFilters: undefined,\n        // impressions collection mode\n        impressionsMode: OPTIMIZED,\n        localhostMode: undefined,\n        enabled: true\n    },\n    // Logger\n    log: undefined\n};\nfunction fromSecondsToMillis(n) {\n    return Math.round(n * 1000);\n}\n/**\n * Validates the given config and use it to build a settings object.\n * NOTE: it doesn't validate the Api Key. Call `validateApikey` or `validateAndTrackApiKey` for that after settings validation.\n *\n * @param config user defined configuration\n * @param validationParams defaults and fields validators used to validate and creates a settings object from a given config\n */\nexport function settingsValidation(config, validationParams) {\n    var defaults = validationParams.defaults, runtime = validationParams.runtime, storage = validationParams.storage, integrations = validationParams.integrations, logger = validationParams.logger, localhost = validationParams.localhost, consent = validationParams.consent;\n    // creates a settings object merging base, defaults and config objects.\n    var withDefaults = merge({}, base, defaults, config);\n    // ensure a valid logger.\n    // First thing to validate, since other validators might use the logger.\n    var log = logger(withDefaults); // @ts-ignore, modify readonly prop\n    withDefaults.log = log;\n    // ensure a valid impressionsMode\n    withDefaults.sync.impressionsMode = validImpressionsMode(log, withDefaults.sync.impressionsMode);\n    function validateMinValue(paramName, actualValue, minValue) {\n        if (actualValue >= minValue)\n            return actualValue;\n        // actualValue is not a number or is lower than minValue\n        log.error(ERROR_MIN_CONFIG_PARAM, [paramName, minValue]);\n        return minValue;\n    }\n    // Scheduler periods\n    var scheduler = withDefaults.scheduler, startup = withDefaults.startup;\n    scheduler.featuresRefreshRate = fromSecondsToMillis(scheduler.featuresRefreshRate);\n    scheduler.segmentsRefreshRate = fromSecondsToMillis(scheduler.segmentsRefreshRate);\n    scheduler.offlineRefreshRate = fromSecondsToMillis(scheduler.offlineRefreshRate);\n    scheduler.eventsPushRate = fromSecondsToMillis(scheduler.eventsPushRate);\n    scheduler.telemetryRefreshRate = fromSecondsToMillis(validateMinValue('telemetryRefreshRate', scheduler.telemetryRefreshRate, 60));\n    // Default impressionsRefreshRate for DEBUG mode is 60 secs\n    if (get(config, 'scheduler.impressionsRefreshRate') === undefined && withDefaults.sync.impressionsMode === DEBUG)\n        scheduler.impressionsRefreshRate = 60;\n    scheduler.impressionsRefreshRate = fromSecondsToMillis(scheduler.impressionsRefreshRate);\n    // Log deprecation for old telemetry param\n    if (scheduler.metricsRefreshRate)\n        log.warn('`metricsRefreshRate` will be deprecated soon. For configuring telemetry rates, update `telemetryRefreshRate` value in configs');\n    // Startup periods\n    startup.requestTimeoutBeforeReady = fromSecondsToMillis(startup.requestTimeoutBeforeReady);\n    startup.readyTimeout = fromSecondsToMillis(startup.readyTimeout);\n    startup.eventsFirstPushWindow = fromSecondsToMillis(startup.eventsFirstPushWindow);\n    // ensure a valid SDK mode\n    // @ts-ignore, modify readonly prop\n    withDefaults.mode = mode(withDefaults.core.authorizationKey, withDefaults.mode);\n    // ensure a valid Storage based on mode defined.\n    // @ts-ignore, modify readonly prop\n    if (storage)\n        withDefaults.storage = storage(withDefaults);\n    // Validate key and TT (for client-side)\n    if (validationParams.acceptKey) {\n        var maybeKey = withDefaults.core.key;\n        // Although `key` is required in client-side, it can be omitted in LOCALHOST mode. In that case, the value `localhost_key` is used.\n        if (withDefaults.mode === LOCALHOST_MODE && maybeKey === undefined) {\n            withDefaults.core.key = 'localhost_key';\n        }\n        else {\n            // Keeping same behaviour than JS SDK: if settings key or TT are invalid,\n            // `false` value is used as binded key/TT of the default client, which leads to some issues.\n            // @ts-ignore, @TODO handle invalid keys as a non-recoverable error?\n            withDefaults.core.key = validateKey(log, maybeKey, 'Client instantiation');\n        }\n        if (validationParams.acceptTT) {\n            var maybeTT = withDefaults.core.trafficType;\n            if (maybeTT !== undefined) { // @ts-ignore\n                withDefaults.core.trafficType = validateTrafficType(log, maybeTT, 'Client instantiation');\n            }\n        }\n    }\n    // Current ip/hostname information\n    // @ts-ignore, modify readonly prop\n    withDefaults.runtime = runtime(withDefaults);\n    // ensure a valid list of integrations.\n    // `integrations` returns an array of valid integration items.\n    // @ts-ignore, modify readonly prop\n    if (integrations)\n        withDefaults.integrations = integrations(withDefaults);\n    if (localhost)\n        withDefaults.sync.localhostMode = localhost(withDefaults);\n    // validate push options\n    if (withDefaults.streamingEnabled !== false) { // @ts-ignore, modify readonly prop\n        withDefaults.streamingEnabled = true;\n        // Backoff bases.\n        // We are not checking if bases are positive numbers. Thus, we might be reauthenticating immediately (`setTimeout` with NaN or negative number)\n        scheduler.pushRetryBackoffBase = fromSecondsToMillis(scheduler.pushRetryBackoffBase);\n    }\n    // validate sync enabled\n    if (withDefaults.sync.enabled !== false) { // @ts-ignore, modify readonly prop\n        withDefaults.sync.enabled = true;\n    }\n    // validate the `splitFilters` settings and parse splits query\n    var splitFiltersValidation = validateSplitFilters(log, withDefaults.sync.splitFilters, withDefaults.mode);\n    withDefaults.sync.splitFilters = splitFiltersValidation.validFilters;\n    withDefaults.sync.__splitFiltersValidation = splitFiltersValidation;\n    // ensure a valid user consent value\n    // @ts-ignore, modify readonly prop\n    withDefaults.userConsent = consent(withDefaults);\n    return withDefaults;\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,GAAG,QAAQ,SAAS;AACpC,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,oBAAoB,QAAQ,gBAAgB;AACrD,SAASC,eAAe,EAAEC,SAAS,EAAEC,cAAc,EAAEC,KAAK,QAAQ,cAAc;AAChF,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D;AACA,OAAO,IAAIC,IAAI,GAAG;EACd;EACAV,IAAI,EAAEE,eAAe;EACrBS,IAAI,EAAE;IACF;IACAC,gBAAgB,EAAEC,SAAS;IAC3B;IACAC,GAAG,EAAED,SAAS;IACd;IACAE,WAAW,EAAEF,SAAS;IACtB;IACAG,aAAa,EAAE,IAAI;IACnB;IACAC,kBAAkB,EAAEJ;EACxB,CAAC;EACDK,SAAS,EAAE;IACP;IACAC,mBAAmB,EAAE,EAAE;IACvB;IACAC,mBAAmB,EAAE,EAAE;IACvB;IACAC,oBAAoB,EAAE,IAAI;IAC1B;IACAC,sBAAsB,EAAE,GAAG;IAC3B;IACAC,kBAAkB,EAAE,EAAE;IACtB;IACAC,cAAc,EAAE,EAAE;IAClB;IACAC,eAAe,EAAE,GAAG;IACpB;IACAC,oBAAoB,EAAE,KAAK;IAC3B;IACAC,oBAAoB,EAAE;EAC1B,CAAC;EACDC,IAAI,EAAE;IACF;IACAC,GAAG,EAAE,0BAA0B;IAC/B;IACAC,MAAM,EAAE,6BAA6B;IACrC;IACAC,IAAI,EAAE,2BAA2B;IACjC;IACAC,SAAS,EAAE,4BAA4B;IACvC;IACAC,SAAS,EAAE;EACf,CAAC;EACD;EACAC,OAAO,EAAErB,SAAS;EAClB;EACAsB,KAAK,EAAEtB,SAAS;EAChB;EACAuB,kBAAkB,EAAEvB,SAAS;EAC7B;EACAwB,OAAO,EAAExB,SAAS;EAClB;EACAyB,YAAY,EAAEzB,SAAS;EACvB;EACA0B,gBAAgB,EAAE,IAAI;EACtBC,IAAI,EAAE;IACFC,YAAY,EAAE5B,SAAS;IACvB;IACA6B,eAAe,EAAEvC,SAAS;IAC1BwC,aAAa,EAAE9B,SAAS;IACxB+B,OAAO,EAAE;EACb,CAAC;EACD;EACAC,GAAG,EAAEhC;AACT,CAAC;AACD,SAASiC,mBAAmB,CAACC,CAAC,EAAE;EAC5B,OAAOC,IAAI,CAACC,KAAK,CAACF,CAAC,GAAG,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,kBAAkB,CAACC,MAAM,EAAEC,gBAAgB,EAAE;EACzD,IAAIC,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ;IAAEC,OAAO,GAAGF,gBAAgB,CAACE,OAAO;IAAEpB,OAAO,GAAGkB,gBAAgB,CAAClB,OAAO;IAAEI,YAAY,GAAGc,gBAAgB,CAACd,YAAY;IAAEiB,MAAM,GAAGH,gBAAgB,CAACG,MAAM;IAAEC,SAAS,GAAGJ,gBAAgB,CAACI,SAAS;IAAEC,OAAO,GAAGL,gBAAgB,CAACK,OAAO;EAC5Q;EACA,IAAIC,YAAY,GAAG5D,KAAK,CAAC,CAAC,CAAC,EAAEY,IAAI,EAAE2C,QAAQ,EAAEF,MAAM,CAAC;EACpD;EACA;EACA,IAAIN,GAAG,GAAGU,MAAM,CAACG,YAAY,CAAC,CAAC,CAAC;EAChCA,YAAY,CAACb,GAAG,GAAGA,GAAG;EACtB;EACAa,YAAY,CAAClB,IAAI,CAACE,eAAe,GAAGpC,oBAAoB,CAACuC,GAAG,EAAEa,YAAY,CAAClB,IAAI,CAACE,eAAe,CAAC;EAChG,SAASiB,gBAAgB,CAACC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAE;IACxD,IAAID,WAAW,IAAIC,QAAQ,EACvB,OAAOD,WAAW;IACtB;IACAhB,GAAG,CAACkB,KAAK,CAACtD,sBAAsB,EAAE,CAACmD,SAAS,EAAEE,QAAQ,CAAC,CAAC;IACxD,OAAOA,QAAQ;EACnB;EACA;EACA,IAAI5C,SAAS,GAAGwC,YAAY,CAACxC,SAAS;IAAE8C,OAAO,GAAGN,YAAY,CAACM,OAAO;EACtE9C,SAAS,CAACC,mBAAmB,GAAG2B,mBAAmB,CAAC5B,SAAS,CAACC,mBAAmB,CAAC;EAClFD,SAAS,CAACE,mBAAmB,GAAG0B,mBAAmB,CAAC5B,SAAS,CAACE,mBAAmB,CAAC;EAClFF,SAAS,CAACK,kBAAkB,GAAGuB,mBAAmB,CAAC5B,SAAS,CAACK,kBAAkB,CAAC;EAChFL,SAAS,CAACM,cAAc,GAAGsB,mBAAmB,CAAC5B,SAAS,CAACM,cAAc,CAAC;EACxEN,SAAS,CAACG,oBAAoB,GAAGyB,mBAAmB,CAACa,gBAAgB,CAAC,sBAAsB,EAAEzC,SAAS,CAACG,oBAAoB,EAAE,EAAE,CAAC,CAAC;EAClI;EACA,IAAItB,GAAG,CAACoD,MAAM,EAAE,kCAAkC,CAAC,KAAKtC,SAAS,IAAI6C,YAAY,CAAClB,IAAI,CAACE,eAAe,KAAKrC,KAAK,EAC5Ga,SAAS,CAACI,sBAAsB,GAAG,EAAE;EACzCJ,SAAS,CAACI,sBAAsB,GAAGwB,mBAAmB,CAAC5B,SAAS,CAACI,sBAAsB,CAAC;EACxF;EACA,IAAIJ,SAAS,CAAC+C,kBAAkB,EAC5BpB,GAAG,CAACqB,IAAI,CAAC,+HAA+H,CAAC;EAC7I;EACAF,OAAO,CAACG,yBAAyB,GAAGrB,mBAAmB,CAACkB,OAAO,CAACG,yBAAyB,CAAC;EAC1FH,OAAO,CAACI,YAAY,GAAGtB,mBAAmB,CAACkB,OAAO,CAACI,YAAY,CAAC;EAChEJ,OAAO,CAACK,qBAAqB,GAAGvB,mBAAmB,CAACkB,OAAO,CAACK,qBAAqB,CAAC;EAClF;EACA;EACAX,YAAY,CAAC1D,IAAI,GAAGA,IAAI,CAAC0D,YAAY,CAAC/C,IAAI,CAACC,gBAAgB,EAAE8C,YAAY,CAAC1D,IAAI,CAAC;EAC/E;EACA;EACA,IAAIkC,OAAO,EACPwB,YAAY,CAACxB,OAAO,GAAGA,OAAO,CAACwB,YAAY,CAAC;EAChD;EACA,IAAIN,gBAAgB,CAACkB,SAAS,EAAE;IAC5B,IAAIC,QAAQ,GAAGb,YAAY,CAAC/C,IAAI,CAACG,GAAG;IACpC;IACA,IAAI4C,YAAY,CAAC1D,IAAI,KAAKI,cAAc,IAAImE,QAAQ,KAAK1D,SAAS,EAAE;MAChE6C,YAAY,CAAC/C,IAAI,CAACG,GAAG,GAAG,eAAe;IAC3C,CAAC,MACI;MACD;MACA;MACA;MACA4C,YAAY,CAAC/C,IAAI,CAACG,GAAG,GAAGP,WAAW,CAACsC,GAAG,EAAE0B,QAAQ,EAAE,sBAAsB,CAAC;IAC9E;IACA,IAAInB,gBAAgB,CAACoB,QAAQ,EAAE;MAC3B,IAAIC,OAAO,GAAGf,YAAY,CAAC/C,IAAI,CAACI,WAAW;MAC3C,IAAI0D,OAAO,KAAK5D,SAAS,EAAE;QAAE;QACzB6C,YAAY,CAAC/C,IAAI,CAACI,WAAW,GAAGP,mBAAmB,CAACqC,GAAG,EAAE4B,OAAO,EAAE,sBAAsB,CAAC;MAC7F;IACJ;EACJ;EACA;EACA;EACAf,YAAY,CAACJ,OAAO,GAAGA,OAAO,CAACI,YAAY,CAAC;EAC5C;EACA;EACA;EACA,IAAIpB,YAAY,EACZoB,YAAY,CAACpB,YAAY,GAAGA,YAAY,CAACoB,YAAY,CAAC;EAC1D,IAAIF,SAAS,EACTE,YAAY,CAAClB,IAAI,CAACG,aAAa,GAAGa,SAAS,CAACE,YAAY,CAAC;EAC7D;EACA,IAAIA,YAAY,CAACnB,gBAAgB,KAAK,KAAK,EAAE;IAAE;IAC3CmB,YAAY,CAACnB,gBAAgB,GAAG,IAAI;IACpC;IACA;IACArB,SAAS,CAACS,oBAAoB,GAAGmB,mBAAmB,CAAC5B,SAAS,CAACS,oBAAoB,CAAC;EACxF;EACA;EACA,IAAI+B,YAAY,CAAClB,IAAI,CAACI,OAAO,KAAK,KAAK,EAAE;IAAE;IACvCc,YAAY,CAAClB,IAAI,CAACI,OAAO,GAAG,IAAI;EACpC;EACA;EACA,IAAI8B,sBAAsB,GAAGzE,oBAAoB,CAAC4C,GAAG,EAAEa,YAAY,CAAClB,IAAI,CAACC,YAAY,EAAEiB,YAAY,CAAC1D,IAAI,CAAC;EACzG0D,YAAY,CAAClB,IAAI,CAACC,YAAY,GAAGiC,sBAAsB,CAACC,YAAY;EACpEjB,YAAY,CAAClB,IAAI,CAACoC,wBAAwB,GAAGF,sBAAsB;EACnE;EACA;EACAhB,YAAY,CAACmB,WAAW,GAAGpB,OAAO,CAACC,YAAY,CAAC;EAChD,OAAOA,YAAY;AACvB"},"metadata":{},"sourceType":"module"}