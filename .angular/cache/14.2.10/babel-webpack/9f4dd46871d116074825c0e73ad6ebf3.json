{"ast":null,"code":"import { isString } from '../../../utils/lang';\nvar VERSION = '1.1';\nvar CONTROL_CHANNEL_REGEX = /^control_/;\n/**\n * Build metadata headers for SSE connection.\n *\n * @param {ISettings} settings Validated settings.\n * @returns {Record<string, string>} Headers object\n */\nfunction buildSSEHeaders(settings) {\n  var headers = {\n    SplitSDKClientKey: isString(settings.core.authorizationKey) ? settings.core.authorizationKey.slice(-4) : '',\n    SplitSDKVersion: settings.version\n  };\n  // ip and hostname are false if IPAddressesEnabled is false\n  var _a = settings.runtime,\n    ip = _a.ip,\n    hostname = _a.hostname;\n  if (ip) headers['SplitSDKMachineIP'] = ip;\n  if (hostname) headers['SplitSDKMachineName'] = hostname;\n  return headers;\n}\n/**\n * Handles streaming connections with EventSource API\n */\nvar SSEClient = /** @class */function () {\n  /**\n   * SSEClient constructor.\n   *\n   * @param settings Validated settings.\n   * @param useHeaders True to send metadata as headers or false to send as query params. If `true`, the provided EventSource must support headers.\n   * @param getEventSource Function to get the EventSource constructor.\n   * @throws 'EventSource API is not available. ' if EventSource is not available.\n   */\n  function SSEClient(settings, useHeaders, getEventSource) {\n    this.eventSource = getEventSource && getEventSource();\n    // if eventSource is not available, throw an exception\n    if (!this.eventSource) throw new Error('EventSource API is not available. ');\n    this.streamingUrl = settings.urls.streaming + '/sse';\n    // @TODO get `useHeaders` flag from `getEventSource`, to use EventSource headers on client-side SDKs when possible.\n    this.useHeaders = useHeaders;\n    this.headers = buildSSEHeaders(settings);\n  }\n  SSEClient.prototype.setEventHandler = function (handler) {\n    this.handler = handler;\n  };\n  /**\n   * Open the connection with a given authToken\n   *\n   * @param {IAuthTokenPushEnabled} authToken\n   * @throws {TypeError} Will throw an error if `authToken` is undefined\n   */\n  SSEClient.prototype.open = function (authToken) {\n    this.close(); // it closes connection if previously opened\n    var channelsQueryParam = Object.keys(authToken.channels).map(function (channel) {\n      var params = CONTROL_CHANNEL_REGEX.test(channel) ? '[?occupancy=metrics.publishers]' : '';\n      return encodeURIComponent(params + channel);\n    }).join(',');\n    var url = this.streamingUrl + \"?channels=\" + channelsQueryParam + \"&accessToken=\" + authToken.token + \"&v=\" + VERSION + \"&heartbeats=true\"; // same results using `&heartbeats=false`\n    this.connection = new this.eventSource(\n    // For client-side SDKs, SplitSDKClientKey and SplitSDKClientKey metadata is passed as query params,\n    // because native EventSource implementations for browser doesn't support headers.\n    this.useHeaders ? url : url + (\"&SplitSDKVersion=\" + this.headers.SplitSDKVersion + \"&SplitSDKClientKey=\" + this.headers.SplitSDKClientKey),\n    // @ts-ignore. For server-side SDKs, metadata is passed via headers. EventSource must support headers, like 'eventsource' package for Node.\n    this.useHeaders ? {\n      headers: this.headers\n    } : undefined);\n    if (this.handler) {\n      // no need to check if SSEClient is used only by PushManager\n      this.connection.addEventListener('open', this.handler.handleOpen);\n      this.connection.addEventListener('message', this.handler.handleMessage);\n      this.connection.addEventListener('error', this.handler.handleError);\n    }\n  };\n  /** Close connection  */\n  SSEClient.prototype.close = function () {\n    if (this.connection) this.connection.close();\n  };\n  return SSEClient;\n}();\nexport { SSEClient };","map":{"version":3,"names":["isString","VERSION","CONTROL_CHANNEL_REGEX","buildSSEHeaders","settings","headers","SplitSDKClientKey","core","authorizationKey","slice","SplitSDKVersion","version","_a","runtime","ip","hostname","SSEClient","useHeaders","getEventSource","eventSource","Error","streamingUrl","urls","streaming","prototype","setEventHandler","handler","open","authToken","close","channelsQueryParam","Object","keys","channels","map","channel","params","test","encodeURIComponent","join","url","token","connection","undefined","addEventListener","handleOpen","handleMessage","handleError"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/streaming/SSEClient/index.js"],"sourcesContent":["import { isString } from '../../../utils/lang';\nvar VERSION = '1.1';\nvar CONTROL_CHANNEL_REGEX = /^control_/;\n/**\n * Build metadata headers for SSE connection.\n *\n * @param {ISettings} settings Validated settings.\n * @returns {Record<string, string>} Headers object\n */\nfunction buildSSEHeaders(settings) {\n    var headers = {\n        SplitSDKClientKey: isString(settings.core.authorizationKey) ? settings.core.authorizationKey.slice(-4) : '',\n        SplitSDKVersion: settings.version,\n    };\n    // ip and hostname are false if IPAddressesEnabled is false\n    var _a = settings.runtime, ip = _a.ip, hostname = _a.hostname;\n    if (ip)\n        headers['SplitSDKMachineIP'] = ip;\n    if (hostname)\n        headers['SplitSDKMachineName'] = hostname;\n    return headers;\n}\n/**\n * Handles streaming connections with EventSource API\n */\nvar SSEClient = /** @class */ (function () {\n    /**\n     * SSEClient constructor.\n     *\n     * @param settings Validated settings.\n     * @param useHeaders True to send metadata as headers or false to send as query params. If `true`, the provided EventSource must support headers.\n     * @param getEventSource Function to get the EventSource constructor.\n     * @throws 'EventSource API is not available. ' if EventSource is not available.\n     */\n    function SSEClient(settings, useHeaders, getEventSource) {\n        this.eventSource = getEventSource && getEventSource();\n        // if eventSource is not available, throw an exception\n        if (!this.eventSource)\n            throw new Error('EventSource API is not available. ');\n        this.streamingUrl = settings.urls.streaming + '/sse';\n        // @TODO get `useHeaders` flag from `getEventSource`, to use EventSource headers on client-side SDKs when possible.\n        this.useHeaders = useHeaders;\n        this.headers = buildSSEHeaders(settings);\n    }\n    SSEClient.prototype.setEventHandler = function (handler) {\n        this.handler = handler;\n    };\n    /**\n     * Open the connection with a given authToken\n     *\n     * @param {IAuthTokenPushEnabled} authToken\n     * @throws {TypeError} Will throw an error if `authToken` is undefined\n     */\n    SSEClient.prototype.open = function (authToken) {\n        this.close(); // it closes connection if previously opened\n        var channelsQueryParam = Object.keys(authToken.channels).map(function (channel) {\n            var params = CONTROL_CHANNEL_REGEX.test(channel) ? '[?occupancy=metrics.publishers]' : '';\n            return encodeURIComponent(params + channel);\n        }).join(',');\n        var url = this.streamingUrl + \"?channels=\" + channelsQueryParam + \"&accessToken=\" + authToken.token + \"&v=\" + VERSION + \"&heartbeats=true\"; // same results using `&heartbeats=false`\n        this.connection = new this.eventSource(\n        // For client-side SDKs, SplitSDKClientKey and SplitSDKClientKey metadata is passed as query params,\n        // because native EventSource implementations for browser doesn't support headers.\n        this.useHeaders ? url : url + (\"&SplitSDKVersion=\" + this.headers.SplitSDKVersion + \"&SplitSDKClientKey=\" + this.headers.SplitSDKClientKey), \n        // @ts-ignore. For server-side SDKs, metadata is passed via headers. EventSource must support headers, like 'eventsource' package for Node.\n        this.useHeaders ? { headers: this.headers } : undefined);\n        if (this.handler) { // no need to check if SSEClient is used only by PushManager\n            this.connection.addEventListener('open', this.handler.handleOpen);\n            this.connection.addEventListener('message', this.handler.handleMessage);\n            this.connection.addEventListener('error', this.handler.handleError);\n        }\n    };\n    /** Close connection  */\n    SSEClient.prototype.close = function () {\n        if (this.connection)\n            this.connection.close();\n    };\n    return SSEClient;\n}());\nexport { SSEClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}