{"ast":null,"code":"import { ERROR_NULL, ERROR_EMPTY, ERROR_INVALID, WARN_API_KEY, LOG_PREFIX_INSTANTIATION } from '../../logger/constants';\nimport { isString } from '../lang';\nvar item = 'api_key';\n/** validates the given api key */\nexport function validateApiKey(log, maybeApiKey) {\n  var apiKey = false;\n  if (maybeApiKey == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(ERROR_NULL, [LOG_PREFIX_INSTANTIATION, item]);\n  } else if (isString(maybeApiKey)) {\n    if (maybeApiKey.length > 0) apiKey = maybeApiKey;else log.error(ERROR_EMPTY, [LOG_PREFIX_INSTANTIATION, item]);\n  } else {\n    log.error(ERROR_INVALID, [LOG_PREFIX_INSTANTIATION, item]);\n  }\n  return apiKey;\n}\n// Exported for telemetry\nexport var usedKeysMap = {};\n/** validates the given api key and also warns if it is in use */\nexport function validateAndTrackApiKey(log, maybeApiKey) {\n  var apiKey = validateApiKey(log, maybeApiKey);\n  // If the apiKey is correct, we'll save it as the instance creation should work.\n  if (apiKey) {\n    if (!usedKeysMap[apiKey]) {\n      // If this key is not present, only warning scenarios is that we have factories for other keys.\n      usedKeysMap[apiKey] = 1;\n      if (Object.keys(usedKeysMap).length > 1) {\n        log.warn(WARN_API_KEY, ['an instance of the Split factory']);\n      }\n    } else {\n      log.warn(WARN_API_KEY, [usedKeysMap[apiKey] + \" factory/ies with this API Key\"]);\n      usedKeysMap[apiKey]++;\n    }\n  }\n  return apiKey;\n}\nexport function releaseApiKey(apiKey) {\n  if (usedKeysMap[apiKey]) usedKeysMap[apiKey]--;\n  if (usedKeysMap[apiKey] === 0) delete usedKeysMap[apiKey];\n}","map":{"version":3,"names":["ERROR_NULL","ERROR_EMPTY","ERROR_INVALID","WARN_API_KEY","LOG_PREFIX_INSTANTIATION","isString","item","validateApiKey","log","maybeApiKey","apiKey","undefined","error","length","usedKeysMap","validateAndTrackApiKey","Object","keys","warn","releaseApiKey"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/inputValidation/apiKey.js"],"sourcesContent":["import { ERROR_NULL, ERROR_EMPTY, ERROR_INVALID, WARN_API_KEY, LOG_PREFIX_INSTANTIATION } from '../../logger/constants';\nimport { isString } from '../lang';\nvar item = 'api_key';\n/** validates the given api key */\nexport function validateApiKey(log, maybeApiKey) {\n    var apiKey = false;\n    if (maybeApiKey == undefined) { // eslint-disable-line eqeqeq\n        log.error(ERROR_NULL, [LOG_PREFIX_INSTANTIATION, item]);\n    }\n    else if (isString(maybeApiKey)) {\n        if (maybeApiKey.length > 0)\n            apiKey = maybeApiKey;\n        else\n            log.error(ERROR_EMPTY, [LOG_PREFIX_INSTANTIATION, item]);\n    }\n    else {\n        log.error(ERROR_INVALID, [LOG_PREFIX_INSTANTIATION, item]);\n    }\n    return apiKey;\n}\n// Exported for telemetry\nexport var usedKeysMap = {};\n/** validates the given api key and also warns if it is in use */\nexport function validateAndTrackApiKey(log, maybeApiKey) {\n    var apiKey = validateApiKey(log, maybeApiKey);\n    // If the apiKey is correct, we'll save it as the instance creation should work.\n    if (apiKey) {\n        if (!usedKeysMap[apiKey]) {\n            // If this key is not present, only warning scenarios is that we have factories for other keys.\n            usedKeysMap[apiKey] = 1;\n            if (Object.keys(usedKeysMap).length > 1) {\n                log.warn(WARN_API_KEY, ['an instance of the Split factory']);\n            }\n        }\n        else {\n            log.warn(WARN_API_KEY, [usedKeysMap[apiKey] + \" factory/ies with this API Key\"]);\n            usedKeysMap[apiKey]++;\n        }\n    }\n    return apiKey;\n}\nexport function releaseApiKey(apiKey) {\n    if (usedKeysMap[apiKey])\n        usedKeysMap[apiKey]--;\n    if (usedKeysMap[apiKey] === 0)\n        delete usedKeysMap[apiKey];\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAAEC,YAAY,EAAEC,wBAAwB,QAAQ,wBAAwB;AACvH,SAASC,QAAQ,QAAQ,SAAS;AAClC,IAAIC,IAAI,GAAG,SAAS;AACpB;AACA,OAAO,SAASC,cAAc,CAACC,GAAG,EAAEC,WAAW,EAAE;EAC7C,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAID,WAAW,IAAIE,SAAS,EAAE;IAAE;IAC5BH,GAAG,CAACI,KAAK,CAACZ,UAAU,EAAE,CAACI,wBAAwB,EAAEE,IAAI,CAAC,CAAC;EAC3D,CAAC,MACI,IAAID,QAAQ,CAACI,WAAW,CAAC,EAAE;IAC5B,IAAIA,WAAW,CAACI,MAAM,GAAG,CAAC,EACtBH,MAAM,GAAGD,WAAW,CAAC,KAErBD,GAAG,CAACI,KAAK,CAACX,WAAW,EAAE,CAACG,wBAAwB,EAAEE,IAAI,CAAC,CAAC;EAChE,CAAC,MACI;IACDE,GAAG,CAACI,KAAK,CAACV,aAAa,EAAE,CAACE,wBAAwB,EAAEE,IAAI,CAAC,CAAC;EAC9D;EACA,OAAOI,MAAM;AACjB;AACA;AACA,OAAO,IAAII,WAAW,GAAG,CAAC,CAAC;AAC3B;AACA,OAAO,SAASC,sBAAsB,CAACP,GAAG,EAAEC,WAAW,EAAE;EACrD,IAAIC,MAAM,GAAGH,cAAc,CAACC,GAAG,EAAEC,WAAW,CAAC;EAC7C;EACA,IAAIC,MAAM,EAAE;IACR,IAAI,CAACI,WAAW,CAACJ,MAAM,CAAC,EAAE;MACtB;MACAI,WAAW,CAACJ,MAAM,CAAC,GAAG,CAAC;MACvB,IAAIM,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACD,MAAM,GAAG,CAAC,EAAE;QACrCL,GAAG,CAACU,IAAI,CAACf,YAAY,EAAE,CAAC,kCAAkC,CAAC,CAAC;MAChE;IACJ,CAAC,MACI;MACDK,GAAG,CAACU,IAAI,CAACf,YAAY,EAAE,CAACW,WAAW,CAACJ,MAAM,CAAC,GAAG,gCAAgC,CAAC,CAAC;MAChFI,WAAW,CAACJ,MAAM,CAAC,EAAE;IACzB;EACJ;EACA,OAAOA,MAAM;AACjB;AACA,OAAO,SAASS,aAAa,CAACT,MAAM,EAAE;EAClC,IAAII,WAAW,CAACJ,MAAM,CAAC,EACnBI,WAAW,CAACJ,MAAM,CAAC,EAAE;EACzB,IAAII,WAAW,CAACJ,MAAM,CAAC,KAAK,CAAC,EACzB,OAAOI,WAAW,CAACJ,MAAM,CAAC;AAClC"},"metadata":{},"sourceType":"module"}