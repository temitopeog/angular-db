{"ast":null,"code":"import { splitHttpClientFactory } from './splitHttpClient';\nimport { objectAssign } from '../utils/lang/objectAssign';\nimport { SPLITS, IMPRESSIONS, IMPRESSIONS_COUNT, EVENTS, TELEMETRY, TOKEN, SEGMENT, MY_SEGMENT } from '../utils/constants';\nvar noCacheHeaderOptions = {\n  headers: {\n    'Cache-Control': 'no-cache'\n  }\n};\nfunction userKeyToQueryParam(userKey) {\n  return 'users=' + encodeURIComponent(userKey); // no need to check availability of `encodeURIComponent`, since it is a global highly supported.\n}\n/**\n * Factory of SplitApi objects, which group the collection of Split HTTP endpoints used by the SDK\n *\n * @param settings validated settings object\n * @param platform object containing environment-specific `getFetch` and `getOptions` dependencies\n */\nexport function splitApiFactory(settings, platform, telemetryTracker) {\n  var urls = settings.urls;\n  var filterQueryString = settings.sync.__splitFiltersValidation && settings.sync.__splitFiltersValidation.queryString;\n  var SplitSDKImpressionsMode = settings.sync.impressionsMode;\n  var splitHttpClient = splitHttpClientFactory(settings, platform.getFetch, platform.getOptions);\n  return {\n    getSdkAPIHealthCheck: function () {\n      var url = urls.sdk + \"/version\";\n      return splitHttpClient(url).then(function () {\n        return true;\n      }).catch(function () {\n        return false;\n      });\n    },\n    getEventsAPIHealthCheck: function () {\n      var url = urls.events + \"/version\";\n      return splitHttpClient(url).then(function () {\n        return true;\n      }).catch(function () {\n        return false;\n      });\n    },\n    fetchAuth: function (userMatchingKeys) {\n      var url = urls.auth + \"/v2/auth\";\n      if (userMatchingKeys) {\n        // accounting the possibility that `userMatchingKeys` is undefined (server-side API)\n        var queryParams = userMatchingKeys.map(userKeyToQueryParam).join('&');\n        if (queryParams)\n          // accounting the possibility that `userKeys` and thus `queryParams` are empty\n          url += '?' + queryParams;\n      }\n      return splitHttpClient(url, undefined, telemetryTracker.trackHttp(TOKEN));\n    },\n    fetchSplitChanges: function (since, noCache) {\n      var url = urls.sdk + \"/splitChanges?since=\" + since + (filterQueryString || '');\n      return splitHttpClient(url, noCache ? noCacheHeaderOptions : undefined, telemetryTracker.trackHttp(SPLITS));\n    },\n    fetchSegmentChanges: function (since, segmentName, noCache) {\n      var url = urls.sdk + \"/segmentChanges/\" + segmentName + \"?since=\" + since;\n      return splitHttpClient(url, noCache ? noCacheHeaderOptions : undefined, telemetryTracker.trackHttp(SEGMENT));\n    },\n    fetchMySegments: function (userMatchingKey, noCache) {\n      /**\n       * URI encoding of user keys in order to:\n       *  - avoid 400 responses (due to URI malformed). E.g.: '/api/mySegments/%'\n       *  - avoid 404 responses. E.g.: '/api/mySegments/foo/bar'\n       *  - match user keys with special characters. E.g.: 'foo%bar', 'foo/bar'\n       */\n      var url = urls.sdk + \"/mySegments/\" + encodeURIComponent(userMatchingKey);\n      return splitHttpClient(url, noCache ? noCacheHeaderOptions : undefined, telemetryTracker.trackHttp(MY_SEGMENT));\n    },\n    /**\n     * Post events.\n     *\n     * @param body  Events bulk payload\n     * @param headers  Optionals headers to overwrite default ones. For example, it is used in producer mode to overwrite metadata headers.\n     */\n    postEventsBulk: function (body, headers) {\n      var url = urls.events + \"/events/bulk\";\n      return splitHttpClient(url, {\n        method: 'POST',\n        body: body,\n        headers: headers\n      }, telemetryTracker.trackHttp(EVENTS));\n    },\n    /**\n     * Post impressions.\n     *\n     * @param body  Impressions bulk payload\n     * @param headers  Optionals headers to overwrite default ones. For example, it is used in producer mode to overwrite metadata headers.\n     */\n    postTestImpressionsBulk: function (body, headers) {\n      var url = urls.events + \"/testImpressions/bulk\";\n      return splitHttpClient(url, {\n        // Adding extra headers to send impressions in OPTIMIZED or DEBUG modes.\n        method: 'POST',\n        body: body,\n        headers: objectAssign({\n          SplitSDKImpressionsMode: SplitSDKImpressionsMode\n        }, headers)\n      }, telemetryTracker.trackHttp(IMPRESSIONS));\n    },\n    /**\n     * Post impressions counts.\n     *\n     * @param body  Impressions counts payload\n     * @param headers  Optionals headers to overwrite default ones. For example, it is used in producer mode to overwrite metadata headers.\n     */\n    postTestImpressionsCount: function (body, headers) {\n      var url = urls.events + \"/testImpressions/count\";\n      return splitHttpClient(url, {\n        method: 'POST',\n        body: body,\n        headers: headers\n      }, telemetryTracker.trackHttp(IMPRESSIONS_COUNT));\n    },\n    postMetricsConfig: function (body) {\n      var url = urls.telemetry + \"/v1/metrics/config\";\n      return splitHttpClient(url, {\n        method: 'POST',\n        body: body\n      }, telemetryTracker.trackHttp(TELEMETRY), true);\n    },\n    postMetricsUsage: function (body) {\n      var url = urls.telemetry + \"/v1/metrics/usage\";\n      return splitHttpClient(url, {\n        method: 'POST',\n        body: body\n      }, telemetryTracker.trackHttp(TELEMETRY), true);\n    }\n  };\n}","map":{"version":3,"names":["splitHttpClientFactory","objectAssign","SPLITS","IMPRESSIONS","IMPRESSIONS_COUNT","EVENTS","TELEMETRY","TOKEN","SEGMENT","MY_SEGMENT","noCacheHeaderOptions","headers","userKeyToQueryParam","userKey","encodeURIComponent","splitApiFactory","settings","platform","telemetryTracker","urls","filterQueryString","sync","__splitFiltersValidation","queryString","SplitSDKImpressionsMode","impressionsMode","splitHttpClient","getFetch","getOptions","getSdkAPIHealthCheck","url","sdk","then","catch","getEventsAPIHealthCheck","events","fetchAuth","userMatchingKeys","auth","queryParams","map","join","undefined","trackHttp","fetchSplitChanges","since","noCache","fetchSegmentChanges","segmentName","fetchMySegments","userMatchingKey","postEventsBulk","body","method","postTestImpressionsBulk","postTestImpressionsCount","postMetricsConfig","telemetry","postMetricsUsage"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/services/splitApi.js"],"sourcesContent":["import { splitHttpClientFactory } from './splitHttpClient';\nimport { objectAssign } from '../utils/lang/objectAssign';\nimport { SPLITS, IMPRESSIONS, IMPRESSIONS_COUNT, EVENTS, TELEMETRY, TOKEN, SEGMENT, MY_SEGMENT } from '../utils/constants';\nvar noCacheHeaderOptions = { headers: { 'Cache-Control': 'no-cache' } };\nfunction userKeyToQueryParam(userKey) {\n    return 'users=' + encodeURIComponent(userKey); // no need to check availability of `encodeURIComponent`, since it is a global highly supported.\n}\n/**\n * Factory of SplitApi objects, which group the collection of Split HTTP endpoints used by the SDK\n *\n * @param settings validated settings object\n * @param platform object containing environment-specific `getFetch` and `getOptions` dependencies\n */\nexport function splitApiFactory(settings, platform, telemetryTracker) {\n    var urls = settings.urls;\n    var filterQueryString = settings.sync.__splitFiltersValidation && settings.sync.__splitFiltersValidation.queryString;\n    var SplitSDKImpressionsMode = settings.sync.impressionsMode;\n    var splitHttpClient = splitHttpClientFactory(settings, platform.getFetch, platform.getOptions);\n    return {\n        getSdkAPIHealthCheck: function () {\n            var url = urls.sdk + \"/version\";\n            return splitHttpClient(url).then(function () { return true; }).catch(function () { return false; });\n        },\n        getEventsAPIHealthCheck: function () {\n            var url = urls.events + \"/version\";\n            return splitHttpClient(url).then(function () { return true; }).catch(function () { return false; });\n        },\n        fetchAuth: function (userMatchingKeys) {\n            var url = urls.auth + \"/v2/auth\";\n            if (userMatchingKeys) { // accounting the possibility that `userMatchingKeys` is undefined (server-side API)\n                var queryParams = userMatchingKeys.map(userKeyToQueryParam).join('&');\n                if (queryParams) // accounting the possibility that `userKeys` and thus `queryParams` are empty\n                    url += '?' + queryParams;\n            }\n            return splitHttpClient(url, undefined, telemetryTracker.trackHttp(TOKEN));\n        },\n        fetchSplitChanges: function (since, noCache) {\n            var url = urls.sdk + \"/splitChanges?since=\" + since + (filterQueryString || '');\n            return splitHttpClient(url, noCache ? noCacheHeaderOptions : undefined, telemetryTracker.trackHttp(SPLITS));\n        },\n        fetchSegmentChanges: function (since, segmentName, noCache) {\n            var url = urls.sdk + \"/segmentChanges/\" + segmentName + \"?since=\" + since;\n            return splitHttpClient(url, noCache ? noCacheHeaderOptions : undefined, telemetryTracker.trackHttp(SEGMENT));\n        },\n        fetchMySegments: function (userMatchingKey, noCache) {\n            /**\n             * URI encoding of user keys in order to:\n             *  - avoid 400 responses (due to URI malformed). E.g.: '/api/mySegments/%'\n             *  - avoid 404 responses. E.g.: '/api/mySegments/foo/bar'\n             *  - match user keys with special characters. E.g.: 'foo%bar', 'foo/bar'\n             */\n            var url = urls.sdk + \"/mySegments/\" + encodeURIComponent(userMatchingKey);\n            return splitHttpClient(url, noCache ? noCacheHeaderOptions : undefined, telemetryTracker.trackHttp(MY_SEGMENT));\n        },\n        /**\n         * Post events.\n         *\n         * @param body  Events bulk payload\n         * @param headers  Optionals headers to overwrite default ones. For example, it is used in producer mode to overwrite metadata headers.\n         */\n        postEventsBulk: function (body, headers) {\n            var url = urls.events + \"/events/bulk\";\n            return splitHttpClient(url, { method: 'POST', body: body, headers: headers }, telemetryTracker.trackHttp(EVENTS));\n        },\n        /**\n         * Post impressions.\n         *\n         * @param body  Impressions bulk payload\n         * @param headers  Optionals headers to overwrite default ones. For example, it is used in producer mode to overwrite metadata headers.\n         */\n        postTestImpressionsBulk: function (body, headers) {\n            var url = urls.events + \"/testImpressions/bulk\";\n            return splitHttpClient(url, {\n                // Adding extra headers to send impressions in OPTIMIZED or DEBUG modes.\n                method: 'POST',\n                body: body,\n                headers: objectAssign({ SplitSDKImpressionsMode: SplitSDKImpressionsMode }, headers)\n            }, telemetryTracker.trackHttp(IMPRESSIONS));\n        },\n        /**\n         * Post impressions counts.\n         *\n         * @param body  Impressions counts payload\n         * @param headers  Optionals headers to overwrite default ones. For example, it is used in producer mode to overwrite metadata headers.\n         */\n        postTestImpressionsCount: function (body, headers) {\n            var url = urls.events + \"/testImpressions/count\";\n            return splitHttpClient(url, { method: 'POST', body: body, headers: headers }, telemetryTracker.trackHttp(IMPRESSIONS_COUNT));\n        },\n        postMetricsConfig: function (body) {\n            var url = urls.telemetry + \"/v1/metrics/config\";\n            return splitHttpClient(url, { method: 'POST', body: body }, telemetryTracker.trackHttp(TELEMETRY), true);\n        },\n        postMetricsUsage: function (body) {\n            var url = urls.telemetry + \"/v1/metrics/usage\";\n            return splitHttpClient(url, { method: 'POST', body: body }, telemetryTracker.trackHttp(TELEMETRY), true);\n        }\n    };\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,mBAAmB;AAC1D,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,MAAM,EAAEC,WAAW,EAAEC,iBAAiB,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,QAAQ,oBAAoB;AAC1H,IAAIC,oBAAoB,GAAG;EAAEC,OAAO,EAAE;IAAE,eAAe,EAAE;EAAW;AAAE,CAAC;AACvE,SAASC,mBAAmB,CAACC,OAAO,EAAE;EAClC,OAAO,QAAQ,GAAGC,kBAAkB,CAACD,OAAO,CAAC,CAAC,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAe,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,gBAAgB,EAAE;EAClE,IAAIC,IAAI,GAAGH,QAAQ,CAACG,IAAI;EACxB,IAAIC,iBAAiB,GAAGJ,QAAQ,CAACK,IAAI,CAACC,wBAAwB,IAAIN,QAAQ,CAACK,IAAI,CAACC,wBAAwB,CAACC,WAAW;EACpH,IAAIC,uBAAuB,GAAGR,QAAQ,CAACK,IAAI,CAACI,eAAe;EAC3D,IAAIC,eAAe,GAAG1B,sBAAsB,CAACgB,QAAQ,EAAEC,QAAQ,CAACU,QAAQ,EAAEV,QAAQ,CAACW,UAAU,CAAC;EAC9F,OAAO;IACHC,oBAAoB,EAAE,YAAY;MAC9B,IAAIC,GAAG,GAAGX,IAAI,CAACY,GAAG,GAAG,UAAU;MAC/B,OAAOL,eAAe,CAACI,GAAG,CAAC,CAACE,IAAI,CAAC,YAAY;QAAE,OAAO,IAAI;MAAE,CAAC,CAAC,CAACC,KAAK,CAAC,YAAY;QAAE,OAAO,KAAK;MAAE,CAAC,CAAC;IACvG,CAAC;IACDC,uBAAuB,EAAE,YAAY;MACjC,IAAIJ,GAAG,GAAGX,IAAI,CAACgB,MAAM,GAAG,UAAU;MAClC,OAAOT,eAAe,CAACI,GAAG,CAAC,CAACE,IAAI,CAAC,YAAY;QAAE,OAAO,IAAI;MAAE,CAAC,CAAC,CAACC,KAAK,CAAC,YAAY;QAAE,OAAO,KAAK;MAAE,CAAC,CAAC;IACvG,CAAC;IACDG,SAAS,EAAE,UAAUC,gBAAgB,EAAE;MACnC,IAAIP,GAAG,GAAGX,IAAI,CAACmB,IAAI,GAAG,UAAU;MAChC,IAAID,gBAAgB,EAAE;QAAE;QACpB,IAAIE,WAAW,GAAGF,gBAAgB,CAACG,GAAG,CAAC5B,mBAAmB,CAAC,CAAC6B,IAAI,CAAC,GAAG,CAAC;QACrE,IAAIF,WAAW;UAAE;UACbT,GAAG,IAAI,GAAG,GAAGS,WAAW;MAChC;MACA,OAAOb,eAAe,CAACI,GAAG,EAAEY,SAAS,EAAExB,gBAAgB,CAACyB,SAAS,CAACpC,KAAK,CAAC,CAAC;IAC7E,CAAC;IACDqC,iBAAiB,EAAE,UAAUC,KAAK,EAAEC,OAAO,EAAE;MACzC,IAAIhB,GAAG,GAAGX,IAAI,CAACY,GAAG,GAAG,sBAAsB,GAAGc,KAAK,IAAIzB,iBAAiB,IAAI,EAAE,CAAC;MAC/E,OAAOM,eAAe,CAACI,GAAG,EAAEgB,OAAO,GAAGpC,oBAAoB,GAAGgC,SAAS,EAAExB,gBAAgB,CAACyB,SAAS,CAACzC,MAAM,CAAC,CAAC;IAC/G,CAAC;IACD6C,mBAAmB,EAAE,UAAUF,KAAK,EAAEG,WAAW,EAAEF,OAAO,EAAE;MACxD,IAAIhB,GAAG,GAAGX,IAAI,CAACY,GAAG,GAAG,kBAAkB,GAAGiB,WAAW,GAAG,SAAS,GAAGH,KAAK;MACzE,OAAOnB,eAAe,CAACI,GAAG,EAAEgB,OAAO,GAAGpC,oBAAoB,GAAGgC,SAAS,EAAExB,gBAAgB,CAACyB,SAAS,CAACnC,OAAO,CAAC,CAAC;IAChH,CAAC;IACDyC,eAAe,EAAE,UAAUC,eAAe,EAAEJ,OAAO,EAAE;MACjD;AACZ;AACA;AACA;AACA;AACA;MACY,IAAIhB,GAAG,GAAGX,IAAI,CAACY,GAAG,GAAG,cAAc,GAAGjB,kBAAkB,CAACoC,eAAe,CAAC;MACzE,OAAOxB,eAAe,CAACI,GAAG,EAAEgB,OAAO,GAAGpC,oBAAoB,GAAGgC,SAAS,EAAExB,gBAAgB,CAACyB,SAAS,CAAClC,UAAU,CAAC,CAAC;IACnH,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQ0C,cAAc,EAAE,UAAUC,IAAI,EAAEzC,OAAO,EAAE;MACrC,IAAImB,GAAG,GAAGX,IAAI,CAACgB,MAAM,GAAG,cAAc;MACtC,OAAOT,eAAe,CAACI,GAAG,EAAE;QAAEuB,MAAM,EAAE,MAAM;QAAED,IAAI,EAAEA,IAAI;QAAEzC,OAAO,EAAEA;MAAQ,CAAC,EAAEO,gBAAgB,CAACyB,SAAS,CAACtC,MAAM,CAAC,CAAC;IACrH,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQiD,uBAAuB,EAAE,UAAUF,IAAI,EAAEzC,OAAO,EAAE;MAC9C,IAAImB,GAAG,GAAGX,IAAI,CAACgB,MAAM,GAAG,uBAAuB;MAC/C,OAAOT,eAAe,CAACI,GAAG,EAAE;QACxB;QACAuB,MAAM,EAAE,MAAM;QACdD,IAAI,EAAEA,IAAI;QACVzC,OAAO,EAAEV,YAAY,CAAC;UAAEuB,uBAAuB,EAAEA;QAAwB,CAAC,EAAEb,OAAO;MACvF,CAAC,EAAEO,gBAAgB,CAACyB,SAAS,CAACxC,WAAW,CAAC,CAAC;IAC/C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQoD,wBAAwB,EAAE,UAAUH,IAAI,EAAEzC,OAAO,EAAE;MAC/C,IAAImB,GAAG,GAAGX,IAAI,CAACgB,MAAM,GAAG,wBAAwB;MAChD,OAAOT,eAAe,CAACI,GAAG,EAAE;QAAEuB,MAAM,EAAE,MAAM;QAAED,IAAI,EAAEA,IAAI;QAAEzC,OAAO,EAAEA;MAAQ,CAAC,EAAEO,gBAAgB,CAACyB,SAAS,CAACvC,iBAAiB,CAAC,CAAC;IAChI,CAAC;IACDoD,iBAAiB,EAAE,UAAUJ,IAAI,EAAE;MAC/B,IAAItB,GAAG,GAAGX,IAAI,CAACsC,SAAS,GAAG,oBAAoB;MAC/C,OAAO/B,eAAe,CAACI,GAAG,EAAE;QAAEuB,MAAM,EAAE,MAAM;QAAED,IAAI,EAAEA;MAAK,CAAC,EAAElC,gBAAgB,CAACyB,SAAS,CAACrC,SAAS,CAAC,EAAE,IAAI,CAAC;IAC5G,CAAC;IACDoD,gBAAgB,EAAE,UAAUN,IAAI,EAAE;MAC9B,IAAItB,GAAG,GAAGX,IAAI,CAACsC,SAAS,GAAG,mBAAmB;MAC9C,OAAO/B,eAAe,CAACI,GAAG,EAAE;QAAEuB,MAAM,EAAE,MAAM;QAAED,IAAI,EAAEA;MAAK,CAAC,EAAElC,gBAAgB,CAACyB,SAAS,CAACrC,SAAS,CAAC,EAAE,IAAI,CAAC;IAC5G;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module"}