{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { KeyBuilder } from './KeyBuilder';\nvar methodNames = {\n  t: 'treatment',\n  ts: 'treatments',\n  tc: 'treatmentWithConfig',\n  tcs: 'treatmentsWithConfig',\n  tr: 'track'\n};\nvar KeyBuilderSS = /** @class */function (_super) {\n  __extends(KeyBuilderSS, _super);\n  function KeyBuilderSS(prefix, metadata) {\n    var _this = _super.call(this, prefix) || this;\n    _this.metadata = metadata;\n    return _this;\n  }\n  KeyBuilderSS.prototype.buildRegisteredSegmentsKey = function () {\n    return this.prefix + \".segments.registered\";\n  };\n  KeyBuilderSS.prototype.buildImpressionsKey = function () {\n    return this.prefix + \".impressions\";\n  };\n  KeyBuilderSS.prototype.buildEventsKey = function () {\n    return this.prefix + \".events\";\n  };\n  KeyBuilderSS.prototype.searchPatternForSplitKeys = function () {\n    return this.buildSplitKeyPrefix() + \"*\";\n  };\n  /* Telemetry keys */\n  KeyBuilderSS.prototype.buildLatencyKey = function (method, bucket) {\n    return this.prefix + \".telemetry.latencies::\" + this.buildVersionablePrefix() + \"/\" + methodNames[method] + \"/\" + bucket;\n  };\n  KeyBuilderSS.prototype.buildExceptionKey = function (method) {\n    return this.prefix + \".telemetry.exceptions::\" + this.buildVersionablePrefix() + \"/\" + methodNames[method];\n  };\n  KeyBuilderSS.prototype.buildInitKey = function () {\n    return this.prefix + \".telemetry.init::\" + this.buildVersionablePrefix();\n  };\n  KeyBuilderSS.prototype.buildVersionablePrefix = function () {\n    return this.metadata.s + \"/\" + this.metadata.n + \"/\" + this.metadata.i;\n  };\n  return KeyBuilderSS;\n}(KeyBuilder);\nexport { KeyBuilderSS };","map":{"version":3,"names":["__extends","KeyBuilder","methodNames","t","ts","tc","tcs","tr","KeyBuilderSS","_super","prefix","metadata","_this","call","prototype","buildRegisteredSegmentsKey","buildImpressionsKey","buildEventsKey","searchPatternForSplitKeys","buildSplitKeyPrefix","buildLatencyKey","method","bucket","buildVersionablePrefix","buildExceptionKey","buildInitKey","s","n","i"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/KeyBuilderSS.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { KeyBuilder } from './KeyBuilder';\nvar methodNames = {\n    t: 'treatment',\n    ts: 'treatments',\n    tc: 'treatmentWithConfig',\n    tcs: 'treatmentsWithConfig',\n    tr: 'track'\n};\nvar KeyBuilderSS = /** @class */ (function (_super) {\n    __extends(KeyBuilderSS, _super);\n    function KeyBuilderSS(prefix, metadata) {\n        var _this = _super.call(this, prefix) || this;\n        _this.metadata = metadata;\n        return _this;\n    }\n    KeyBuilderSS.prototype.buildRegisteredSegmentsKey = function () {\n        return this.prefix + \".segments.registered\";\n    };\n    KeyBuilderSS.prototype.buildImpressionsKey = function () {\n        return this.prefix + \".impressions\";\n    };\n    KeyBuilderSS.prototype.buildEventsKey = function () {\n        return this.prefix + \".events\";\n    };\n    KeyBuilderSS.prototype.searchPatternForSplitKeys = function () {\n        return this.buildSplitKeyPrefix() + \"*\";\n    };\n    /* Telemetry keys */\n    KeyBuilderSS.prototype.buildLatencyKey = function (method, bucket) {\n        return this.prefix + \".telemetry.latencies::\" + this.buildVersionablePrefix() + \"/\" + methodNames[method] + \"/\" + bucket;\n    };\n    KeyBuilderSS.prototype.buildExceptionKey = function (method) {\n        return this.prefix + \".telemetry.exceptions::\" + this.buildVersionablePrefix() + \"/\" + methodNames[method];\n    };\n    KeyBuilderSS.prototype.buildInitKey = function () {\n        return this.prefix + \".telemetry.init::\" + this.buildVersionablePrefix();\n    };\n    KeyBuilderSS.prototype.buildVersionablePrefix = function () {\n        return this.metadata.s + \"/\" + this.metadata.n + \"/\" + this.metadata.i;\n    };\n    return KeyBuilderSS;\n}(KeyBuilder));\nexport { KeyBuilderSS };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,cAAc;AACzC,IAAIC,WAAW,GAAG;EACdC,CAAC,EAAE,WAAW;EACdC,EAAE,EAAE,YAAY;EAChBC,EAAE,EAAE,qBAAqB;EACzBC,GAAG,EAAE,sBAAsB;EAC3BC,EAAE,EAAE;AACR,CAAC;AACD,IAAIC,YAAY,GAAG,aAAe,UAAUC,MAAM,EAAE;EAChDT,SAAS,CAACQ,YAAY,EAAEC,MAAM,CAAC;EAC/B,SAASD,YAAY,CAACE,MAAM,EAAEC,QAAQ,EAAE;IACpC,IAAIC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,IAAI,EAAEH,MAAM,CAAC,IAAI,IAAI;IAC7CE,KAAK,CAACD,QAAQ,GAAGA,QAAQ;IACzB,OAAOC,KAAK;EAChB;EACAJ,YAAY,CAACM,SAAS,CAACC,0BAA0B,GAAG,YAAY;IAC5D,OAAO,IAAI,CAACL,MAAM,GAAG,sBAAsB;EAC/C,CAAC;EACDF,YAAY,CAACM,SAAS,CAACE,mBAAmB,GAAG,YAAY;IACrD,OAAO,IAAI,CAACN,MAAM,GAAG,cAAc;EACvC,CAAC;EACDF,YAAY,CAACM,SAAS,CAACG,cAAc,GAAG,YAAY;IAChD,OAAO,IAAI,CAACP,MAAM,GAAG,SAAS;EAClC,CAAC;EACDF,YAAY,CAACM,SAAS,CAACI,yBAAyB,GAAG,YAAY;IAC3D,OAAO,IAAI,CAACC,mBAAmB,EAAE,GAAG,GAAG;EAC3C,CAAC;EACD;EACAX,YAAY,CAACM,SAAS,CAACM,eAAe,GAAG,UAAUC,MAAM,EAAEC,MAAM,EAAE;IAC/D,OAAO,IAAI,CAACZ,MAAM,GAAG,wBAAwB,GAAG,IAAI,CAACa,sBAAsB,EAAE,GAAG,GAAG,GAAGrB,WAAW,CAACmB,MAAM,CAAC,GAAG,GAAG,GAAGC,MAAM;EAC5H,CAAC;EACDd,YAAY,CAACM,SAAS,CAACU,iBAAiB,GAAG,UAAUH,MAAM,EAAE;IACzD,OAAO,IAAI,CAACX,MAAM,GAAG,yBAAyB,GAAG,IAAI,CAACa,sBAAsB,EAAE,GAAG,GAAG,GAAGrB,WAAW,CAACmB,MAAM,CAAC;EAC9G,CAAC;EACDb,YAAY,CAACM,SAAS,CAACW,YAAY,GAAG,YAAY;IAC9C,OAAO,IAAI,CAACf,MAAM,GAAG,mBAAmB,GAAG,IAAI,CAACa,sBAAsB,EAAE;EAC5E,CAAC;EACDf,YAAY,CAACM,SAAS,CAACS,sBAAsB,GAAG,YAAY;IACxD,OAAO,IAAI,CAACZ,QAAQ,CAACe,CAAC,GAAG,GAAG,GAAG,IAAI,CAACf,QAAQ,CAACgB,CAAC,GAAG,GAAG,GAAG,IAAI,CAAChB,QAAQ,CAACiB,CAAC;EAC1E,CAAC;EACD,OAAOpB,YAAY;AACvB,CAAC,CAACP,UAAU,CAAE;AACd,SAASO,YAAY"},"metadata":{},"sourceType":"module"}