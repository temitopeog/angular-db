{"ast":null,"code":"import { isString } from '../../../utils/lang';\nexport function parseCondition(data) {\n  var treatment = data.treatment;\n  if (data.keys) {\n    return {\n      conditionType: 'WHITELIST',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'WHITELIST',\n          negate: false,\n          whitelistMatcherData: {\n            whitelist: isString(data.keys) ? [data.keys] : data.keys\n          }\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: \"whitelisted \" + treatment\n    };\n  } else {\n    return {\n      conditionType: 'ROLLOUT',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'ALL_KEYS',\n          negate: false\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: 'default rule'\n    };\n  }\n}","map":{"version":3,"names":["isString","parseCondition","data","treatment","keys","conditionType","matcherGroup","combiner","matchers","keySelector","matcherType","negate","whitelistMatcherData","whitelist","partitions","size","label"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/offline/splitsParser/parseCondition.js"],"sourcesContent":["import { isString } from '../../../utils/lang';\nexport function parseCondition(data) {\n    var treatment = data.treatment;\n    if (data.keys) {\n        return {\n            conditionType: 'WHITELIST',\n            matcherGroup: {\n                combiner: 'AND',\n                matchers: [\n                    {\n                        keySelector: null,\n                        matcherType: 'WHITELIST',\n                        negate: false,\n                        whitelistMatcherData: {\n                            whitelist: isString(data.keys) ? [data.keys] : data.keys\n                        }\n                    }\n                ]\n            },\n            partitions: [\n                {\n                    treatment: treatment,\n                    size: 100\n                }\n            ],\n            label: \"whitelisted \" + treatment\n        };\n    }\n    else {\n        return {\n            conditionType: 'ROLLOUT',\n            matcherGroup: {\n                combiner: 'AND',\n                matchers: [\n                    {\n                        keySelector: null,\n                        matcherType: 'ALL_KEYS',\n                        negate: false\n                    }\n                ]\n            },\n            partitions: [\n                {\n                    treatment: treatment,\n                    size: 100\n                }\n            ],\n            label: 'default rule'\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,SAASC,cAAc,CAACC,IAAI,EAAE;EACjC,IAAIC,SAAS,GAAGD,IAAI,CAACC,SAAS;EAC9B,IAAID,IAAI,CAACE,IAAI,EAAE;IACX,OAAO;MACHC,aAAa,EAAE,WAAW;MAC1BC,YAAY,EAAE;QACVC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,CACN;UACIC,WAAW,EAAE,IAAI;UACjBC,WAAW,EAAE,WAAW;UACxBC,MAAM,EAAE,KAAK;UACbC,oBAAoB,EAAE;YAClBC,SAAS,EAAEb,QAAQ,CAACE,IAAI,CAACE,IAAI,CAAC,GAAG,CAACF,IAAI,CAACE,IAAI,CAAC,GAAGF,IAAI,CAACE;UACxD;QACJ,CAAC;MAET,CAAC;MACDU,UAAU,EAAE,CACR;QACIX,SAAS,EAAEA,SAAS;QACpBY,IAAI,EAAE;MACV,CAAC,CACJ;MACDC,KAAK,EAAE,cAAc,GAAGb;IAC5B,CAAC;EACL,CAAC,MACI;IACD,OAAO;MACHE,aAAa,EAAE,SAAS;MACxBC,YAAY,EAAE;QACVC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,CACN;UACIC,WAAW,EAAE,IAAI;UACjBC,WAAW,EAAE,UAAU;UACvBC,MAAM,EAAE;QACZ,CAAC;MAET,CAAC;MACDG,UAAU,EAAE,CACR;QACIX,SAAS,EAAEA,SAAS;QACpBY,IAAI,EAAE;MACV,CAAC,CACJ;MACDC,KAAK,EAAE;IACX,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module"}