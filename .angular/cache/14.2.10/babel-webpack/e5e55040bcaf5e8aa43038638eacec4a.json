{"ast":null,"code":"var ImpressionsCacheInMemory = /** @class */function () {\n  /**\n   *\n   * @param impressionsQueueSize number of queued impressions to call onFullQueueCb.\n   * Default value is 0, that means no maximum value, in case we want to avoid this being triggered.\n   */\n  function ImpressionsCacheInMemory(impressionsQueueSize) {\n    if (impressionsQueueSize === void 0) {\n      impressionsQueueSize = 0;\n    }\n    this.maxQueue = impressionsQueueSize;\n    this.queue = [];\n  }\n  ImpressionsCacheInMemory.prototype.setOnFullQueueCb = function (cb) {\n    this.onFullQueue = cb;\n  };\n  /**\n   * Store impressions in sequential order\n   */\n  ImpressionsCacheInMemory.prototype.track = function (data) {\n    var _a;\n    (_a = this.queue).push.apply(_a, data);\n    // Check if the cache queue is full and we need to flush it.\n    if (this.maxQueue > 0 && this.queue.length >= this.maxQueue && this.onFullQueue) {\n      this.onFullQueue();\n    }\n  };\n  /**\n   * Clear the data stored on the cache.\n   */\n  ImpressionsCacheInMemory.prototype.clear = function () {\n    this.queue = [];\n  };\n  /**\n   * Pop the collected data, used as payload for posting.\n   */\n  ImpressionsCacheInMemory.prototype.pop = function (toMerge) {\n    var data = this.queue;\n    this.clear();\n    return toMerge ? toMerge.concat(data) : data;\n  };\n  /**\n   * Check if the cache is empty.\n   */\n  ImpressionsCacheInMemory.prototype.isEmpty = function () {\n    return this.queue.length === 0;\n  };\n  return ImpressionsCacheInMemory;\n}();\nexport { ImpressionsCacheInMemory };","map":{"version":3,"names":["ImpressionsCacheInMemory","impressionsQueueSize","maxQueue","queue","prototype","setOnFullQueueCb","cb","onFullQueue","track","data","_a","push","apply","length","clear","pop","toMerge","concat","isEmpty"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/inMemory/ImpressionsCacheInMemory.js"],"sourcesContent":["var ImpressionsCacheInMemory = /** @class */ (function () {\n    /**\n     *\n     * @param impressionsQueueSize number of queued impressions to call onFullQueueCb.\n     * Default value is 0, that means no maximum value, in case we want to avoid this being triggered.\n     */\n    function ImpressionsCacheInMemory(impressionsQueueSize) {\n        if (impressionsQueueSize === void 0) { impressionsQueueSize = 0; }\n        this.maxQueue = impressionsQueueSize;\n        this.queue = [];\n    }\n    ImpressionsCacheInMemory.prototype.setOnFullQueueCb = function (cb) {\n        this.onFullQueue = cb;\n    };\n    /**\n     * Store impressions in sequential order\n     */\n    ImpressionsCacheInMemory.prototype.track = function (data) {\n        var _a;\n        (_a = this.queue).push.apply(_a, data);\n        // Check if the cache queue is full and we need to flush it.\n        if (this.maxQueue > 0 && this.queue.length >= this.maxQueue && this.onFullQueue) {\n            this.onFullQueue();\n        }\n    };\n    /**\n     * Clear the data stored on the cache.\n     */\n    ImpressionsCacheInMemory.prototype.clear = function () {\n        this.queue = [];\n    };\n    /**\n     * Pop the collected data, used as payload for posting.\n     */\n    ImpressionsCacheInMemory.prototype.pop = function (toMerge) {\n        var data = this.queue;\n        this.clear();\n        return toMerge ? toMerge.concat(data) : data;\n    };\n    /**\n     * Check if the cache is empty.\n     */\n    ImpressionsCacheInMemory.prototype.isEmpty = function () {\n        return this.queue.length === 0;\n    };\n    return ImpressionsCacheInMemory;\n}());\nexport { ImpressionsCacheInMemory };\n"],"mappings":"AAAA,IAAIA,wBAAwB,GAAG,aAAe,YAAY;EACtD;AACJ;AACA;AACA;AACA;EACI,SAASA,wBAAwB,CAACC,oBAAoB,EAAE;IACpD,IAAIA,oBAAoB,KAAK,KAAK,CAAC,EAAE;MAAEA,oBAAoB,GAAG,CAAC;IAAE;IACjE,IAAI,CAACC,QAAQ,GAAGD,oBAAoB;IACpC,IAAI,CAACE,KAAK,GAAG,EAAE;EACnB;EACAH,wBAAwB,CAACI,SAAS,CAACC,gBAAgB,GAAG,UAAUC,EAAE,EAAE;IAChE,IAAI,CAACC,WAAW,GAAGD,EAAE;EACzB,CAAC;EACD;AACJ;AACA;EACIN,wBAAwB,CAACI,SAAS,CAACI,KAAK,GAAG,UAAUC,IAAI,EAAE;IACvD,IAAIC,EAAE;IACN,CAACA,EAAE,GAAG,IAAI,CAACP,KAAK,EAAEQ,IAAI,CAACC,KAAK,CAACF,EAAE,EAAED,IAAI,CAAC;IACtC;IACA,IAAI,IAAI,CAACP,QAAQ,GAAG,CAAC,IAAI,IAAI,CAACC,KAAK,CAACU,MAAM,IAAI,IAAI,CAACX,QAAQ,IAAI,IAAI,CAACK,WAAW,EAAE;MAC7E,IAAI,CAACA,WAAW,EAAE;IACtB;EACJ,CAAC;EACD;AACJ;AACA;EACIP,wBAAwB,CAACI,SAAS,CAACU,KAAK,GAAG,YAAY;IACnD,IAAI,CAACX,KAAK,GAAG,EAAE;EACnB,CAAC;EACD;AACJ;AACA;EACIH,wBAAwB,CAACI,SAAS,CAACW,GAAG,GAAG,UAAUC,OAAO,EAAE;IACxD,IAAIP,IAAI,GAAG,IAAI,CAACN,KAAK;IACrB,IAAI,CAACW,KAAK,EAAE;IACZ,OAAOE,OAAO,GAAGA,OAAO,CAACC,MAAM,CAACR,IAAI,CAAC,GAAGA,IAAI;EAChD,CAAC;EACD;AACJ;AACA;EACIT,wBAAwB,CAACI,SAAS,CAACc,OAAO,GAAG,YAAY;IACrD,OAAO,IAAI,CAACf,KAAK,CAACU,MAAM,KAAK,CAAC;EAClC,CAAC;EACD,OAAOb,wBAAwB;AACnC,CAAC,EAAG;AACJ,SAASA,wBAAwB"},"metadata":{},"sourceType":"module"}