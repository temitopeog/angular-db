{"ast":null,"code":"import { objectAssign } from '../utils/lang/objectAssign';\nimport { thenable } from '../utils/promise/thenable';\nimport { find } from '../utils/lang';\nimport { validateSplit, validateSplitExistance, validateIfNotDestroyed, validateIfOperational } from '../utils/inputValidation';\nfunction collectTreatments(splitObject) {\n  var conditions = splitObject.conditions;\n  // Rollout conditions are supposed to have the entire partitions list, so we find the first one.\n  var allTreatmentsCondition = find(conditions, function (cond) {\n    return cond.conditionType === 'ROLLOUT';\n  });\n  // Localstorage mode could fall into a no rollout conditions state. Take the first condition in that case.\n  if (!allTreatmentsCondition) allTreatmentsCondition = conditions[0];\n  // Then extract the treatments from the partitions\n  return allTreatmentsCondition ? allTreatmentsCondition.partitions.map(function (v) {\n    return v.treatment;\n  }) : [];\n}\nfunction objectToView(json) {\n  var splitObject;\n  try {\n    // @ts-expect-error\n    splitObject = JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n  if (!splitObject) return null;\n  return {\n    name: splitObject.name,\n    trafficType: splitObject.trafficTypeName,\n    killed: splitObject.killed,\n    changeNumber: splitObject.changeNumber || 0,\n    treatments: collectTreatments(splitObject),\n    configs: splitObject.configurations || {}\n  };\n}\nfunction objectsToViews(jsons) {\n  var views = [];\n  jsons.forEach(function (split) {\n    var view = objectToView(split);\n    if (view) views.push(view);\n  });\n  return views;\n}\nexport function sdkManagerFactory(log, splits, _a) {\n  var readinessManager = _a.readinessManager,\n    sdkStatus = _a.sdkStatus;\n  var SPLIT_FN_LABEL = 'split';\n  return objectAssign(\n  // Proto-linkage of the readiness Event Emitter\n  Object.create(sdkStatus), {\n    /**\n     * Get the Split object corresponding to the given split name if valid\n     */\n    split: function (maybeSplitName) {\n      var splitName = validateSplit(log, maybeSplitName, SPLIT_FN_LABEL);\n      if (!validateIfNotDestroyed(log, readinessManager, SPLIT_FN_LABEL) || !validateIfOperational(log, readinessManager, SPLIT_FN_LABEL) || !splitName) {\n        return null;\n      }\n      var split = splits.getSplit(splitName);\n      if (thenable(split)) {\n        return split.catch(function () {\n          return null;\n        }).then(function (result) {\n          validateSplitExistance(log, readinessManager, splitName, result, SPLIT_FN_LABEL);\n          return objectToView(result);\n        });\n      }\n      validateSplitExistance(log, readinessManager, splitName, split, SPLIT_FN_LABEL);\n      return objectToView(split);\n    },\n    /**\n     * Get the Split objects present on the factory storage\n     */\n    splits: function () {\n      if (!validateIfNotDestroyed(log, readinessManager, 'splits') || !validateIfOperational(log, readinessManager, 'splits')) {\n        return [];\n      }\n      var currentSplits = splits.getAll();\n      return thenable(currentSplits) ? currentSplits.catch(function () {\n        return [];\n      }).then(objectsToViews) :\n      // handle possible rejections when using pluggable storage\n      objectsToViews(currentSplits);\n    },\n    /**\n     * Get the Split names present on the factory storage\n     */\n    names: function () {\n      if (!validateIfNotDestroyed(log, readinessManager, 'names') || !validateIfOperational(log, readinessManager, 'names')) {\n        return [];\n      }\n      var splitNames = splits.getSplitNames();\n      return thenable(splitNames) ? splitNames.catch(function () {\n        return [];\n      }) :\n      // handle possible rejections when using pluggable storage\n      splitNames;\n    }\n  });\n}","map":{"version":3,"names":["objectAssign","thenable","find","validateSplit","validateSplitExistance","validateIfNotDestroyed","validateIfOperational","collectTreatments","splitObject","conditions","allTreatmentsCondition","cond","conditionType","partitions","map","v","treatment","objectToView","json","JSON","parse","e","name","trafficType","trafficTypeName","killed","changeNumber","treatments","configs","configurations","objectsToViews","jsons","views","forEach","split","view","push","sdkManagerFactory","log","splits","_a","readinessManager","sdkStatus","SPLIT_FN_LABEL","Object","create","maybeSplitName","splitName","getSplit","catch","then","result","currentSplits","getAll","names","splitNames","getSplitNames"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sdkManager/index.js"],"sourcesContent":["import { objectAssign } from '../utils/lang/objectAssign';\nimport { thenable } from '../utils/promise/thenable';\nimport { find } from '../utils/lang';\nimport { validateSplit, validateSplitExistance, validateIfNotDestroyed, validateIfOperational } from '../utils/inputValidation';\nfunction collectTreatments(splitObject) {\n    var conditions = splitObject.conditions;\n    // Rollout conditions are supposed to have the entire partitions list, so we find the first one.\n    var allTreatmentsCondition = find(conditions, function (cond) { return cond.conditionType === 'ROLLOUT'; });\n    // Localstorage mode could fall into a no rollout conditions state. Take the first condition in that case.\n    if (!allTreatmentsCondition)\n        allTreatmentsCondition = conditions[0];\n    // Then extract the treatments from the partitions\n    return allTreatmentsCondition ? allTreatmentsCondition.partitions.map(function (v) { return v.treatment; }) : [];\n}\nfunction objectToView(json) {\n    var splitObject;\n    try {\n        // @ts-expect-error\n        splitObject = JSON.parse(json);\n    }\n    catch (e) {\n        return null;\n    }\n    if (!splitObject)\n        return null;\n    return {\n        name: splitObject.name,\n        trafficType: splitObject.trafficTypeName,\n        killed: splitObject.killed,\n        changeNumber: splitObject.changeNumber || 0,\n        treatments: collectTreatments(splitObject),\n        configs: splitObject.configurations || {}\n    };\n}\nfunction objectsToViews(jsons) {\n    var views = [];\n    jsons.forEach(function (split) {\n        var view = objectToView(split);\n        if (view)\n            views.push(view);\n    });\n    return views;\n}\nexport function sdkManagerFactory(log, splits, _a) {\n    var readinessManager = _a.readinessManager, sdkStatus = _a.sdkStatus;\n    var SPLIT_FN_LABEL = 'split';\n    return objectAssign(\n    // Proto-linkage of the readiness Event Emitter\n    Object.create(sdkStatus), {\n        /**\n         * Get the Split object corresponding to the given split name if valid\n         */\n        split: function (maybeSplitName) {\n            var splitName = validateSplit(log, maybeSplitName, SPLIT_FN_LABEL);\n            if (!validateIfNotDestroyed(log, readinessManager, SPLIT_FN_LABEL) || !validateIfOperational(log, readinessManager, SPLIT_FN_LABEL) || !splitName) {\n                return null;\n            }\n            var split = splits.getSplit(splitName);\n            if (thenable(split)) {\n                return split.catch(function () { return null; }).then(function (result) {\n                    validateSplitExistance(log, readinessManager, splitName, result, SPLIT_FN_LABEL);\n                    return objectToView(result);\n                });\n            }\n            validateSplitExistance(log, readinessManager, splitName, split, SPLIT_FN_LABEL);\n            return objectToView(split);\n        },\n        /**\n         * Get the Split objects present on the factory storage\n         */\n        splits: function () {\n            if (!validateIfNotDestroyed(log, readinessManager, 'splits') || !validateIfOperational(log, readinessManager, 'splits')) {\n                return [];\n            }\n            var currentSplits = splits.getAll();\n            return thenable(currentSplits) ?\n                currentSplits.catch(function () { return []; }).then(objectsToViews) : // handle possible rejections when using pluggable storage\n                objectsToViews(currentSplits);\n        },\n        /**\n         * Get the Split names present on the factory storage\n         */\n        names: function () {\n            if (!validateIfNotDestroyed(log, readinessManager, 'names') || !validateIfOperational(log, readinessManager, 'names')) {\n                return [];\n            }\n            var splitNames = splits.getSplitNames();\n            return thenable(splitNames) ?\n                splitNames.catch(function () { return []; }) : // handle possible rejections when using pluggable storage\n                splitNames;\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}