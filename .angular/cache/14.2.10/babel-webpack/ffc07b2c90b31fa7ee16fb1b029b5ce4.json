{"ast":null,"code":"import { forOwn } from '../../../utils/lang';\nimport { syncTaskFactory } from '../../syncTask';\nimport { CONTROL } from '../../../utils/constants';\nimport { SDK_SPLITS_ARRIVED, SDK_SEGMENTS_ARRIVED, SDK_SPLITS_CACHE_LOADED } from '../../../readiness/constants';\nimport { SYNC_OFFLINE_DATA, ERROR_SYNC_OFFLINE_LOADING } from '../../../logger/constants';\n/**\n * Offline equivalent of `splitChangesUpdaterFactory`\n */\nexport function fromObjectUpdaterFactory(splitsParser, storage, readiness, settings) {\n  var log = settings.log,\n    splitsCache = storage.splits;\n  var startingUp = true;\n  return function objectUpdater() {\n    var splits = [];\n    var loadError = null;\n    var splitsMock = {};\n    try {\n      splitsMock = splitsParser(settings);\n    } catch (err) {\n      loadError = err;\n      log.error(ERROR_SYNC_OFFLINE_LOADING, [err]);\n    }\n    if (!loadError && splitsMock) {\n      log.debug(SYNC_OFFLINE_DATA, [JSON.stringify(splitsMock)]);\n      forOwn(splitsMock, function (val, name) {\n        splits.push([name, JSON.stringify({\n          name: name,\n          status: 'ACTIVE',\n          killed: false,\n          trafficAllocation: 100,\n          defaultTreatment: CONTROL,\n          conditions: val.conditions || [],\n          configurations: val.configurations,\n          trafficTypeName: val.trafficTypeName\n        })]);\n      });\n      return Promise.all([splitsCache.clear(), splitsCache.addSplits(splits)]).then(function () {\n        readiness.splits.emit(SDK_SPLITS_ARRIVED);\n        if (startingUp) {\n          startingUp = false;\n          Promise.resolve(splitsCache.checkCache()).then(function (cacheReady) {\n            // Emits SDK_READY_FROM_CACHE\n            if (cacheReady) readiness.splits.emit(SDK_SPLITS_CACHE_LOADED);\n            // Emits SDK_READY\n            readiness.segments.emit(SDK_SEGMENTS_ARRIVED);\n          });\n        }\n        return true;\n      });\n    } else {\n      return Promise.resolve(true);\n    }\n  };\n}\n/**\n * PollingManager in Offline mode\n */\nexport function fromObjectSyncTaskFactory(splitsParser, storage, readiness, settings) {\n  return syncTaskFactory(settings.log, fromObjectUpdaterFactory(splitsParser, storage, readiness, settings), settings.scheduler.offlineRefreshRate, 'offlineUpdater');\n}","map":{"version":3,"names":["forOwn","syncTaskFactory","CONTROL","SDK_SPLITS_ARRIVED","SDK_SEGMENTS_ARRIVED","SDK_SPLITS_CACHE_LOADED","SYNC_OFFLINE_DATA","ERROR_SYNC_OFFLINE_LOADING","fromObjectUpdaterFactory","splitsParser","storage","readiness","settings","log","splitsCache","splits","startingUp","objectUpdater","loadError","splitsMock","err","error","debug","JSON","stringify","val","name","push","status","killed","trafficAllocation","defaultTreatment","conditions","configurations","trafficTypeName","Promise","all","clear","addSplits","then","emit","resolve","checkCache","cacheReady","segments","fromObjectSyncTaskFactory","scheduler","offlineRefreshRate"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/offline/syncTasks/fromObjectSyncTask.js"],"sourcesContent":["import { forOwn } from '../../../utils/lang';\nimport { syncTaskFactory } from '../../syncTask';\nimport { CONTROL } from '../../../utils/constants';\nimport { SDK_SPLITS_ARRIVED, SDK_SEGMENTS_ARRIVED, SDK_SPLITS_CACHE_LOADED } from '../../../readiness/constants';\nimport { SYNC_OFFLINE_DATA, ERROR_SYNC_OFFLINE_LOADING } from '../../../logger/constants';\n/**\n * Offline equivalent of `splitChangesUpdaterFactory`\n */\nexport function fromObjectUpdaterFactory(splitsParser, storage, readiness, settings) {\n    var log = settings.log, splitsCache = storage.splits;\n    var startingUp = true;\n    return function objectUpdater() {\n        var splits = [];\n        var loadError = null;\n        var splitsMock = {};\n        try {\n            splitsMock = splitsParser(settings);\n        }\n        catch (err) {\n            loadError = err;\n            log.error(ERROR_SYNC_OFFLINE_LOADING, [err]);\n        }\n        if (!loadError && splitsMock) {\n            log.debug(SYNC_OFFLINE_DATA, [JSON.stringify(splitsMock)]);\n            forOwn(splitsMock, function (val, name) {\n                splits.push([\n                    name,\n                    JSON.stringify({\n                        name: name,\n                        status: 'ACTIVE',\n                        killed: false,\n                        trafficAllocation: 100,\n                        defaultTreatment: CONTROL,\n                        conditions: val.conditions || [],\n                        configurations: val.configurations,\n                        trafficTypeName: val.trafficTypeName\n                    })\n                ]);\n            });\n            return Promise.all([\n                splitsCache.clear(),\n                splitsCache.addSplits(splits)\n            ]).then(function () {\n                readiness.splits.emit(SDK_SPLITS_ARRIVED);\n                if (startingUp) {\n                    startingUp = false;\n                    Promise.resolve(splitsCache.checkCache()).then(function (cacheReady) {\n                        // Emits SDK_READY_FROM_CACHE\n                        if (cacheReady)\n                            readiness.splits.emit(SDK_SPLITS_CACHE_LOADED);\n                        // Emits SDK_READY\n                        readiness.segments.emit(SDK_SEGMENTS_ARRIVED);\n                    });\n                }\n                return true;\n            });\n        }\n        else {\n            return Promise.resolve(true);\n        }\n    };\n}\n/**\n * PollingManager in Offline mode\n */\nexport function fromObjectSyncTaskFactory(splitsParser, storage, readiness, settings) {\n    return syncTaskFactory(settings.log, fromObjectUpdaterFactory(splitsParser, storage, readiness, settings), settings.scheduler.offlineRefreshRate, 'offlineUpdater');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}