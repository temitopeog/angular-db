{"ast":null,"code":"import { hash128 } from './murmur3_128';\n/**\n * Use instead of parseInt, to not lose precision when converting big integers (greater than 2^53 - 1)\n */\nfunction hex2dec(s) {\n  var i,\n    j,\n    digits = [0],\n    carry;\n  for (i = 0; i < s.length; i += 1) {\n    carry = parseInt(s.charAt(i), 16);\n    for (j = digits.length - 1; j >= 0; j -= 1) {\n      digits[j] = digits[j] * 16 + carry;\n      carry = digits[j] / 10 | 0;\n      digits[j] %= 10;\n    }\n    while (carry > 0) {\n      digits.unshift(carry % 10);\n      carry = carry / 10 | 0;\n    }\n  }\n  return digits.join('');\n}\n/**\n * Gets the higher 64 bits of the x64 version of Murmur3 for 128bits, as decimal and hexadecimal number strings.\n * Used for MySegments channel V2 notifications.\n * @param {string} str\n */\nexport function hash64(str) {\n  var hex = hash128(str).slice(0, 16);\n  return {\n    hex: hex,\n    dec: hex2dec(hex) // KeyList notification\n  };\n}","map":{"version":3,"names":["hash128","hex2dec","s","i","j","digits","carry","length","parseInt","charAt","unshift","join","hash64","str","hex","slice","dec"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/murmur3/murmur3_64.js"],"sourcesContent":["import { hash128 } from './murmur3_128';\n/**\n * Use instead of parseInt, to not lose precision when converting big integers (greater than 2^53 - 1)\n */\nfunction hex2dec(s) {\n    var i, j, digits = [0], carry;\n    for (i = 0; i < s.length; i += 1) {\n        carry = parseInt(s.charAt(i), 16);\n        for (j = digits.length - 1; j >= 0; j -= 1) {\n            digits[j] = digits[j] * 16 + carry;\n            carry = digits[j] / 10 | 0;\n            digits[j] %= 10;\n        }\n        while (carry > 0) {\n            digits.unshift(carry % 10);\n            carry = carry / 10 | 0;\n        }\n    }\n    return digits.join('');\n}\n/**\n * Gets the higher 64 bits of the x64 version of Murmur3 for 128bits, as decimal and hexadecimal number strings.\n * Used for MySegments channel V2 notifications.\n * @param {string} str\n */\nexport function hash64(str) {\n    var hex = hash128(str).slice(0, 16);\n    return {\n        hex: hex,\n        dec: hex2dec(hex) // KeyList notification\n    };\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC;AACA;AACA;AACA,SAASC,OAAO,CAACC,CAAC,EAAE;EAChB,IAAIC,CAAC;IAAEC,CAAC;IAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;IAAEC,KAAK;EAC7B,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,CAACK,MAAM,EAAEJ,CAAC,IAAI,CAAC,EAAE;IAC9BG,KAAK,GAAGE,QAAQ,CAACN,CAAC,CAACO,MAAM,CAACN,CAAC,CAAC,EAAE,EAAE,CAAC;IACjC,KAAKC,CAAC,GAAGC,MAAM,CAACE,MAAM,GAAG,CAAC,EAAEH,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MACxCC,MAAM,CAACD,CAAC,CAAC,GAAGC,MAAM,CAACD,CAAC,CAAC,GAAG,EAAE,GAAGE,KAAK;MAClCA,KAAK,GAAGD,MAAM,CAACD,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;MAC1BC,MAAM,CAACD,CAAC,CAAC,IAAI,EAAE;IACnB;IACA,OAAOE,KAAK,GAAG,CAAC,EAAE;MACdD,MAAM,CAACK,OAAO,CAACJ,KAAK,GAAG,EAAE,CAAC;MAC1BA,KAAK,GAAGA,KAAK,GAAG,EAAE,GAAG,CAAC;IAC1B;EACJ;EACA,OAAOD,MAAM,CAACM,IAAI,CAAC,EAAE,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAM,CAACC,GAAG,EAAE;EACxB,IAAIC,GAAG,GAAGd,OAAO,CAACa,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACnC,OAAO;IACHD,GAAG,EAAEA,GAAG;IACRE,GAAG,EAAEf,OAAO,CAACa,GAAG,CAAC,CAAC;EACtB,CAAC;AACL"},"metadata":{},"sourceType":"module"}