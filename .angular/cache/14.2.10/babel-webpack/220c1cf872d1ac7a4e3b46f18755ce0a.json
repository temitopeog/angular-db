{"ast":null,"code":"import { isObject, isString, isFiniteNumber } from '../lang';\nimport { validateSplit } from './split';\nfunction validateTimestampData(log, maybeTimestamp, method, item) {\n  if (isFiniteNumber(maybeTimestamp) && maybeTimestamp > -1) return true;\n  log.error(method + \": preloadedData.\" + item + \" must be a positive number.\");\n  return false;\n}\nfunction validateSplitsData(log, maybeSplitsData, method) {\n  if (isObject(maybeSplitsData)) {\n    var splitNames = Object.keys(maybeSplitsData);\n    if (splitNames.length === 0) log.warn(method + \": preloadedData.splitsData doesn't contain split definitions.\");\n    // @TODO in the future, consider handling the possibility of having parsed definitions of splits\n    if (splitNames.every(function (splitName) {\n      return validateSplit(log, splitName, method) && isString(maybeSplitsData[splitName]);\n    })) return true;\n  }\n  log.error(method + \": preloadedData.splitsData must be a map of split names to their serialized definitions.\");\n  return false;\n}\nfunction validateMySegmentsData(log, maybeMySegmentsData, method) {\n  if (isObject(maybeMySegmentsData)) {\n    var userKeys = Object.keys(maybeMySegmentsData);\n    if (userKeys.every(function (userKey) {\n      var segmentNames = maybeMySegmentsData[userKey];\n      // an empty list is valid\n      return Array.isArray(segmentNames) && segmentNames.every(function (segmentName) {\n        return isString(segmentName);\n      });\n    })) return true;\n  }\n  log.error(method + \": preloadedData.mySegmentsData must be a map of user keys to their list of segment names.\");\n  return false;\n}\nfunction validateSegmentsData(log, maybeSegmentsData, method) {\n  if (isObject(maybeSegmentsData)) {\n    var segmentNames = Object.keys(maybeSegmentsData);\n    if (segmentNames.every(function (segmentName) {\n      return isString(maybeSegmentsData[segmentName]);\n    })) return true;\n  }\n  log.error(method + \": preloadedData.segmentsData must be a map of segment names to their serialized definitions.\");\n  return false;\n}\nexport function validatePreloadedData(log, maybePreloadedData, method) {\n  if (!isObject(maybePreloadedData)) {\n    log.error(method + \": preloadedData must be an object.\");\n  } else if (validateTimestampData(log, maybePreloadedData.lastUpdated, method, 'lastUpdated') && validateTimestampData(log, maybePreloadedData.since, method, 'since') && validateSplitsData(log, maybePreloadedData.splitsData, method) && (!maybePreloadedData.mySegmentsData || validateMySegmentsData(log, maybePreloadedData.mySegmentsData, method)) && (!maybePreloadedData.segmentsData || validateSegmentsData(log, maybePreloadedData.segmentsData, method))) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["isObject","isString","isFiniteNumber","validateSplit","validateTimestampData","log","maybeTimestamp","method","item","error","validateSplitsData","maybeSplitsData","splitNames","Object","keys","length","warn","every","splitName","validateMySegmentsData","maybeMySegmentsData","userKeys","userKey","segmentNames","Array","isArray","segmentName","validateSegmentsData","maybeSegmentsData","validatePreloadedData","maybePreloadedData","lastUpdated","since","splitsData","mySegmentsData","segmentsData"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/inputValidation/preloadedData.js"],"sourcesContent":["import { isObject, isString, isFiniteNumber } from '../lang';\nimport { validateSplit } from './split';\nfunction validateTimestampData(log, maybeTimestamp, method, item) {\n    if (isFiniteNumber(maybeTimestamp) && maybeTimestamp > -1)\n        return true;\n    log.error(method + \": preloadedData.\" + item + \" must be a positive number.\");\n    return false;\n}\nfunction validateSplitsData(log, maybeSplitsData, method) {\n    if (isObject(maybeSplitsData)) {\n        var splitNames = Object.keys(maybeSplitsData);\n        if (splitNames.length === 0)\n            log.warn(method + \": preloadedData.splitsData doesn't contain split definitions.\");\n        // @TODO in the future, consider handling the possibility of having parsed definitions of splits\n        if (splitNames.every(function (splitName) { return validateSplit(log, splitName, method) && isString(maybeSplitsData[splitName]); }))\n            return true;\n    }\n    log.error(method + \": preloadedData.splitsData must be a map of split names to their serialized definitions.\");\n    return false;\n}\nfunction validateMySegmentsData(log, maybeMySegmentsData, method) {\n    if (isObject(maybeMySegmentsData)) {\n        var userKeys = Object.keys(maybeMySegmentsData);\n        if (userKeys.every(function (userKey) {\n            var segmentNames = maybeMySegmentsData[userKey];\n            // an empty list is valid\n            return Array.isArray(segmentNames) && segmentNames.every(function (segmentName) { return isString(segmentName); });\n        }))\n            return true;\n    }\n    log.error(method + \": preloadedData.mySegmentsData must be a map of user keys to their list of segment names.\");\n    return false;\n}\nfunction validateSegmentsData(log, maybeSegmentsData, method) {\n    if (isObject(maybeSegmentsData)) {\n        var segmentNames = Object.keys(maybeSegmentsData);\n        if (segmentNames.every(function (segmentName) { return isString(maybeSegmentsData[segmentName]); }))\n            return true;\n    }\n    log.error(method + \": preloadedData.segmentsData must be a map of segment names to their serialized definitions.\");\n    return false;\n}\nexport function validatePreloadedData(log, maybePreloadedData, method) {\n    if (!isObject(maybePreloadedData)) {\n        log.error(method + \": preloadedData must be an object.\");\n    }\n    else if (validateTimestampData(log, maybePreloadedData.lastUpdated, method, 'lastUpdated') &&\n        validateTimestampData(log, maybePreloadedData.since, method, 'since') &&\n        validateSplitsData(log, maybePreloadedData.splitsData, method) &&\n        (!maybePreloadedData.mySegmentsData || validateMySegmentsData(log, maybePreloadedData.mySegmentsData, method)) &&\n        (!maybePreloadedData.segmentsData || validateSegmentsData(log, maybePreloadedData.segmentsData, method))) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}