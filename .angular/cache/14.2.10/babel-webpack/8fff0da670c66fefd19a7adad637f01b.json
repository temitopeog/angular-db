{"ast":null,"code":"import { LOG_PREFIX } from './constants';\nexport var METHODS_TO_PROMISE_WRAP = ['get', 'set', 'getAndSet', 'del', 'getKeysByPrefix', 'incr', 'decr', 'getMany', 'pushItems', 'popItems', 'getItemsCount', 'itemContains', 'addItems', 'removeItems', 'getItems', 'connect', 'disconnect'];\n/**\n * Adapter of the Pluggable Storage Wrapper.\n * Used to handle exceptions as rejected promises, in order to simplify the error handling on storages.\n *\n * @param log logger instance\n * @param wrapper storage wrapper to adapt\n * @returns an adapted version of the given storage wrapper\n */\nexport function wrapperAdapter(log, wrapper) {\n  var wrapperAdapter = {};\n  METHODS_TO_PROMISE_WRAP.forEach(function (method) {\n    // Logs error and wraps it into a rejected promise.\n    function handleError(e) {\n      log.error(LOG_PREFIX + \" Wrapper '\" + method + \"' operation threw an error. Message: \" + e);\n      return Promise.reject(e);\n    }\n    wrapperAdapter[method] = function () {\n      try {\n        // @ts-ignore\n        return wrapper[method].apply(wrapper, arguments).then(function (value) {\n          return value;\n        }).catch(handleError);\n      } catch (e) {\n        return handleError(e);\n      }\n    };\n  });\n  // @ts-ignore\n  return wrapperAdapter;\n}","map":{"version":3,"names":["LOG_PREFIX","METHODS_TO_PROMISE_WRAP","wrapperAdapter","log","wrapper","forEach","method","handleError","e","error","Promise","reject","apply","arguments","then","value","catch"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/pluggable/wrapperAdapter.js"],"sourcesContent":["import { LOG_PREFIX } from './constants';\nexport var METHODS_TO_PROMISE_WRAP = [\n    'get',\n    'set',\n    'getAndSet',\n    'del',\n    'getKeysByPrefix',\n    'incr',\n    'decr',\n    'getMany',\n    'pushItems',\n    'popItems',\n    'getItemsCount',\n    'itemContains',\n    'addItems',\n    'removeItems',\n    'getItems',\n    'connect',\n    'disconnect'\n];\n/**\n * Adapter of the Pluggable Storage Wrapper.\n * Used to handle exceptions as rejected promises, in order to simplify the error handling on storages.\n *\n * @param log logger instance\n * @param wrapper storage wrapper to adapt\n * @returns an adapted version of the given storage wrapper\n */\nexport function wrapperAdapter(log, wrapper) {\n    var wrapperAdapter = {};\n    METHODS_TO_PROMISE_WRAP.forEach(function (method) {\n        // Logs error and wraps it into a rejected promise.\n        function handleError(e) {\n            log.error(LOG_PREFIX + \" Wrapper '\" + method + \"' operation threw an error. Message: \" + e);\n            return Promise.reject(e);\n        }\n        wrapperAdapter[method] = function () {\n            try {\n                // @ts-ignore\n                return wrapper[method].apply(wrapper, arguments).then(function (value) { return value; }).catch(handleError);\n            }\n            catch (e) {\n                return handleError(e);\n            }\n        };\n    });\n    // @ts-ignore\n    return wrapperAdapter;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AACxC,OAAO,IAAIC,uBAAuB,GAAG,CACjC,KAAK,EACL,KAAK,EACL,WAAW,EACX,KAAK,EACL,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,SAAS,EACT,WAAW,EACX,UAAU,EACV,eAAe,EACf,cAAc,EACd,UAAU,EACV,aAAa,EACb,UAAU,EACV,SAAS,EACT,YAAY,CACf;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,GAAG,EAAEC,OAAO,EAAE;EACzC,IAAIF,cAAc,GAAG,CAAC,CAAC;EACvBD,uBAAuB,CAACI,OAAO,CAAC,UAAUC,MAAM,EAAE;IAC9C;IACA,SAASC,WAAW,CAACC,CAAC,EAAE;MACpBL,GAAG,CAACM,KAAK,CAACT,UAAU,GAAG,YAAY,GAAGM,MAAM,GAAG,uCAAuC,GAAGE,CAAC,CAAC;MAC3F,OAAOE,OAAO,CAACC,MAAM,CAACH,CAAC,CAAC;IAC5B;IACAN,cAAc,CAACI,MAAM,CAAC,GAAG,YAAY;MACjC,IAAI;QACA;QACA,OAAOF,OAAO,CAACE,MAAM,CAAC,CAACM,KAAK,CAACR,OAAO,EAAES,SAAS,CAAC,CAACC,IAAI,CAAC,UAAUC,KAAK,EAAE;UAAE,OAAOA,KAAK;QAAE,CAAC,CAAC,CAACC,KAAK,CAACT,WAAW,CAAC;MAChH,CAAC,CACD,OAAOC,CAAC,EAAE;QACN,OAAOD,WAAW,CAACC,CAAC,CAAC;MACzB;IACJ,CAAC;EACL,CAAC,CAAC;EACF;EACA,OAAON,cAAc;AACzB"},"metadata":{},"sourceType":"module"}