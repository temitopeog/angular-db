{"ast":null,"code":"import { isObject, forOwn } from '../../../utils/lang';\nimport { parseCondition } from './parseCondition';\nfunction hasTreatmentChanged(prev, curr) {\n  if (typeof prev !== typeof curr) return true;\n  if (typeof prev === 'string') {\n    // strings treatments, just compare\n    return prev !== curr;\n  } else {\n    // has treatment and config, compare both\n    return prev.treatment !== curr.treatment || prev.config !== curr.config;\n  }\n}\nexport function splitsParserFromSettingsFactory() {\n  var previousMock = {\n    'emptyMock': '1'\n  };\n  function mockUpdated(currentData) {\n    var names = Object.keys(currentData);\n    // Different amount of items\n    if (names.length !== Object.keys(previousMock).length) {\n      previousMock = currentData;\n      return true;\n    }\n    return names.some(function (name) {\n      var newSplit = !previousMock[name];\n      var newTreatment = hasTreatmentChanged(previousMock[name], currentData[name]);\n      var changed = newSplit || newTreatment;\n      if (changed) previousMock = currentData;\n      return changed;\n    });\n  }\n  /**\n   *\n   * @param settings validated object with mocked features mapping.\n   */\n  return function splitsParserFromSettings(settings) {\n    var features = settings.features || {};\n    if (!mockUpdated(features)) return false;\n    var splitObjects = {};\n    forOwn(features, function (data, splitName) {\n      var treatment = data;\n      var config = null;\n      if (isObject(data)) {\n        treatment = data.treatment;\n        config = data.config || config;\n      }\n      var configurations = {};\n      if (config !== null) configurations[treatment] = config;\n      splitObjects[splitName] = {\n        trafficTypeName: 'localhost',\n        conditions: [parseCondition({\n          treatment: treatment\n        })],\n        configurations: configurations\n      };\n    });\n    return splitObjects;\n  };\n}","map":{"version":3,"names":["isObject","forOwn","parseCondition","hasTreatmentChanged","prev","curr","treatment","config","splitsParserFromSettingsFactory","previousMock","mockUpdated","currentData","names","Object","keys","length","some","name","newSplit","newTreatment","changed","splitsParserFromSettings","settings","features","splitObjects","data","splitName","configurations","trafficTypeName","conditions"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/offline/splitsParser/splitsParserFromSettings.js"],"sourcesContent":["import { isObject, forOwn } from '../../../utils/lang';\nimport { parseCondition } from './parseCondition';\nfunction hasTreatmentChanged(prev, curr) {\n    if (typeof prev !== typeof curr)\n        return true;\n    if (typeof prev === 'string') { // strings treatments, just compare\n        return prev !== curr;\n    }\n    else { // has treatment and config, compare both\n        return prev.treatment !== curr.treatment || prev.config !== curr.config;\n    }\n}\nexport function splitsParserFromSettingsFactory() {\n    var previousMock = { 'emptyMock': '1' };\n    function mockUpdated(currentData) {\n        var names = Object.keys(currentData);\n        // Different amount of items\n        if (names.length !== Object.keys(previousMock).length) {\n            previousMock = currentData;\n            return true;\n        }\n        return names.some(function (name) {\n            var newSplit = !previousMock[name];\n            var newTreatment = hasTreatmentChanged(previousMock[name], currentData[name]);\n            var changed = newSplit || newTreatment;\n            if (changed)\n                previousMock = currentData;\n            return changed;\n        });\n    }\n    /**\n     *\n     * @param settings validated object with mocked features mapping.\n     */\n    return function splitsParserFromSettings(settings) {\n        var features = settings.features || {};\n        if (!mockUpdated(features))\n            return false;\n        var splitObjects = {};\n        forOwn(features, function (data, splitName) {\n            var treatment = data;\n            var config = null;\n            if (isObject(data)) {\n                treatment = data.treatment;\n                config = data.config || config;\n            }\n            var configurations = {};\n            if (config !== null)\n                configurations[treatment] = config;\n            splitObjects[splitName] = {\n                trafficTypeName: 'localhost',\n                conditions: [parseCondition({ treatment: treatment })],\n                configurations: configurations\n            };\n        });\n        return splitObjects;\n    };\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,qBAAqB;AACtD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,mBAAmB,CAACC,IAAI,EAAEC,IAAI,EAAE;EACrC,IAAI,OAAOD,IAAI,KAAK,OAAOC,IAAI,EAC3B,OAAO,IAAI;EACf,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAAE;IAC5B,OAAOA,IAAI,KAAKC,IAAI;EACxB,CAAC,MACI;IAAE;IACH,OAAOD,IAAI,CAACE,SAAS,KAAKD,IAAI,CAACC,SAAS,IAAIF,IAAI,CAACG,MAAM,KAAKF,IAAI,CAACE,MAAM;EAC3E;AACJ;AACA,OAAO,SAASC,+BAA+B,GAAG;EAC9C,IAAIC,YAAY,GAAG;IAAE,WAAW,EAAE;EAAI,CAAC;EACvC,SAASC,WAAW,CAACC,WAAW,EAAE;IAC9B,IAAIC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC;IACpC;IACA,IAAIC,KAAK,CAACG,MAAM,KAAKF,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC,CAACM,MAAM,EAAE;MACnDN,YAAY,GAAGE,WAAW;MAC1B,OAAO,IAAI;IACf;IACA,OAAOC,KAAK,CAACI,IAAI,CAAC,UAAUC,IAAI,EAAE;MAC9B,IAAIC,QAAQ,GAAG,CAACT,YAAY,CAACQ,IAAI,CAAC;MAClC,IAAIE,YAAY,GAAGhB,mBAAmB,CAACM,YAAY,CAACQ,IAAI,CAAC,EAAEN,WAAW,CAACM,IAAI,CAAC,CAAC;MAC7E,IAAIG,OAAO,GAAGF,QAAQ,IAAIC,YAAY;MACtC,IAAIC,OAAO,EACPX,YAAY,GAAGE,WAAW;MAC9B,OAAOS,OAAO;IAClB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI,OAAO,SAASC,wBAAwB,CAACC,QAAQ,EAAE;IAC/C,IAAIC,QAAQ,GAAGD,QAAQ,CAACC,QAAQ,IAAI,CAAC,CAAC;IACtC,IAAI,CAACb,WAAW,CAACa,QAAQ,CAAC,EACtB,OAAO,KAAK;IAChB,IAAIC,YAAY,GAAG,CAAC,CAAC;IACrBvB,MAAM,CAACsB,QAAQ,EAAE,UAAUE,IAAI,EAAEC,SAAS,EAAE;MACxC,IAAIpB,SAAS,GAAGmB,IAAI;MACpB,IAAIlB,MAAM,GAAG,IAAI;MACjB,IAAIP,QAAQ,CAACyB,IAAI,CAAC,EAAE;QAChBnB,SAAS,GAAGmB,IAAI,CAACnB,SAAS;QAC1BC,MAAM,GAAGkB,IAAI,CAAClB,MAAM,IAAIA,MAAM;MAClC;MACA,IAAIoB,cAAc,GAAG,CAAC,CAAC;MACvB,IAAIpB,MAAM,KAAK,IAAI,EACfoB,cAAc,CAACrB,SAAS,CAAC,GAAGC,MAAM;MACtCiB,YAAY,CAACE,SAAS,CAAC,GAAG;QACtBE,eAAe,EAAE,WAAW;QAC5BC,UAAU,EAAE,CAAC3B,cAAc,CAAC;UAAEI,SAAS,EAAEA;QAAU,CAAC,CAAC,CAAC;QACtDqB,cAAc,EAAEA;MACpB,CAAC;IACL,CAAC,CAAC;IACF,OAAOH,YAAY;EACvB,CAAC;AACL"},"metadata":{},"sourceType":"module"}