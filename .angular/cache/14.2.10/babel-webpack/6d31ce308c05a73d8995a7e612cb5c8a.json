{"ast":null,"code":"import { eventsSubmitterFactory } from './eventsSubmitter';\nimport { impressionsSubmitterFactory } from './impressionsSubmitter';\nimport { impressionCountsSubmitterFactory } from './impressionCountsSubmitter';\nimport { telemetrySubmitterFactory } from './telemetrySubmitter';\nexport function submitterManagerFactory(params) {\n  var submitters = [impressionsSubmitterFactory(params), eventsSubmitterFactory(params)];\n  var impressionCountsSubmitter = impressionCountsSubmitterFactory(params);\n  if (impressionCountsSubmitter) submitters.push(impressionCountsSubmitter);\n  var telemetrySubmitter = telemetrySubmitterFactory(params);\n  return {\n    // `onlyTelemetry` true if SDK is created with userConsent not GRANTED\n    start: function (onlyTelemetry) {\n      if (!onlyTelemetry) submitters.forEach(function (submitter) {\n        return submitter.start();\n      });\n      if (telemetrySubmitter) telemetrySubmitter.start();\n    },\n    // `allExceptTelemetry` true if userConsent is changed to DECLINED\n    stop: function (allExceptTelemetry) {\n      submitters.forEach(function (submitter) {\n        return submitter.stop();\n      });\n      if (!allExceptTelemetry && telemetrySubmitter) telemetrySubmitter.stop();\n    },\n    isRunning: function () {\n      return submitters.some(function (submitter) {\n        return submitter.isRunning();\n      });\n    },\n    // Flush data. Called with `onlyTelemetry` true if SDK is destroyed with userConsent not GRANTED\n    execute: function (onlyTelemetry) {\n      var promises = onlyTelemetry ? [] : submitters.map(function (submitter) {\n        return submitter.execute();\n      });\n      if (telemetrySubmitter) promises.push(telemetrySubmitter.execute());\n      return Promise.all(promises);\n    },\n    isExecuting: function () {\n      return submitters.some(function (submitter) {\n        return submitter.isExecuting();\n      });\n    }\n  };\n}","map":{"version":3,"names":["eventsSubmitterFactory","impressionsSubmitterFactory","impressionCountsSubmitterFactory","telemetrySubmitterFactory","submitterManagerFactory","params","submitters","impressionCountsSubmitter","push","telemetrySubmitter","start","onlyTelemetry","forEach","submitter","stop","allExceptTelemetry","isRunning","some","execute","promises","map","Promise","all","isExecuting"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/sync/submitters/submitterManager.js"],"sourcesContent":["import { eventsSubmitterFactory } from './eventsSubmitter';\nimport { impressionsSubmitterFactory } from './impressionsSubmitter';\nimport { impressionCountsSubmitterFactory } from './impressionCountsSubmitter';\nimport { telemetrySubmitterFactory } from './telemetrySubmitter';\nexport function submitterManagerFactory(params) {\n    var submitters = [\n        impressionsSubmitterFactory(params),\n        eventsSubmitterFactory(params)\n    ];\n    var impressionCountsSubmitter = impressionCountsSubmitterFactory(params);\n    if (impressionCountsSubmitter)\n        submitters.push(impressionCountsSubmitter);\n    var telemetrySubmitter = telemetrySubmitterFactory(params);\n    return {\n        // `onlyTelemetry` true if SDK is created with userConsent not GRANTED\n        start: function (onlyTelemetry) {\n            if (!onlyTelemetry)\n                submitters.forEach(function (submitter) { return submitter.start(); });\n            if (telemetrySubmitter)\n                telemetrySubmitter.start();\n        },\n        // `allExceptTelemetry` true if userConsent is changed to DECLINED\n        stop: function (allExceptTelemetry) {\n            submitters.forEach(function (submitter) { return submitter.stop(); });\n            if (!allExceptTelemetry && telemetrySubmitter)\n                telemetrySubmitter.stop();\n        },\n        isRunning: function () {\n            return submitters.some(function (submitter) { return submitter.isRunning(); });\n        },\n        // Flush data. Called with `onlyTelemetry` true if SDK is destroyed with userConsent not GRANTED\n        execute: function (onlyTelemetry) {\n            var promises = onlyTelemetry ? [] : submitters.map(function (submitter) { return submitter.execute(); });\n            if (telemetrySubmitter)\n                promises.push(telemetrySubmitter.execute());\n            return Promise.all(promises);\n        },\n        isExecuting: function () {\n            return submitters.some(function (submitter) { return submitter.isExecuting(); });\n        }\n    };\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,mBAAmB;AAC1D,SAASC,2BAA2B,QAAQ,wBAAwB;AACpE,SAASC,gCAAgC,QAAQ,6BAA6B;AAC9E,SAASC,yBAAyB,QAAQ,sBAAsB;AAChE,OAAO,SAASC,uBAAuB,CAACC,MAAM,EAAE;EAC5C,IAAIC,UAAU,GAAG,CACbL,2BAA2B,CAACI,MAAM,CAAC,EACnCL,sBAAsB,CAACK,MAAM,CAAC,CACjC;EACD,IAAIE,yBAAyB,GAAGL,gCAAgC,CAACG,MAAM,CAAC;EACxE,IAAIE,yBAAyB,EACzBD,UAAU,CAACE,IAAI,CAACD,yBAAyB,CAAC;EAC9C,IAAIE,kBAAkB,GAAGN,yBAAyB,CAACE,MAAM,CAAC;EAC1D,OAAO;IACH;IACAK,KAAK,EAAE,UAAUC,aAAa,EAAE;MAC5B,IAAI,CAACA,aAAa,EACdL,UAAU,CAACM,OAAO,CAAC,UAAUC,SAAS,EAAE;QAAE,OAAOA,SAAS,CAACH,KAAK,EAAE;MAAE,CAAC,CAAC;MAC1E,IAAID,kBAAkB,EAClBA,kBAAkB,CAACC,KAAK,EAAE;IAClC,CAAC;IACD;IACAI,IAAI,EAAE,UAAUC,kBAAkB,EAAE;MAChCT,UAAU,CAACM,OAAO,CAAC,UAAUC,SAAS,EAAE;QAAE,OAAOA,SAAS,CAACC,IAAI,EAAE;MAAE,CAAC,CAAC;MACrE,IAAI,CAACC,kBAAkB,IAAIN,kBAAkB,EACzCA,kBAAkB,CAACK,IAAI,EAAE;IACjC,CAAC;IACDE,SAAS,EAAE,YAAY;MACnB,OAAOV,UAAU,CAACW,IAAI,CAAC,UAAUJ,SAAS,EAAE;QAAE,OAAOA,SAAS,CAACG,SAAS,EAAE;MAAE,CAAC,CAAC;IAClF,CAAC;IACD;IACAE,OAAO,EAAE,UAAUP,aAAa,EAAE;MAC9B,IAAIQ,QAAQ,GAAGR,aAAa,GAAG,EAAE,GAAGL,UAAU,CAACc,GAAG,CAAC,UAAUP,SAAS,EAAE;QAAE,OAAOA,SAAS,CAACK,OAAO,EAAE;MAAE,CAAC,CAAC;MACxG,IAAIT,kBAAkB,EAClBU,QAAQ,CAACX,IAAI,CAACC,kBAAkB,CAACS,OAAO,EAAE,CAAC;MAC/C,OAAOG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IAChC,CAAC;IACDI,WAAW,EAAE,YAAY;MACrB,OAAOjB,UAAU,CAACW,IAAI,CAAC,UAAUJ,SAAS,EAAE;QAAE,OAAOA,SAAS,CAACU,WAAW,EAAE;MAAE,CAAC,CAAC;IACpF;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module"}