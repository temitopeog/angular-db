{"ast":null,"code":"/**\n * Base64 utils in pure JS, for browser, node and others which don't provide globals `btoa` and `atob`.\n * Implementation based on davidchambers/Base64 (https://github.com/davidchambers/Base64.js).\n\n   Copyright 2019 David Chambers\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n/**\n * Decode a given string value in Base64 format\n *\n * @param {string} input value to decode\n */\nexport function decodeFromBase64(input) {\n  var str = String(input).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=\n  if (str.length % 4 === 1) {\n    throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  var output = '';\n  for (\n  // initialize result and counters\n  var bc = 0, bs = void 0, buffer = void 0, idx = 0;\n  // get next character\n  buffer = str.charAt(idx++);\n  // eslint-disable-line no-cond-assign\n\n  // character found in table? initialize bit storage and add its ascii value;\n  // @ts-ignore\n  ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n/**\n * Encode a given string value to Base64 format.\n *\n * @param {string} input value to encode\n */\nexport function encodeToBase64(input) {\n  var str = String(input);\n  var output = '';\n  for (\n  // initialize result and counter\n  var block = void 0, charCode = void 0, idx = 0, map = chars;\n  // if the next str index does not exist:\n  //   change the mapping table to \"=\"\n  //   check if d has no fractional digits\n  str.charAt(idx | 0) || (map = '=', idx % 1);\n  // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n    // @ts-ignore\n    block = block << 8 | charCode;\n  }\n  return output;\n}","map":{"version":3,"names":["chars","decodeFromBase64","input","str","String","replace","length","Error","output","bc","bs","buffer","idx","charAt","fromCharCode","indexOf","encodeToBase64","block","charCode","map","charCodeAt"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/base64/index.js"],"sourcesContent":["/**\n * Base64 utils in pure JS, for browser, node and others which don't provide globals `btoa` and `atob`.\n * Implementation based on davidchambers/Base64 (https://github.com/davidchambers/Base64.js).\n\n   Copyright 2019 David Chambers\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n/**\n * Decode a given string value in Base64 format\n *\n * @param {string} input value to decode\n */\nexport function decodeFromBase64(input) {\n    var str = (String(input)).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=\n    if (str.length % 4 === 1) {\n        throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    var output = '';\n    for (\n    // initialize result and counters\n    var bc = 0, bs = void 0, buffer = void 0, idx = 0; \n    // get next character\n    buffer = str.charAt(idx++); // eslint-disable-line no-cond-assign\n     \n    // character found in table? initialize bit storage and add its ascii value;\n    // @ts-ignore\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n/**\n * Encode a given string value to Base64 format.\n *\n * @param {string} input value to encode\n */\nexport function encodeToBase64(input) {\n    var str = String(input);\n    var output = '';\n    for (\n    // initialize result and counter\n    var block = void 0, charCode = void 0, idx = 0, map = chars; \n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1); \n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n        charCode = str.charCodeAt(idx += 3 / 4);\n        if (charCode > 0xFF) {\n            throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n        }\n        // @ts-ignore\n        block = block << 8 | charCode;\n    }\n    return output;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAG,mEAAmE;AAC/E;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAACC,KAAK,EAAE;EACpC,IAAIC,GAAG,GAAIC,MAAM,CAACF,KAAK,CAAC,CAAEG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;EAChD,IAAIF,GAAG,CAACG,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACxF;EACA,IAAIC,MAAM,GAAG,EAAE;EACf;EACA;EACA,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,KAAK,CAAC,EAAEC,MAAM,GAAG,KAAK,CAAC,EAAEC,GAAG,GAAG,CAAC;EACjD;EACAD,MAAM,GAAGR,GAAG,CAACU,MAAM,CAACD,GAAG,EAAE,CAAC;EAAE;;EAE5B;EACA;EACA,CAACD,MAAM,KAAKD,EAAE,GAAGD,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAG,EAAE,GAAGC,MAAM,GAAGA,MAAM,EAAEF,EAAE,EAAE,GAAG,CAAC,CAAC,GAAGD,MAAM,IAAIJ,MAAM,CAACU,YAAY,CAAC,GAAG,GAAGJ,EAAE,KAAK,CAAC,CAAC,GAAGD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;IAC3H;IACAE,MAAM,GAAGX,KAAK,CAACe,OAAO,CAACJ,MAAM,CAAC;EAClC;EACA,OAAOH,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,cAAc,CAACd,KAAK,EAAE;EAClC,IAAIC,GAAG,GAAGC,MAAM,CAACF,KAAK,CAAC;EACvB,IAAIM,MAAM,GAAG,EAAE;EACf;EACA;EACA,IAAIS,KAAK,GAAG,KAAK,CAAC,EAAEC,QAAQ,GAAG,KAAK,CAAC,EAAEN,GAAG,GAAG,CAAC,EAAEO,GAAG,GAAGnB,KAAK;EAC3D;EACA;EACA;EACAG,GAAG,CAACU,MAAM,CAACD,GAAG,GAAG,CAAC,CAAC,KAAKO,GAAG,GAAG,GAAG,EAAEP,GAAG,GAAG,CAAC,CAAC;EAC3C;EACAJ,MAAM,IAAIW,GAAG,CAACN,MAAM,CAAC,EAAE,GAAGI,KAAK,IAAI,CAAC,GAAGL,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;IACjDM,QAAQ,GAAGf,GAAG,CAACiB,UAAU,CAACR,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACvC,IAAIM,QAAQ,GAAG,IAAI,EAAE;MACjB,MAAM,IAAIX,KAAK,CAAC,0FAA0F,CAAC;IAC/G;IACA;IACAU,KAAK,GAAGA,KAAK,IAAI,CAAC,GAAGC,QAAQ;EACjC;EACA,OAAOV,MAAM;AACjB"},"metadata":{},"sourceType":"module"}