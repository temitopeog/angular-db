{"ast":null,"code":"import { stringSource, stringDestination, encodeUTF16toUTF8 } from './utfx';\nexport function UTF16ToUTF8(key) {\n  var sd;\n  encodeUTF16toUTF8(stringSource(key), sd = stringDestination());\n  return sd();\n}\n/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\nexport function x86Multiply(m, n) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n  return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);\n}\nexport function x86Rotl(m, n) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n  return m << n | m >>> 32 - n;\n}\nexport function x86Fmix(h) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n  h ^= h >>> 16;\n  h = x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n}","map":{"version":3,"names":["stringSource","stringDestination","encodeUTF16toUTF8","UTF16ToUTF8","key","sd","x86Multiply","m","n","x86Rotl","x86Fmix","h"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/murmur3/common.js"],"sourcesContent":["import { stringSource, stringDestination, encodeUTF16toUTF8 } from './utfx';\nexport function UTF16ToUTF8(key) {\n    var sd;\n    encodeUTF16toUTF8(stringSource(key), sd = stringDestination());\n    return sd();\n}\n/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\nexport function x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n    return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n}\nexport function x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n    return (m << n) | (m >>> (32 - n));\n}\nexport function x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n    h ^= h >>> 16;\n    h = x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h = x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n    return h;\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,QAAQ;AAC3E,OAAO,SAASC,WAAW,CAACC,GAAG,EAAE;EAC7B,IAAIC,EAAE;EACNH,iBAAiB,CAACF,YAAY,CAACI,GAAG,CAAC,EAAEC,EAAE,GAAGJ,iBAAiB,EAAE,CAAC;EAC9D,OAAOI,EAAE,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC9B;EACA;EACA;EACA;EACA,OAAQ,CAACD,CAAC,GAAG,MAAM,IAAIC,CAAC,IAAK,CAAE,CAACD,CAAC,KAAK,EAAE,IAAIC,CAAC,GAAI,MAAM,KAAK,EAAE,CAAC;AACnE;AACA,OAAO,SAASC,OAAO,CAACF,CAAC,EAAEC,CAAC,EAAE;EAC1B;EACA;EACA;EACA;EACA,OAAQD,CAAC,IAAIC,CAAC,GAAKD,CAAC,KAAM,EAAE,GAAGC,CAAG;AACtC;AACA,OAAO,SAASE,OAAO,CAACC,CAAC,EAAE;EACvB;EACA;EACA;EACAA,CAAC,IAAIA,CAAC,KAAK,EAAE;EACbA,CAAC,GAAGL,WAAW,CAACK,CAAC,EAAE,UAAU,CAAC;EAC9BA,CAAC,IAAIA,CAAC,KAAK,EAAE;EACbA,CAAC,GAAGL,WAAW,CAACK,CAAC,EAAE,UAAU,CAAC;EAC9BA,CAAC,IAAIA,CAAC,KAAK,EAAE;EACb,OAAOA,CAAC;AACZ"},"metadata":{},"sourceType":"module"}