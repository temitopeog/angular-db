{"ast":null,"code":"import { STANDALONE_MODE } from '../constants';\nimport { validateSplits } from '../inputValidation/splits';\nimport { WARN_SPLITS_FILTER_IGNORED, WARN_SPLITS_FILTER_EMPTY, WARN_SPLITS_FILTER_INVALID, SETTINGS_SPLITS_FILTER, LOG_PREFIX_SETTINGS } from '../../logger/constants';\n// Split filters metadata.\n// Ordered according to their precedency when forming the filter query string: `&names=<values>&prefixes=<values>`\nvar FILTERS_METADATA = [{\n  type: 'byName',\n  maxLength: 400,\n  queryParam: 'names='\n}, {\n  type: 'byPrefix',\n  maxLength: 50,\n  queryParam: 'prefixes='\n}];\n/**\n * Validates that the given value is a valid filter type\n */\nfunction validateFilterType(maybeFilterType) {\n  return FILTERS_METADATA.some(function (filterMetadata) {\n    return filterMetadata.type === maybeFilterType;\n  });\n}\n/**\n * Validate, deduplicate and sort a given list of filter values.\n *\n * @param {string} type filter type string used for log messages\n * @param {string[]} values list of values to validate, deduplicate and sort\n * @param {number} maxLength\n * @returns list of valid, unique and alphabetically sorted non-empty strings. The list is empty if `values` param is not a non-empty array or all its values are invalid.\n *\n * @throws Error if the sanitized list exceeds the length indicated by `maxLength`\n */\nfunction validateSplitFilter(log, type, values, maxLength) {\n  // validate and remove invalid and duplicated values\n  var result = validateSplits(log, values, LOG_PREFIX_SETTINGS, type + \" filter\", type + \" filter value\");\n  if (result) {\n    // check max length\n    if (result.length > maxLength) throw new Error(maxLength + \" unique values can be specified at most for '\" + type + \"' filter. You passed \" + result.length + \". Please consider reducing the amount or using other filter.\");\n    // sort values\n    result.sort();\n  }\n  return result || []; // returns empty array if `result` is `false`\n}\n/**\n * Returns a string representing the URL encoded query component of /splitChanges URL.\n *\n * The possible formats of the query string are:\n *  - null: if all filters are empty\n *  - '&names=<comma-separated-values>': if only `byPrefix` filter is undefined\n *  - '&prefixes=<comma-separated-values>': if only `byName` filter is undefined\n *  - '&names=<comma-separated-values>&prefixes=<comma-separated-values>': if no one is undefined\n *\n * @param {Object} groupedFilters object of filters. Each filter must be a list of valid, unique and ordered string values.\n * @returns null or string with the `split filter query` component of the URL.\n */\nfunction queryStringBuilder(groupedFilters) {\n  var queryParams = [];\n  FILTERS_METADATA.forEach(function (_a) {\n    var type = _a.type,\n      queryParam = _a.queryParam;\n    var filter = groupedFilters[type];\n    if (filter.length > 0) queryParams.push(queryParam + filter.map(function (value) {\n      return encodeURIComponent(value);\n    }).join(','));\n  });\n  return queryParams.length > 0 ? '&' + queryParams.join('&') : null;\n}\n/**\n * Validates `splitFilters` configuration object and parses it into a query string for filtering splits on `/splitChanges` fetch.\n *\n * @param {ILogger} log logger\n * @param {any} maybeSplitFilters split filters configuration param provided by the user\n * @param {string} mode settings mode\n * @returns it returns an object with the following properties:\n *  - `validFilters`: the validated `splitFilters` configuration object defined by the user.\n *  - `queryString`: the parsed split filter query. it is null if all filters are invalid or all values in filters are invalid.\n *  - `groupedFilters`: list of values grouped by filter type.\n *\n * @throws Error if the some of the grouped list of values per filter exceeds the max allowed length\n */\nexport function validateSplitFilters(log, maybeSplitFilters, mode) {\n  // Validation result schema\n  var res = {\n    validFilters: [],\n    queryString: null,\n    groupedFilters: {\n      byName: [],\n      byPrefix: []\n    }\n  };\n  // do nothing if `splitFilters` param is not a non-empty array or mode is not STANDALONE\n  if (!maybeSplitFilters) return res;\n  // Warn depending on the mode\n  if (mode !== STANDALONE_MODE) {\n    log.warn(WARN_SPLITS_FILTER_IGNORED, [STANDALONE_MODE]);\n    return res;\n  }\n  // Check collection type\n  if (!Array.isArray(maybeSplitFilters) || maybeSplitFilters.length === 0) {\n    log.warn(WARN_SPLITS_FILTER_EMPTY);\n    return res;\n  }\n  // Validate filters and group their values by filter type inside `groupedFilters` object\n  res.validFilters = maybeSplitFilters.filter(function (filter, index) {\n    if (filter && validateFilterType(filter.type) && Array.isArray(filter.values)) {\n      res.groupedFilters[filter.type] = res.groupedFilters[filter.type].concat(filter.values);\n      return true;\n    } else {\n      log.warn(WARN_SPLITS_FILTER_INVALID, [index]);\n    }\n    return false;\n  });\n  // By filter type, remove invalid and duplicated values and order them\n  FILTERS_METADATA.forEach(function (_a) {\n    var type = _a.type,\n      maxLength = _a.maxLength;\n    if (res.groupedFilters[type].length > 0) res.groupedFilters[type] = validateSplitFilter(log, type, res.groupedFilters[type], maxLength);\n  });\n  // build query string\n  res.queryString = queryStringBuilder(res.groupedFilters);\n  log.debug(SETTINGS_SPLITS_FILTER, [res.queryString]);\n  return res;\n}","map":{"version":3,"names":["STANDALONE_MODE","validateSplits","WARN_SPLITS_FILTER_IGNORED","WARN_SPLITS_FILTER_EMPTY","WARN_SPLITS_FILTER_INVALID","SETTINGS_SPLITS_FILTER","LOG_PREFIX_SETTINGS","FILTERS_METADATA","type","maxLength","queryParam","validateFilterType","maybeFilterType","some","filterMetadata","validateSplitFilter","log","values","result","length","Error","sort","queryStringBuilder","groupedFilters","queryParams","forEach","_a","filter","push","map","value","encodeURIComponent","join","validateSplitFilters","maybeSplitFilters","mode","res","validFilters","queryString","byName","byPrefix","warn","Array","isArray","index","concat","debug"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/utils/settingsValidation/splitFilters.js"],"sourcesContent":["import { STANDALONE_MODE } from '../constants';\nimport { validateSplits } from '../inputValidation/splits';\nimport { WARN_SPLITS_FILTER_IGNORED, WARN_SPLITS_FILTER_EMPTY, WARN_SPLITS_FILTER_INVALID, SETTINGS_SPLITS_FILTER, LOG_PREFIX_SETTINGS } from '../../logger/constants';\n// Split filters metadata.\n// Ordered according to their precedency when forming the filter query string: `&names=<values>&prefixes=<values>`\nvar FILTERS_METADATA = [\n    {\n        type: 'byName',\n        maxLength: 400,\n        queryParam: 'names='\n    },\n    {\n        type: 'byPrefix',\n        maxLength: 50,\n        queryParam: 'prefixes='\n    }\n];\n/**\n * Validates that the given value is a valid filter type\n */\nfunction validateFilterType(maybeFilterType) {\n    return FILTERS_METADATA.some(function (filterMetadata) { return filterMetadata.type === maybeFilterType; });\n}\n/**\n * Validate, deduplicate and sort a given list of filter values.\n *\n * @param {string} type filter type string used for log messages\n * @param {string[]} values list of values to validate, deduplicate and sort\n * @param {number} maxLength\n * @returns list of valid, unique and alphabetically sorted non-empty strings. The list is empty if `values` param is not a non-empty array or all its values are invalid.\n *\n * @throws Error if the sanitized list exceeds the length indicated by `maxLength`\n */\nfunction validateSplitFilter(log, type, values, maxLength) {\n    // validate and remove invalid and duplicated values\n    var result = validateSplits(log, values, LOG_PREFIX_SETTINGS, type + \" filter\", type + \" filter value\");\n    if (result) {\n        // check max length\n        if (result.length > maxLength)\n            throw new Error(maxLength + \" unique values can be specified at most for '\" + type + \"' filter. You passed \" + result.length + \". Please consider reducing the amount or using other filter.\");\n        // sort values\n        result.sort();\n    }\n    return result || []; // returns empty array if `result` is `false`\n}\n/**\n * Returns a string representing the URL encoded query component of /splitChanges URL.\n *\n * The possible formats of the query string are:\n *  - null: if all filters are empty\n *  - '&names=<comma-separated-values>': if only `byPrefix` filter is undefined\n *  - '&prefixes=<comma-separated-values>': if only `byName` filter is undefined\n *  - '&names=<comma-separated-values>&prefixes=<comma-separated-values>': if no one is undefined\n *\n * @param {Object} groupedFilters object of filters. Each filter must be a list of valid, unique and ordered string values.\n * @returns null or string with the `split filter query` component of the URL.\n */\nfunction queryStringBuilder(groupedFilters) {\n    var queryParams = [];\n    FILTERS_METADATA.forEach(function (_a) {\n        var type = _a.type, queryParam = _a.queryParam;\n        var filter = groupedFilters[type];\n        if (filter.length > 0)\n            queryParams.push(queryParam + filter.map(function (value) { return encodeURIComponent(value); }).join(','));\n    });\n    return queryParams.length > 0 ? '&' + queryParams.join('&') : null;\n}\n/**\n * Validates `splitFilters` configuration object and parses it into a query string for filtering splits on `/splitChanges` fetch.\n *\n * @param {ILogger} log logger\n * @param {any} maybeSplitFilters split filters configuration param provided by the user\n * @param {string} mode settings mode\n * @returns it returns an object with the following properties:\n *  - `validFilters`: the validated `splitFilters` configuration object defined by the user.\n *  - `queryString`: the parsed split filter query. it is null if all filters are invalid or all values in filters are invalid.\n *  - `groupedFilters`: list of values grouped by filter type.\n *\n * @throws Error if the some of the grouped list of values per filter exceeds the max allowed length\n */\nexport function validateSplitFilters(log, maybeSplitFilters, mode) {\n    // Validation result schema\n    var res = {\n        validFilters: [],\n        queryString: null,\n        groupedFilters: { byName: [], byPrefix: [] }\n    };\n    // do nothing if `splitFilters` param is not a non-empty array or mode is not STANDALONE\n    if (!maybeSplitFilters)\n        return res;\n    // Warn depending on the mode\n    if (mode !== STANDALONE_MODE) {\n        log.warn(WARN_SPLITS_FILTER_IGNORED, [STANDALONE_MODE]);\n        return res;\n    }\n    // Check collection type\n    if (!Array.isArray(maybeSplitFilters) || maybeSplitFilters.length === 0) {\n        log.warn(WARN_SPLITS_FILTER_EMPTY);\n        return res;\n    }\n    // Validate filters and group their values by filter type inside `groupedFilters` object\n    res.validFilters = maybeSplitFilters.filter(function (filter, index) {\n        if (filter && validateFilterType(filter.type) && Array.isArray(filter.values)) {\n            res.groupedFilters[filter.type] = res.groupedFilters[filter.type].concat(filter.values);\n            return true;\n        }\n        else {\n            log.warn(WARN_SPLITS_FILTER_INVALID, [index]);\n        }\n        return false;\n    });\n    // By filter type, remove invalid and duplicated values and order them\n    FILTERS_METADATA.forEach(function (_a) {\n        var type = _a.type, maxLength = _a.maxLength;\n        if (res.groupedFilters[type].length > 0)\n            res.groupedFilters[type] = validateSplitFilter(log, type, res.groupedFilters[type], maxLength);\n    });\n    // build query string\n    res.queryString = queryStringBuilder(res.groupedFilters);\n    log.debug(SETTINGS_SPLITS_FILTER, [res.queryString]);\n    return res;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}