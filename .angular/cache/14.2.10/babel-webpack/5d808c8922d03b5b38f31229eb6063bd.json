{"ast":null,"code":"var ImpressionsCachePluggable = /** @class */function () {\n  function ImpressionsCachePluggable(log, key, wrapper, metadata) {\n    this.log = log;\n    this.key = key;\n    this.wrapper = wrapper;\n    this.metadata = metadata;\n  }\n  /**\n   * Push given impressions to the storage.\n   * @param impressions  List of impresions to push.\n   * @returns  A promise that is resolved if the push operation succeeded\n   * or rejected if the wrapper operation fails.\n   */\n  ImpressionsCachePluggable.prototype.track = function (impressions) {\n    return this.wrapper.pushItems(this.key, this._toJSON(impressions));\n  };\n  ImpressionsCachePluggable.prototype._toJSON = function (impressions) {\n    var _this = this;\n    return impressions.map(function (impression) {\n      var keyName = impression.keyName,\n        bucketingKey = impression.bucketingKey,\n        feature = impression.feature,\n        treatment = impression.treatment,\n        label = impression.label,\n        time = impression.time,\n        changeNumber = impression.changeNumber;\n      return JSON.stringify({\n        m: _this.metadata,\n        i: {\n          k: keyName,\n          b: bucketingKey,\n          f: feature,\n          t: treatment,\n          r: label,\n          c: changeNumber,\n          m: time\n        }\n      });\n    });\n  };\n  /**\n   * Returns a promise that resolves with the count of stored impressions, or 0 if there was some error.\n   * The promise will never be rejected.\n   */\n  ImpressionsCachePluggable.prototype.count = function () {\n    return this.wrapper.getItemsCount(this.key).catch(function () {\n      return 0;\n    });\n  };\n  /**\n   * Removes the given number of impressions from the store. If a number is not provided, it deletes all items.\n   * The returned promise rejects if the wrapper operation fails.\n   */\n  ImpressionsCachePluggable.prototype.drop = function (count) {\n    if (!count) return this.wrapper.del(this.key);\n    return this.wrapper.popItems(this.key, count).then(function () {});\n  };\n  /**\n   * Pop the given number of impressions from the store.\n   * The returned promise rejects if the wrapper operation fails.\n   */\n  ImpressionsCachePluggable.prototype.popNWithMetadata = function (count) {\n    return this.wrapper.popItems(this.key, count).then(function (items) {\n      return items.map(function (item) {\n        return JSON.parse(item);\n      });\n    });\n  };\n  return ImpressionsCachePluggable;\n}();\nexport { ImpressionsCachePluggable };","map":{"version":3,"names":["ImpressionsCachePluggable","log","key","wrapper","metadata","prototype","track","impressions","pushItems","_toJSON","_this","map","impression","keyName","bucketingKey","feature","treatment","label","time","changeNumber","JSON","stringify","m","i","k","b","f","t","r","c","count","getItemsCount","catch","drop","del","popItems","then","popNWithMetadata","items","item","parse"],"sources":["/Users/temitopeogunrekun/Desktop/angular-db/node_modules/@splitsoftware/splitio-commons/esm/storages/pluggable/ImpressionsCachePluggable.js"],"sourcesContent":["var ImpressionsCachePluggable = /** @class */ (function () {\n    function ImpressionsCachePluggable(log, key, wrapper, metadata) {\n        this.log = log;\n        this.key = key;\n        this.wrapper = wrapper;\n        this.metadata = metadata;\n    }\n    /**\n     * Push given impressions to the storage.\n     * @param impressions  List of impresions to push.\n     * @returns  A promise that is resolved if the push operation succeeded\n     * or rejected if the wrapper operation fails.\n     */\n    ImpressionsCachePluggable.prototype.track = function (impressions) {\n        return this.wrapper.pushItems(this.key, this._toJSON(impressions));\n    };\n    ImpressionsCachePluggable.prototype._toJSON = function (impressions) {\n        var _this = this;\n        return impressions.map(function (impression) {\n            var keyName = impression.keyName, bucketingKey = impression.bucketingKey, feature = impression.feature, treatment = impression.treatment, label = impression.label, time = impression.time, changeNumber = impression.changeNumber;\n            return JSON.stringify({\n                m: _this.metadata,\n                i: {\n                    k: keyName,\n                    b: bucketingKey,\n                    f: feature,\n                    t: treatment,\n                    r: label,\n                    c: changeNumber,\n                    m: time\n                }\n            });\n        });\n    };\n    /**\n     * Returns a promise that resolves with the count of stored impressions, or 0 if there was some error.\n     * The promise will never be rejected.\n     */\n    ImpressionsCachePluggable.prototype.count = function () {\n        return this.wrapper.getItemsCount(this.key).catch(function () { return 0; });\n    };\n    /**\n     * Removes the given number of impressions from the store. If a number is not provided, it deletes all items.\n     * The returned promise rejects if the wrapper operation fails.\n     */\n    ImpressionsCachePluggable.prototype.drop = function (count) {\n        if (!count)\n            return this.wrapper.del(this.key);\n        return this.wrapper.popItems(this.key, count).then(function () { });\n    };\n    /**\n     * Pop the given number of impressions from the store.\n     * The returned promise rejects if the wrapper operation fails.\n     */\n    ImpressionsCachePluggable.prototype.popNWithMetadata = function (count) {\n        return this.wrapper.popItems(this.key, count).then(function (items) {\n            return items.map(function (item) { return JSON.parse(item); });\n        });\n    };\n    return ImpressionsCachePluggable;\n}());\nexport { ImpressionsCachePluggable };\n"],"mappings":"AAAA,IAAIA,yBAAyB,GAAG,aAAe,YAAY;EACvD,SAASA,yBAAyB,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IAC5D,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIJ,yBAAyB,CAACK,SAAS,CAACC,KAAK,GAAG,UAAUC,WAAW,EAAE;IAC/D,OAAO,IAAI,CAACJ,OAAO,CAACK,SAAS,CAAC,IAAI,CAACN,GAAG,EAAE,IAAI,CAACO,OAAO,CAACF,WAAW,CAAC,CAAC;EACtE,CAAC;EACDP,yBAAyB,CAACK,SAAS,CAACI,OAAO,GAAG,UAAUF,WAAW,EAAE;IACjE,IAAIG,KAAK,GAAG,IAAI;IAChB,OAAOH,WAAW,CAACI,GAAG,CAAC,UAAUC,UAAU,EAAE;MACzC,IAAIC,OAAO,GAAGD,UAAU,CAACC,OAAO;QAAEC,YAAY,GAAGF,UAAU,CAACE,YAAY;QAAEC,OAAO,GAAGH,UAAU,CAACG,OAAO;QAAEC,SAAS,GAAGJ,UAAU,CAACI,SAAS;QAAEC,KAAK,GAAGL,UAAU,CAACK,KAAK;QAAEC,IAAI,GAAGN,UAAU,CAACM,IAAI;QAAEC,YAAY,GAAGP,UAAU,CAACO,YAAY;MAClO,OAAOC,IAAI,CAACC,SAAS,CAAC;QAClBC,CAAC,EAAEZ,KAAK,CAACN,QAAQ;QACjBmB,CAAC,EAAE;UACCC,CAAC,EAAEX,OAAO;UACVY,CAAC,EAAEX,YAAY;UACfY,CAAC,EAAEX,OAAO;UACVY,CAAC,EAAEX,SAAS;UACZY,CAAC,EAAEX,KAAK;UACRY,CAAC,EAAEV,YAAY;UACfG,CAAC,EAAEJ;QACP;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIlB,yBAAyB,CAACK,SAAS,CAACyB,KAAK,GAAG,YAAY;IACpD,OAAO,IAAI,CAAC3B,OAAO,CAAC4B,aAAa,CAAC,IAAI,CAAC7B,GAAG,CAAC,CAAC8B,KAAK,CAAC,YAAY;MAAE,OAAO,CAAC;IAAE,CAAC,CAAC;EAChF,CAAC;EACD;AACJ;AACA;AACA;EACIhC,yBAAyB,CAACK,SAAS,CAAC4B,IAAI,GAAG,UAAUH,KAAK,EAAE;IACxD,IAAI,CAACA,KAAK,EACN,OAAO,IAAI,CAAC3B,OAAO,CAAC+B,GAAG,CAAC,IAAI,CAAChC,GAAG,CAAC;IACrC,OAAO,IAAI,CAACC,OAAO,CAACgC,QAAQ,CAAC,IAAI,CAACjC,GAAG,EAAE4B,KAAK,CAAC,CAACM,IAAI,CAAC,YAAY,CAAE,CAAC,CAAC;EACvE,CAAC;EACD;AACJ;AACA;AACA;EACIpC,yBAAyB,CAACK,SAAS,CAACgC,gBAAgB,GAAG,UAAUP,KAAK,EAAE;IACpE,OAAO,IAAI,CAAC3B,OAAO,CAACgC,QAAQ,CAAC,IAAI,CAACjC,GAAG,EAAE4B,KAAK,CAAC,CAACM,IAAI,CAAC,UAAUE,KAAK,EAAE;MAChE,OAAOA,KAAK,CAAC3B,GAAG,CAAC,UAAU4B,IAAI,EAAE;QAAE,OAAOnB,IAAI,CAACoB,KAAK,CAACD,IAAI,CAAC;MAAE,CAAC,CAAC;IAClE,CAAC,CAAC;EACN,CAAC;EACD,OAAOvC,yBAAyB;AACpC,CAAC,EAAG;AACJ,SAASA,yBAAyB"},"metadata":{},"sourceType":"module"}